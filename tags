!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/syslab/workspace_la/btrfs_668_multiple/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
ADVANCE	send.c	/^#define ADVANCE	/;"	d	file:
ADVANCE_ONLY_NEXT	send.c	/^#define ADVANCE_ONLY_NEXT	/;"	d	file:
ALLOC_CHUNK	space-info.c	/^	ALLOC_CHUNK,$/;"	e	enum:evict_flush_states	file:
ALLOC_CHUNK	space-info.c	/^	ALLOC_CHUNK,$/;"	e	enum:priority_flush_states	file:
ALLOC_CHUNK	space-info.h	/^	ALLOC_CHUNK		= 8,$/;"	e	enum:btrfs_flush_state
ALLOC_CHUNK_FORCE	space-info.c	/^	ALLOC_CHUNK_FORCE,$/;"	e	enum:data_flush_states	file:
ALLOC_CHUNK_FORCE	space-info.h	/^	ALLOC_CHUNK_FORCE	= 9,$/;"	e	enum:btrfs_flush_state
ASSERT	messages.h	/^#define ASSERT(/;"	d
At the location where you want to combine and see the results:	calclock/README.md	/^### At the location where you want to combine and see the results:$/;"	S	section:Per-CPU Calclock""Usage
At the location where you want to profile:	calclock/README.md	/^### At the location where you want to profile:$/;"	S	section:Per-CPU Calclock""Usage
BACKREF_FOUND_NOT_SHARED	backref.c	/^#define BACKREF_FOUND_NOT_SHARED /;"	d	file:
BACKREF_FOUND_SHARED	backref.c	/^#define BACKREF_FOUND_SHARED /;"	d	file:
BITMAP_FIRST_BYTE_MASK	extent_io.h	/^#define BITMAP_FIRST_BYTE_MASK(/;"	d
BITMAP_LAST_BYTE_MASK	extent_io.h	/^#define BITMAP_LAST_BYTE_MASK(/;"	d
BITS_PER_BITMAP	free-space-cache.c	/^#define BITS_PER_BITMAP	/;"	d	file:
BITS_PER_BITMAP	tests/free-space-tests.c	/^#define BITS_PER_BITMAP	/;"	d	file:
BIT_BYTE	extent_io.h	/^#define BIT_BYTE(/;"	d
BLOCK_GROUP_FLAG_CHUNK_ITEM_INSERTED	block-group.h	/^	BLOCK_GROUP_FLAG_CHUNK_ITEM_INSERTED,$/;"	e	enum:btrfs_block_group_flags
BLOCK_GROUP_FLAG_IREF	block-group.h	/^	BLOCK_GROUP_FLAG_IREF,$/;"	e	enum:btrfs_block_group_flags
BLOCK_GROUP_FLAG_NEEDS_FREE_SPACE	block-group.h	/^	BLOCK_GROUP_FLAG_NEEDS_FREE_SPACE,$/;"	e	enum:btrfs_block_group_flags
BLOCK_GROUP_FLAG_NEW	block-group.h	/^	BLOCK_GROUP_FLAG_NEW,$/;"	e	enum:btrfs_block_group_flags
BLOCK_GROUP_FLAG_RELOCATING_REPAIR	block-group.h	/^	BLOCK_GROUP_FLAG_RELOCATING_REPAIR,$/;"	e	enum:btrfs_block_group_flags
BLOCK_GROUP_FLAG_REMOVED	block-group.h	/^	BLOCK_GROUP_FLAG_REMOVED,$/;"	e	enum:btrfs_block_group_flags
BLOCK_GROUP_FLAG_SEQUENTIAL_ZONE	block-group.h	/^	BLOCK_GROUP_FLAG_SEQUENTIAL_ZONE,$/;"	e	enum:btrfs_block_group_flags
BLOCK_GROUP_FLAG_TO_COPY	block-group.h	/^	BLOCK_GROUP_FLAG_TO_COPY,$/;"	e	enum:btrfs_block_group_flags
BLOCK_GROUP_FLAG_ZONED_DATA_RELOC	block-group.h	/^	BLOCK_GROUP_FLAG_ZONED_DATA_RELOC,$/;"	e	enum:btrfs_block_group_flags
BLOCK_GROUP_FLAG_ZONE_IS_ACTIVE	block-group.h	/^	BLOCK_GROUP_FLAG_ZONE_IS_ACTIVE,$/;"	e	enum:btrfs_block_group_flags
BTRFSIC_BLOCK_HASHTABLE_SIZE	check-integrity.c	/^#define BTRFSIC_BLOCK_HASHTABLE_SIZE /;"	d	file:
BTRFSIC_BLOCK_LINK_HASHTABLE_SIZE	check-integrity.c	/^#define BTRFSIC_BLOCK_LINK_HASHTABLE_SIZE /;"	d	file:
BTRFSIC_BLOCK_LINK_MAGIC_NUMBER	check-integrity.c	/^#define BTRFSIC_BLOCK_LINK_MAGIC_NUMBER /;"	d	file:
BTRFSIC_BLOCK_MAGIC_NUMBER	check-integrity.c	/^#define BTRFSIC_BLOCK_MAGIC_NUMBER /;"	d	file:
BTRFSIC_BLOCK_STACK_FRAME_MAGIC_NUMBER	check-integrity.c	/^#define BTRFSIC_BLOCK_STACK_FRAME_MAGIC_NUMBER /;"	d	file:
BTRFSIC_DEV2STATE_HASHTABLE_SIZE	check-integrity.c	/^#define BTRFSIC_DEV2STATE_HASHTABLE_SIZE /;"	d	file:
BTRFSIC_DEV2STATE_MAGIC_NUMBER	check-integrity.c	/^#define BTRFSIC_DEV2STATE_MAGIC_NUMBER /;"	d	file:
BTRFSIC_GENERATION_UNKNOWN	check-integrity.c	/^#define BTRFSIC_GENERATION_UNKNOWN /;"	d	file:
BTRFSIC_PRINT_MASK_END_IO_BIO_BH	check-integrity.c	/^#define BTRFSIC_PRINT_MASK_END_IO_BIO_BH	/;"	d	file:
BTRFSIC_PRINT_MASK_INITIAL_ALL_TREES	check-integrity.c	/^#define BTRFSIC_PRINT_MASK_INITIAL_ALL_TREES	/;"	d	file:
BTRFSIC_PRINT_MASK_INITIAL_DATABASE	check-integrity.c	/^#define BTRFSIC_PRINT_MASK_INITIAL_DATABASE	/;"	d	file:
BTRFSIC_PRINT_MASK_INITIAL_TREE	check-integrity.c	/^#define BTRFSIC_PRINT_MASK_INITIAL_TREE	/;"	d	file:
BTRFSIC_PRINT_MASK_NUM_COPIES	check-integrity.c	/^#define BTRFSIC_PRINT_MASK_NUM_COPIES	/;"	d	file:
BTRFSIC_PRINT_MASK_ROOT_CHUNK_LOG_TREE_LOCATION	check-integrity.c	/^#define BTRFSIC_PRINT_MASK_ROOT_CHUNK_LOG_TREE_LOCATION	/;"	d	file:
BTRFSIC_PRINT_MASK_SUBMIT_BIO_BH	check-integrity.c	/^#define BTRFSIC_PRINT_MASK_SUBMIT_BIO_BH	/;"	d	file:
BTRFSIC_PRINT_MASK_SUBMIT_BIO_BH_VERBOSE	check-integrity.c	/^#define BTRFSIC_PRINT_MASK_SUBMIT_BIO_BH_VERBOSE	/;"	d	file:
BTRFSIC_PRINT_MASK_SUPERBLOCK_WRITE	check-integrity.c	/^#define BTRFSIC_PRINT_MASK_SUPERBLOCK_WRITE	/;"	d	file:
BTRFSIC_PRINT_MASK_TREE_AFTER_SB_WRITE	check-integrity.c	/^#define BTRFSIC_PRINT_MASK_TREE_AFTER_SB_WRITE	/;"	d	file:
BTRFSIC_PRINT_MASK_TREE_BEFORE_SB_WRITE	check-integrity.c	/^#define BTRFSIC_PRINT_MASK_TREE_BEFORE_SB_WRITE	/;"	d	file:
BTRFSIC_PRINT_MASK_TREE_WITH_ALL_MIRRORS	check-integrity.c	/^#define BTRFSIC_PRINT_MASK_TREE_WITH_ALL_MIRRORS	/;"	d	file:
BTRFSIC_PRINT_MASK_VERBOSE	check-integrity.c	/^#define BTRFSIC_PRINT_MASK_VERBOSE	/;"	d	file:
BTRFSIC_PRINT_MASK_VERY_VERBOSE	check-integrity.c	/^#define BTRFSIC_PRINT_MASK_VERY_VERBOSE	/;"	d	file:
BTRFSIC_TREE_DUMP_MAX_INDENT_LEVEL	check-integrity.c	/^#define BTRFSIC_TREE_DUMP_MAX_INDENT_LEVEL /;"	d	file:
BTRFS_32BIT_EARLY_WARN_THRESHOLD	messages.h	/^#define BTRFS_32BIT_EARLY_WARN_THRESHOLD /;"	d
BTRFS_32BIT_MAX_FILE_SIZE	messages.h	/^#define BTRFS_32BIT_MAX_FILE_SIZE /;"	d
BTRFS_ACCESSORS_H	accessors.h	/^#define BTRFS_ACCESSORS_H$/;"	d
BTRFS_ACL_H	acl.h	/^#define BTRFS_ACL_H$/;"	d
BTRFS_ADD_DELAYED_EXTENT	delayed-ref.h	/^#define BTRFS_ADD_DELAYED_EXTENT /;"	d
BTRFS_ADD_DELAYED_REF	delayed-ref.h	/^#define BTRFS_ADD_DELAYED_REF /;"	d
BTRFS_ASSERT	Kconfig	/^config BTRFS_ASSERT$/;"	c
BTRFS_ASYNC_DISCARD_DEFAULT_MAX_SIZE	discard.h	/^#define BTRFS_ASYNC_DISCARD_DEFAULT_MAX_SIZE	/;"	d
BTRFS_ASYNC_DISCARD_MAX_FILTER	discard.h	/^#define BTRFS_ASYNC_DISCARD_MAX_FILTER	/;"	d
BTRFS_ASYNC_DISCARD_MIN_FILTER	discard.h	/^#define BTRFS_ASYNC_DISCARD_MIN_FILTER	/;"	d
BTRFS_ASYNC_THREAD_H	async-thread.h	/^#define BTRFS_ASYNC_THREAD_H$/;"	d
BTRFS_ATTR	sysfs.c	/^#define BTRFS_ATTR(/;"	d	file:
BTRFS_ATTR_PTR	sysfs.c	/^#define BTRFS_ATTR_PTR(/;"	d	file:
BTRFS_ATTR_RW	sysfs.c	/^#define BTRFS_ATTR_RW(/;"	d	file:
BTRFS_ATTR_W	sysfs.c	/^#define BTRFS_ATTR_W(/;"	d	file:
BTRFS_BACKREF_CTX_PREV_EXTENTS_SIZE	backref.h	/^#define BTRFS_BACKREF_CTX_PREV_EXTENTS_SIZE /;"	d
BTRFS_BACKREF_H	backref.h	/^#define BTRFS_BACKREF_H$/;"	d
BTRFS_BDEV_BLOCKSIZE	disk-io.h	/^#define BTRFS_BDEV_BLOCKSIZE	/;"	d
BTRFS_BG_FLAG_TO_INDEX	volumes.h	/^#define BTRFS_BG_FLAG_TO_INDEX(/;"	d
BTRFS_BG_SZ_LARGE	block-group.h	/^	BTRFS_BG_SZ_LARGE,$/;"	e	enum:btrfs_block_group_size_class
BTRFS_BG_SZ_MEDIUM	block-group.h	/^	BTRFS_BG_SZ_MEDIUM,$/;"	e	enum:btrfs_block_group_size_class
BTRFS_BG_SZ_NONE	block-group.h	/^	BTRFS_BG_SZ_NONE,$/;"	e	enum:btrfs_block_group_size_class
BTRFS_BG_SZ_SMALL	block-group.h	/^	BTRFS_BG_SZ_SMALL,$/;"	e	enum:btrfs_block_group_size_class
BTRFS_BIO_H	bio.h	/^#define BTRFS_BIO_H$/;"	d
BTRFS_BIO_INLINE_CSUM_SIZE	bio.h	/^#define BTRFS_BIO_INLINE_CSUM_SIZE	/;"	d
BTRFS_BLOCK_GROUP_H	block-group.h	/^#define BTRFS_BLOCK_GROUP_H$/;"	d
BTRFS_BLOCK_GROUP_STRIPE_MASK	volumes.c	/^#define BTRFS_BLOCK_GROUP_STRIPE_MASK	/;"	d	file:
BTRFS_BLOCK_RSV_CHUNK	block-rsv.h	/^	BTRFS_BLOCK_RSV_CHUNK,$/;"	e	enum:btrfs_rsv_type
BTRFS_BLOCK_RSV_DELALLOC	block-rsv.h	/^	BTRFS_BLOCK_RSV_DELALLOC,$/;"	e	enum:btrfs_rsv_type
BTRFS_BLOCK_RSV_DELOPS	block-rsv.h	/^	BTRFS_BLOCK_RSV_DELOPS,$/;"	e	enum:btrfs_rsv_type
BTRFS_BLOCK_RSV_DELREFS	block-rsv.h	/^	BTRFS_BLOCK_RSV_DELREFS,$/;"	e	enum:btrfs_rsv_type
BTRFS_BLOCK_RSV_EMPTY	block-rsv.h	/^	BTRFS_BLOCK_RSV_EMPTY,$/;"	e	enum:btrfs_rsv_type
BTRFS_BLOCK_RSV_GLOBAL	block-rsv.h	/^	BTRFS_BLOCK_RSV_GLOBAL,$/;"	e	enum:btrfs_rsv_type
BTRFS_BLOCK_RSV_H	block-rsv.h	/^#define BTRFS_BLOCK_RSV_H$/;"	d
BTRFS_BLOCK_RSV_TEMP	block-rsv.h	/^	BTRFS_BLOCK_RSV_TEMP,$/;"	e	enum:btrfs_rsv_type
BTRFS_BLOCK_RSV_TRANS	block-rsv.h	/^	BTRFS_BLOCK_RSV_TRANS,$/;"	e	enum:btrfs_rsv_type
BTRFS_BYTES_TO_BLKS	ctree.h	/^#define BTRFS_BYTES_TO_BLKS(/;"	d
BTRFS_CACHE_ERROR	block-group.h	/^	BTRFS_CACHE_ERROR,$/;"	e	enum:btrfs_caching_type
BTRFS_CACHE_FINISHED	block-group.h	/^	BTRFS_CACHE_FINISHED,$/;"	e	enum:btrfs_caching_type
BTRFS_CACHE_NO	block-group.h	/^	BTRFS_CACHE_NO,$/;"	e	enum:btrfs_caching_type
BTRFS_CACHE_STARTED	block-group.h	/^	BTRFS_CACHE_STARTED,$/;"	e	enum:btrfs_caching_type
BTRFS_CHECK_INTEGRITY_H	check-integrity.h	/^#define BTRFS_CHECK_INTEGRITY_H$/;"	d
BTRFS_CHUNK_ALLOC_REGULAR	volumes.h	/^	BTRFS_CHUNK_ALLOC_REGULAR,$/;"	e	enum:btrfs_chunk_allocation_policy
BTRFS_CHUNK_ALLOC_ZONED	volumes.h	/^	BTRFS_CHUNK_ALLOC_ZONED,$/;"	e	enum:btrfs_chunk_allocation_policy
BTRFS_COMPARE_TREE_CHANGED	send.c	/^	BTRFS_COMPARE_TREE_CHANGED,$/;"	e	enum:btrfs_compare_tree_result	file:
BTRFS_COMPARE_TREE_DELETED	send.c	/^	BTRFS_COMPARE_TREE_DELETED,$/;"	e	enum:btrfs_compare_tree_result	file:
BTRFS_COMPARE_TREE_NEW	send.c	/^	BTRFS_COMPARE_TREE_NEW,$/;"	e	enum:btrfs_compare_tree_result	file:
BTRFS_COMPARE_TREE_SAME	send.c	/^	BTRFS_COMPARE_TREE_SAME,$/;"	e	enum:btrfs_compare_tree_result	file:
BTRFS_COMPRESSION_H	compression.h	/^#define BTRFS_COMPRESSION_H$/;"	d
BTRFS_COMPRESS_LZO	compression.h	/^	BTRFS_COMPRESS_LZO   = 2,$/;"	e	enum:btrfs_compression_type
BTRFS_COMPRESS_NONE	compression.h	/^	BTRFS_COMPRESS_NONE  = 0,$/;"	e	enum:btrfs_compression_type
BTRFS_COMPRESS_ZLIB	compression.h	/^	BTRFS_COMPRESS_ZLIB  = 1,$/;"	e	enum:btrfs_compression_type
BTRFS_COMPRESS_ZSTD	compression.h	/^	BTRFS_COMPRESS_ZSTD  = 3,$/;"	e	enum:btrfs_compression_type
BTRFS_CTREE_H	ctree.h	/^#define BTRFS_CTREE_H$/;"	d
BTRFS_DC_CLEAR	block-group.h	/^	BTRFS_DC_CLEAR,$/;"	e	enum:btrfs_disk_cache_state
BTRFS_DC_ERROR	block-group.h	/^	BTRFS_DC_ERROR,$/;"	e	enum:btrfs_disk_cache_state
BTRFS_DC_SETUP	block-group.h	/^	BTRFS_DC_SETUP,$/;"	e	enum:btrfs_disk_cache_state
BTRFS_DC_WRITTEN	block-group.h	/^	BTRFS_DC_WRITTEN,$/;"	e	enum:btrfs_disk_cache_state
BTRFS_DEBUG	Kconfig	/^config BTRFS_DEBUG$/;"	c
BTRFS_DEFAULT_COMMIT_INTERVAL	fs.h	/^#define BTRFS_DEFAULT_COMMIT_INTERVAL	/;"	d
BTRFS_DEFAULT_MAX_INLINE	fs.h	/^#define BTRFS_DEFAULT_MAX_INLINE	/;"	d
BTRFS_DEFAULT_RECLAIM_THRESH	zoned.h	/^#define BTRFS_DEFAULT_RECLAIM_THRESH /;"	d
BTRFS_DEFAULT_ZONED_RECLAIM_THRESH	space-info.c	/^#define BTRFS_DEFAULT_ZONED_RECLAIM_THRESH	/;"	d	file:
BTRFS_DEFRAG_BATCH	defrag.c	/^#define BTRFS_DEFRAG_BATCH	/;"	d	file:
BTRFS_DEFRAG_H	defrag.h	/^#define BTRFS_DEFRAG_H$/;"	d
BTRFS_DELALLOC_SPACE_H	delalloc-space.h	/^#define BTRFS_DELALLOC_SPACE_H$/;"	d
BTRFS_DELAYED_BACKGROUND	delayed-inode.c	/^#define BTRFS_DELAYED_BACKGROUND	/;"	d	file:
BTRFS_DELAYED_BATCH	delayed-inode.c	/^#define BTRFS_DELAYED_BATCH	/;"	d	file:
BTRFS_DELAYED_DELETION_ITEM	delayed-inode.h	/^	BTRFS_DELAYED_DELETION_ITEM$/;"	e	enum:btrfs_delayed_item_type
BTRFS_DELAYED_INODE_H	delayed-inode.h	/^#define BTRFS_DELAYED_INODE_H$/;"	d
BTRFS_DELAYED_INSERTION_ITEM	delayed-inode.h	/^	BTRFS_DELAYED_INSERTION_ITEM,$/;"	e	enum:btrfs_delayed_item_type
BTRFS_DELAYED_NODE_DEL_IREF	delayed-inode.h	/^#define BTRFS_DELAYED_NODE_DEL_IREF	/;"	d
BTRFS_DELAYED_NODE_INODE_DIRTY	delayed-inode.h	/^#define BTRFS_DELAYED_NODE_INODE_DIRTY	/;"	d
BTRFS_DELAYED_NODE_IN_LIST	delayed-inode.h	/^#define BTRFS_DELAYED_NODE_IN_LIST	/;"	d
BTRFS_DELAYED_REFS_FLUSHING	delayed-ref.h	/^	BTRFS_DELAYED_REFS_FLUSHING,$/;"	e	enum:btrfs_delayed_ref_flags
BTRFS_DELAYED_REF_H	delayed-ref.h	/^#define BTRFS_DELAYED_REF_H$/;"	d
BTRFS_DELAYED_WRITEBACK	delayed-inode.c	/^#define BTRFS_DELAYED_WRITEBACK	/;"	d	file:
BTRFS_DEVICE_GETSET_FUNCS	volumes.h	/^#define BTRFS_DEVICE_GETSET_FUNCS(/;"	d
BTRFS_DEVICE_RANGE_RESERVED	fs.h	/^#define BTRFS_DEVICE_RANGE_RESERVED	/;"	d
BTRFS_DEV_LOOKUP_ARGS	volumes.h	/^#define BTRFS_DEV_LOOKUP_ARGS(/;"	d
BTRFS_DEV_LOOKUP_ARGS_INIT	volumes.h	/^#define BTRFS_DEV_LOOKUP_ARGS_INIT /;"	d
BTRFS_DEV_REPLACE_H	dev-replace.h	/^#define BTRFS_DEV_REPLACE_H$/;"	d
BTRFS_DEV_STATE_FLUSH_SENT	volumes.h	/^#define BTRFS_DEV_STATE_FLUSH_SENT	/;"	d
BTRFS_DEV_STATE_IN_FS_METADATA	volumes.h	/^#define BTRFS_DEV_STATE_IN_FS_METADATA	/;"	d
BTRFS_DEV_STATE_MISSING	volumes.h	/^#define BTRFS_DEV_STATE_MISSING	/;"	d
BTRFS_DEV_STATE_NO_READA	volumes.h	/^#define BTRFS_DEV_STATE_NO_READA	/;"	d
BTRFS_DEV_STATE_REPLACE_TGT	volumes.h	/^#define BTRFS_DEV_STATE_REPLACE_TGT	/;"	d
BTRFS_DEV_STATE_WRITEABLE	volumes.h	/^#define BTRFS_DEV_STATE_WRITEABLE	/;"	d
BTRFS_DIRTY_METADATA_THRESH	fs.h	/^#define BTRFS_DIRTY_METADATA_THRESH	/;"	d
BTRFS_DIR_ITEM_H	dir-item.h	/^#define BTRFS_DIR_ITEM_H$/;"	d
BTRFS_DIR_START_INDEX	btrfs_inode.h	/^#define BTRFS_DIR_START_INDEX /;"	d
BTRFS_DISCARD_BITMAPS	block-group.h	/^	BTRFS_DISCARD_BITMAPS,$/;"	e	enum:btrfs_discard_state
BTRFS_DISCARD_DELAY	discard.c	/^#define BTRFS_DISCARD_DELAY	/;"	d	file:
BTRFS_DISCARD_EXTENTS	block-group.h	/^	BTRFS_DISCARD_EXTENTS,$/;"	e	enum:btrfs_discard_state
BTRFS_DISCARD_H	discard.h	/^#define BTRFS_DISCARD_H$/;"	d
BTRFS_DISCARD_INDEX_START	fs.h	/^#define BTRFS_DISCARD_INDEX_START	/;"	d
BTRFS_DISCARD_INDEX_UNUSED	fs.h	/^#define BTRFS_DISCARD_INDEX_UNUSED	/;"	d
BTRFS_DISCARD_MAX_DELAY_MSEC	discard.c	/^#define BTRFS_DISCARD_MAX_DELAY_MSEC	/;"	d	file:
BTRFS_DISCARD_MAX_IOPS	discard.c	/^#define BTRFS_DISCARD_MAX_IOPS	/;"	d	file:
BTRFS_DISCARD_MIN_DELAY_MSEC	discard.c	/^#define BTRFS_DISCARD_MIN_DELAY_MSEC	/;"	d	file:
BTRFS_DISCARD_RESET_CURSOR	block-group.h	/^	BTRFS_DISCARD_RESET_CURSOR,$/;"	e	enum:btrfs_discard_state
BTRFS_DISCARD_UNUSED_DELAY	discard.c	/^#define BTRFS_DISCARD_UNUSED_DELAY	/;"	d	file:
BTRFS_DISK_IO_H	disk-io.h	/^#define BTRFS_DISK_IO_H$/;"	d
BTRFS_DROP_DELAYED_REF	delayed-ref.h	/^#define BTRFS_DROP_DELAYED_REF /;"	d
BTRFS_EMPTY_DIR_SIZE	fs.h	/^#define BTRFS_EMPTY_DIR_SIZE /;"	d
BTRFS_EXCLOP_BALANCE	fs.h	/^	BTRFS_EXCLOP_BALANCE,$/;"	e	enum:btrfs_exclusive_operation
BTRFS_EXCLOP_BALANCE_PAUSED	fs.h	/^	BTRFS_EXCLOP_BALANCE_PAUSED,$/;"	e	enum:btrfs_exclusive_operation
BTRFS_EXCLOP_DEV_ADD	fs.h	/^	BTRFS_EXCLOP_DEV_ADD,$/;"	e	enum:btrfs_exclusive_operation
BTRFS_EXCLOP_DEV_REMOVE	fs.h	/^	BTRFS_EXCLOP_DEV_REMOVE,$/;"	e	enum:btrfs_exclusive_operation
BTRFS_EXCLOP_DEV_REPLACE	fs.h	/^	BTRFS_EXCLOP_DEV_REPLACE,$/;"	e	enum:btrfs_exclusive_operation
BTRFS_EXCLOP_NONE	fs.h	/^	BTRFS_EXCLOP_NONE,$/;"	e	enum:btrfs_exclusive_operation
BTRFS_EXCLOP_RESIZE	fs.h	/^	BTRFS_EXCLOP_RESIZE,$/;"	e	enum:btrfs_exclusive_operation
BTRFS_EXCLOP_SWAP_ACTIVATE	fs.h	/^	BTRFS_EXCLOP_SWAP_ACTIVATE,$/;"	e	enum:btrfs_exclusive_operation
BTRFS_EXPORT_H	export.h	/^#define BTRFS_EXPORT_H$/;"	d
BTRFS_EXTENT_ALLOC_CLUSTERED	extent-tree.h	/^	BTRFS_EXTENT_ALLOC_CLUSTERED,$/;"	e	enum:btrfs_extent_allocation_policy
BTRFS_EXTENT_ALLOC_ZONED	extent-tree.h	/^	BTRFS_EXTENT_ALLOC_ZONED,$/;"	e	enum:btrfs_extent_allocation_policy
BTRFS_EXTENT_IO_H	extent_io.h	/^#define BTRFS_EXTENT_IO_H$/;"	d
BTRFS_EXTENT_IO_TREE_H	extent-io-tree.h	/^#define BTRFS_EXTENT_IO_TREE_H$/;"	d
BTRFS_EXTENT_MAP_H	extent_map.h	/^#define BTRFS_EXTENT_MAP_H$/;"	d
BTRFS_EXTENT_TREE_H	extent-tree.h	/^#define BTRFS_EXTENT_TREE_H$/;"	d
BTRFS_FEATURE_COMPAT_RO_SAFE_CLEAR	fs.h	/^#define BTRFS_FEATURE_COMPAT_RO_SAFE_CLEAR	/;"	d
BTRFS_FEATURE_COMPAT_RO_SAFE_SET	fs.h	/^#define BTRFS_FEATURE_COMPAT_RO_SAFE_SET	/;"	d
BTRFS_FEATURE_COMPAT_RO_SUPP	fs.h	/^#define BTRFS_FEATURE_COMPAT_RO_SUPP	/;"	d
BTRFS_FEATURE_COMPAT_SAFE_CLEAR	fs.h	/^#define BTRFS_FEATURE_COMPAT_SAFE_CLEAR	/;"	d
BTRFS_FEATURE_COMPAT_SAFE_SET	fs.h	/^#define BTRFS_FEATURE_COMPAT_SAFE_SET	/;"	d
BTRFS_FEATURE_COMPAT_SUPP	fs.h	/^#define BTRFS_FEATURE_COMPAT_SUPP	/;"	d
BTRFS_FEATURE_INCOMPAT_SAFE_CLEAR	fs.h	/^#define BTRFS_FEATURE_INCOMPAT_SAFE_CLEAR	/;"	d
BTRFS_FEATURE_INCOMPAT_SAFE_SET	fs.h	/^#define BTRFS_FEATURE_INCOMPAT_SAFE_SET	/;"	d
BTRFS_FEATURE_INCOMPAT_SUPP	fs.h	/^#define BTRFS_FEATURE_INCOMPAT_SUPP	/;"	d
BTRFS_FEATURE_INCOMPAT_SUPP_STABLE	fs.h	/^#define BTRFS_FEATURE_INCOMPAT_SUPP_STABLE	/;"	d
BTRFS_FEATURE_NAME_MAX	sysfs.c	/^#define BTRFS_FEATURE_NAME_MAX /;"	d	file:
BTRFS_FEAT_ATTR	sysfs.c	/^#define BTRFS_FEAT_ATTR(/;"	d	file:
BTRFS_FEAT_ATTR_COMPAT	sysfs.c	/^#define BTRFS_FEAT_ATTR_COMPAT(/;"	d	file:
BTRFS_FEAT_ATTR_COMPAT_RO	sysfs.c	/^#define BTRFS_FEAT_ATTR_COMPAT_RO(/;"	d	file:
BTRFS_FEAT_ATTR_INCOMPAT	sysfs.c	/^#define BTRFS_FEAT_ATTR_INCOMPAT(/;"	d	file:
BTRFS_FEAT_ATTR_PTR	sysfs.c	/^#define BTRFS_FEAT_ATTR_PTR(/;"	d	file:
BTRFS_FID_SIZE_CONNECTABLE	export.c	/^#define BTRFS_FID_SIZE_CONNECTABLE /;"	d	file:
BTRFS_FID_SIZE_CONNECTABLE_ROOT	export.c	/^#define BTRFS_FID_SIZE_CONNECTABLE_ROOT /;"	d	file:
BTRFS_FID_SIZE_NON_CONNECTABLE	export.c	/^#define BTRFS_FID_SIZE_NON_CONNECTABLE /;"	d	file:
BTRFS_FILE_EXTENT_INLINE_DATA_START	file-item.h	/^#define BTRFS_FILE_EXTENT_INLINE_DATA_START	/;"	d
BTRFS_FILE_H	file.h	/^#define BTRFS_FILE_H$/;"	d
BTRFS_FILE_ITEM_H	file-item.h	/^#define BTRFS_FILE_ITEM_H$/;"	d
BTRFS_FREE_SPACE_BITMAP_BITS	free-space-tree.h	/^#define BTRFS_FREE_SPACE_BITMAP_BITS /;"	d
BTRFS_FREE_SPACE_BITMAP_SIZE	free-space-tree.h	/^#define BTRFS_FREE_SPACE_BITMAP_SIZE /;"	d
BTRFS_FREE_SPACE_CACHE_H	free-space-cache.h	/^#define BTRFS_FREE_SPACE_CACHE_H$/;"	d
BTRFS_FREE_SPACE_TREE_H	free-space-tree.h	/^#define BTRFS_FREE_SPACE_TREE_H$/;"	d
BTRFS_FS	Kconfig	/^config BTRFS_FS$/;"	c
BTRFS_FS_32BIT_ERROR	fs.h	/^	BTRFS_FS_32BIT_ERROR,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_32BIT_WARN	fs.h	/^	BTRFS_FS_32BIT_WARN,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_ACTIVE_ZONE_TRACKING	fs.h	/^	BTRFS_FS_ACTIVE_ZONE_TRACKING,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_BALANCE_RUNNING	fs.h	/^	BTRFS_FS_BALANCE_RUNNING,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_BTREE_ERR	fs.h	/^	BTRFS_FS_BTREE_ERR,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_CHECK_INTEGRITY	Kconfig	/^config BTRFS_FS_CHECK_INTEGRITY$/;"	c
BTRFS_FS_CLEANER_RUNNING	fs.h	/^	BTRFS_FS_CLEANER_RUNNING,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_CLEANUP_SPACE_CACHE_V1	fs.h	/^	BTRFS_FS_CLEANUP_SPACE_CACHE_V1,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_CLOSING_DONE	fs.h	/^	BTRFS_FS_CLOSING_DONE,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_CLOSING_START	fs.h	/^	BTRFS_FS_CLOSING_START,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_COMMIT_TRANS	fs.h	/^	BTRFS_FS_COMMIT_TRANS,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_CREATING_FREE_SPACE_TREE	fs.h	/^	BTRFS_FS_CREATING_FREE_SPACE_TREE,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_CSUM_IMPL_FAST	fs.h	/^	BTRFS_FS_CSUM_IMPL_FAST,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_DISCARD_RUNNING	fs.h	/^	BTRFS_FS_DISCARD_RUNNING,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_ERROR	fs.h	/^#define BTRFS_FS_ERROR(/;"	d
BTRFS_FS_FEATURE_CHANGED	fs.h	/^	BTRFS_FS_FEATURE_CHANGED,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_FREE_SPACE_TREE_UNTRUSTED	fs.h	/^	BTRFS_FS_FREE_SPACE_TREE_UNTRUSTED,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_FROZEN	fs.h	/^	BTRFS_FS_FROZEN,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_H	fs.h	/^#define BTRFS_FS_H$/;"	d
BTRFS_FS_LOG1_ERR	fs.h	/^	BTRFS_FS_LOG1_ERR,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_LOG2_ERR	fs.h	/^	BTRFS_FS_LOG2_ERR,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_LOG_CLEANUP_ERROR	fs.h	/^#define BTRFS_FS_LOG_CLEANUP_ERROR(/;"	d
BTRFS_FS_LOG_RECOVERING	fs.h	/^	BTRFS_FS_LOG_RECOVERING,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_NEED_TRANS_COMMIT	fs.h	/^	BTRFS_FS_NEED_TRANS_COMMIT,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_NEED_ZONE_FINISH	fs.h	/^	BTRFS_FS_NEED_ZONE_FINISH,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_OPEN	fs.h	/^	BTRFS_FS_OPEN,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_POSIX_ACL	Kconfig	/^config BTRFS_FS_POSIX_ACL$/;"	c
BTRFS_FS_QUOTA_ENABLED	fs.h	/^	BTRFS_FS_QUOTA_ENABLED,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_QUOTA_OVERRIDE	fs.h	/^	BTRFS_FS_QUOTA_OVERRIDE,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_REF_VERIFY	Kconfig	/^config BTRFS_FS_REF_VERIFY$/;"	c
BTRFS_FS_RELOC_RUNNING	fs.h	/^	BTRFS_FS_RELOC_RUNNING,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_RUN_SANITY_TESTS	Kconfig	/^config BTRFS_FS_RUN_SANITY_TESTS$/;"	c
BTRFS_FS_STATE_COUNT	fs.h	/^	BTRFS_FS_STATE_COUNT$/;"	e	enum:__anon7c96edb40103
BTRFS_FS_STATE_DEV_REPLACING	fs.h	/^	BTRFS_FS_STATE_DEV_REPLACING,$/;"	e	enum:__anon7c96edb40103
BTRFS_FS_STATE_DUMMY_FS_INFO	fs.h	/^	BTRFS_FS_STATE_DUMMY_FS_INFO,$/;"	e	enum:__anon7c96edb40103
BTRFS_FS_STATE_LOG_CLEANUP_ERROR	fs.h	/^	BTRFS_FS_STATE_LOG_CLEANUP_ERROR,$/;"	e	enum:__anon7c96edb40103
BTRFS_FS_STATE_NO_CSUMS	fs.h	/^	BTRFS_FS_STATE_NO_CSUMS,$/;"	e	enum:__anon7c96edb40103
BTRFS_FS_STATE_REMOUNTING	fs.h	/^	BTRFS_FS_STATE_REMOUNTING,$/;"	e	enum:__anon7c96edb40103
BTRFS_FS_STATE_RO	fs.h	/^	BTRFS_FS_STATE_RO,$/;"	e	enum:__anon7c96edb40103
BTRFS_FS_STATE_TRANS_ABORTED	fs.h	/^	BTRFS_FS_STATE_TRANS_ABORTED,$/;"	e	enum:__anon7c96edb40103
BTRFS_FS_TREE_MOD_LOG_USERS	fs.h	/^	BTRFS_FS_TREE_MOD_LOG_USERS,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_UNFINISHED_DROPS	fs.h	/^	BTRFS_FS_UNFINISHED_DROPS,$/;"	e	enum:__anon7c96edb40203
BTRFS_FS_UPDATE_UUID_TREE_GEN	fs.h	/^	BTRFS_FS_UPDATE_UUID_TREE_GEN,$/;"	e	enum:__anon7c96edb40203
BTRFS_I	btrfs_inode.h	/^static inline struct btrfs_inode *BTRFS_I(const struct inode *inode)$/;"	f	typeref:struct:btrfs_inode *
BTRFS_INODE_COPY_EVERYTHING	btrfs_inode.h	/^	BTRFS_INODE_COPY_EVERYTHING,$/;"	e	enum:__anon98c21faa0103
BTRFS_INODE_DUMMY	btrfs_inode.h	/^	BTRFS_INODE_DUMMY,$/;"	e	enum:__anon98c21faa0103
BTRFS_INODE_FLUSH_ON_CLOSE	btrfs_inode.h	/^	BTRFS_INODE_FLUSH_ON_CLOSE,$/;"	e	enum:__anon98c21faa0103
BTRFS_INODE_FREE_SPACE_INODE	btrfs_inode.h	/^	BTRFS_INODE_FREE_SPACE_INODE,$/;"	e	enum:__anon98c21faa0103
BTRFS_INODE_H	btrfs_inode.h	/^#define BTRFS_INODE_H$/;"	d
BTRFS_INODE_HAS_ASYNC_EXTENT	btrfs_inode.h	/^	BTRFS_INODE_HAS_ASYNC_EXTENT,$/;"	e	enum:__anon98c21faa0103
BTRFS_INODE_HAS_PROPS	btrfs_inode.h	/^	BTRFS_INODE_HAS_PROPS,$/;"	e	enum:__anon98c21faa0103
BTRFS_INODE_IN_DEFRAG	btrfs_inode.h	/^	BTRFS_INODE_IN_DEFRAG,$/;"	e	enum:__anon98c21faa0103
BTRFS_INODE_IN_DELALLOC_LIST	btrfs_inode.h	/^	BTRFS_INODE_IN_DELALLOC_LIST,$/;"	e	enum:__anon98c21faa0103
BTRFS_INODE_ITEM_H	inode-item.h	/^#define BTRFS_INODE_ITEM_H$/;"	d
BTRFS_INODE_NEEDS_FULL_SYNC	btrfs_inode.h	/^	BTRFS_INODE_NEEDS_FULL_SYNC,$/;"	e	enum:__anon98c21faa0103
BTRFS_INODE_NO_DELALLOC_FLUSH	btrfs_inode.h	/^	BTRFS_INODE_NO_DELALLOC_FLUSH,$/;"	e	enum:__anon98c21faa0103
BTRFS_INODE_NO_XATTRS	btrfs_inode.h	/^	BTRFS_INODE_NO_XATTRS,$/;"	e	enum:__anon98c21faa0103
BTRFS_INODE_SNAPSHOT_FLUSH	btrfs_inode.h	/^	BTRFS_INODE_SNAPSHOT_FLUSH,$/;"	e	enum:__anon98c21faa0103
BTRFS_INODE_VERITY_IN_PROGRESS	btrfs_inode.h	/^	BTRFS_INODE_VERITY_IN_PROGRESS,$/;"	e	enum:__anon98c21faa0103
BTRFS_IOCTL_H	ioctl.h	/^#define BTRFS_IOCTL_H$/;"	d
BTRFS_IOC_ENCODED_READ_32	ioctl.c	/^#define BTRFS_IOC_ENCODED_READ_32 /;"	d	file:
BTRFS_IOC_ENCODED_WRITE_32	ioctl.c	/^#define BTRFS_IOC_ENCODED_WRITE_32 /;"	d	file:
BTRFS_IOC_SEND_32	ioctl.c	/^#define BTRFS_IOC_SEND_32 /;"	d	file:
BTRFS_IOC_SET_RECEIVED_SUBVOL_32	ioctl.c	/^#define BTRFS_IOC_SET_RECEIVED_SUBVOL_32 /;"	d	file:
BTRFS_ITEM_SETGET_FUNCS	accessors.h	/^#define BTRFS_ITEM_SETGET_FUNCS(/;"	d
BTRFS_ITERATE_EXTENT_INODES_STOP	backref.h	/^#define BTRFS_ITERATE_EXTENT_INODES_STOP /;"	d
BTRFS_LEAF_DATA_SIZE	ctree.h	/^static inline u32 BTRFS_LEAF_DATA_SIZE(const struct btrfs_fs_info *info)$/;"	f	typeref:typename:u32
BTRFS_LOCKDEP_TRANS_COMMIT_PREP	locking.h	/^	BTRFS_LOCKDEP_TRANS_COMMIT_PREP,$/;"	e	enum:btrfs_lockdep_trans_states
BTRFS_LOCKDEP_TRANS_COMPLETED	locking.h	/^	BTRFS_LOCKDEP_TRANS_COMPLETED,$/;"	e	enum:btrfs_lockdep_trans_states
BTRFS_LOCKDEP_TRANS_SUPER_COMMITTED	locking.h	/^	BTRFS_LOCKDEP_TRANS_SUPER_COMMITTED,$/;"	e	enum:btrfs_lockdep_trans_states
BTRFS_LOCKDEP_TRANS_UNBLOCKED	locking.h	/^	BTRFS_LOCKDEP_TRANS_UNBLOCKED,$/;"	e	enum:btrfs_lockdep_trans_states
BTRFS_LOCKING_H	locking.h	/^#define BTRFS_LOCKING_H$/;"	d
BTRFS_LOG_FORCE_COMMIT	tree-log.h	/^#define BTRFS_LOG_FORCE_COMMIT	/;"	d
BTRFS_LRU_CACHE_H	lru_cache.h	/^#define BTRFS_LRU_CACHE_H$/;"	d
BTRFS_MAP_GET_READ_MIRRORS	volumes.h	/^	BTRFS_MAP_GET_READ_MIRRORS,$/;"	e	enum:btrfs_map_op
BTRFS_MAP_READ	volumes.h	/^	BTRFS_MAP_READ,$/;"	e	enum:btrfs_map_op
BTRFS_MAP_WRITE	volumes.h	/^	BTRFS_MAP_WRITE,$/;"	e	enum:btrfs_map_op
BTRFS_MAX_BIO_SECTORS	bio.h	/^#define BTRFS_MAX_BIO_SECTORS	/;"	d
BTRFS_MAX_COMPRESSED	compression.h	/^#define BTRFS_MAX_COMPRESSED	/;"	d
BTRFS_MAX_COMPRESSED_PAGES	compression.h	/^#define BTRFS_MAX_COMPRESSED_PAGES	/;"	d
BTRFS_MAX_DATA_CHUNK_SIZE	volumes.h	/^#define BTRFS_MAX_DATA_CHUNK_SIZE	/;"	d
BTRFS_MAX_DEDUPE_LEN	reflink.c	/^#define BTRFS_MAX_DEDUPE_LEN	/;"	d	file:
BTRFS_MAX_DEVS	volumes.h	/^#define BTRFS_MAX_DEVS(/;"	d
BTRFS_MAX_DEVS_SYS_CHUNK	volumes.h	/^#define BTRFS_MAX_DEVS_SYS_CHUNK /;"	d
BTRFS_MAX_EXTENT_ITEM_SIZE	fs.h	/^#define BTRFS_MAX_EXTENT_ITEM_SIZE(/;"	d
BTRFS_MAX_EXTENT_SIZE	fs.h	/^#define BTRFS_MAX_EXTENT_SIZE /;"	d
BTRFS_MAX_INLINE_DATA_SIZE	file-item.h	/^static inline u32 BTRFS_MAX_INLINE_DATA_SIZE(const struct btrfs_fs_info *info)$/;"	f	typeref:typename:u32
BTRFS_MAX_ITEM_SIZE	ctree.h	/^static inline u32 BTRFS_MAX_ITEM_SIZE(const struct btrfs_fs_info *info)$/;"	f	typeref:typename:u32
BTRFS_MAX_UNCOMPRESSED	compression.h	/^#define BTRFS_MAX_UNCOMPRESSED	/;"	d
BTRFS_MAX_XATTR_SIZE	ctree.h	/^static inline u32 BTRFS_MAX_XATTR_SIZE(const struct btrfs_fs_info *info)$/;"	f	typeref:typename:u32
BTRFS_MAX_ZONE_SIZE	zoned.c	/^#define BTRFS_MAX_ZONE_SIZE	/;"	d	file:
BTRFS_MESSAGES_H	messages.h	/^#define BTRFS_MESSAGES_H$/;"	d
BTRFS_MIN_ACTIVE_ZONES	zoned.c	/^#define BTRFS_MIN_ACTIVE_ZONES	/;"	d	file:
BTRFS_MIN_ZONE_SIZE	zoned.c	/^#define BTRFS_MIN_ZONE_SIZE	/;"	d	file:
BTRFS_MISC_H	misc.h	/^#define BTRFS_MISC_H$/;"	d
BTRFS_MOD_LOG_KEY_ADD	tree-mod-log.h	/^	BTRFS_MOD_LOG_KEY_ADD,$/;"	e	enum:btrfs_mod_log_op
BTRFS_MOD_LOG_KEY_REMOVE	tree-mod-log.h	/^	BTRFS_MOD_LOG_KEY_REMOVE,$/;"	e	enum:btrfs_mod_log_op
BTRFS_MOD_LOG_KEY_REMOVE_WHILE_FREEING	tree-mod-log.h	/^	BTRFS_MOD_LOG_KEY_REMOVE_WHILE_FREEING,$/;"	e	enum:btrfs_mod_log_op
BTRFS_MOD_LOG_KEY_REMOVE_WHILE_MOVING	tree-mod-log.h	/^	BTRFS_MOD_LOG_KEY_REMOVE_WHILE_MOVING,$/;"	e	enum:btrfs_mod_log_op
BTRFS_MOD_LOG_KEY_REPLACE	tree-mod-log.h	/^	BTRFS_MOD_LOG_KEY_REPLACE,$/;"	e	enum:btrfs_mod_log_op
BTRFS_MOD_LOG_MOVE_KEYS	tree-mod-log.h	/^	BTRFS_MOD_LOG_MOVE_KEYS,$/;"	e	enum:btrfs_mod_log_op
BTRFS_MOD_LOG_ROOT_REPLACE	tree-mod-log.h	/^	BTRFS_MOD_LOG_ROOT_REPLACE,$/;"	e	enum:btrfs_mod_log_op
BTRFS_MOUNT_AUTO_DEFRAG	fs.h	/^	BTRFS_MOUNT_AUTO_DEFRAG			= (1UL << 16),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_CHECK_INTEGRITY	fs.h	/^	BTRFS_MOUNT_CHECK_INTEGRITY		= (1UL << 19),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_CHECK_INTEGRITY_DATA	fs.h	/^	BTRFS_MOUNT_CHECK_INTEGRITY_DATA	= (1UL << 20),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_CLEAR_CACHE	fs.h	/^	BTRFS_MOUNT_CLEAR_CACHE			= (1UL << 13),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_COMPRESS	fs.h	/^	BTRFS_MOUNT_COMPRESS			= (1UL << 5),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_DEGRADED	fs.h	/^	BTRFS_MOUNT_DEGRADED			= (1UL << 4),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_DISCARD_ASYNC	fs.h	/^	BTRFS_MOUNT_DISCARD_ASYNC		= (1UL << 28),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_DISCARD_SYNC	fs.h	/^	BTRFS_MOUNT_DISCARD_SYNC		= (1UL << 10),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_ENOSPC_DEBUG	fs.h	/^	BTRFS_MOUNT_ENOSPC_DEBUG		= (1UL << 15),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_FLUSHONCOMMIT	fs.h	/^	BTRFS_MOUNT_FLUSHONCOMMIT		= (1UL << 7),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_FORCE_COMPRESS	fs.h	/^	BTRFS_MOUNT_FORCE_COMPRESS      	= (1UL << 11),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_FRAGMENT_DATA	fs.h	/^	BTRFS_MOUNT_FRAGMENT_DATA		= (1UL << 23),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_FRAGMENT_METADATA	fs.h	/^	BTRFS_MOUNT_FRAGMENT_METADATA		= (1UL << 24),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_FREE_SPACE_TREE	fs.h	/^	BTRFS_MOUNT_FREE_SPACE_TREE		= (1UL << 25),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_IGNOREBADROOTS	fs.h	/^	BTRFS_MOUNT_IGNOREBADROOTS		= (1UL << 29),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_IGNOREDATACSUMS	fs.h	/^	BTRFS_MOUNT_IGNOREDATACSUMS		= (1UL << 30),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_NOBARRIER	fs.h	/^	BTRFS_MOUNT_NOBARRIER			= (1UL << 2),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_NODATACOW	fs.h	/^	BTRFS_MOUNT_NODATACOW			= (1UL << 1),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_NODATASUM	fs.h	/^	BTRFS_MOUNT_NODATASUM			= (1UL << 0),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_NODISCARD	fs.h	/^	BTRFS_MOUNT_NODISCARD			= (1UL << 31),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_NOLOGREPLAY	fs.h	/^	BTRFS_MOUNT_NOLOGREPLAY			= (1UL << 26),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_NOSSD	fs.h	/^	BTRFS_MOUNT_NOSSD			= (1UL << 9),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_NOTREELOG	fs.h	/^	BTRFS_MOUNT_NOTREELOG   		= (1UL << 6),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_PANIC_ON_FATAL_ERROR	fs.h	/^	BTRFS_MOUNT_PANIC_ON_FATAL_ERROR	= (1UL << 21),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_REF_VERIFY	fs.h	/^	BTRFS_MOUNT_REF_VERIFY			= (1UL << 27),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_RESCAN_UUID_TREE	fs.h	/^	BTRFS_MOUNT_RESCAN_UUID_TREE		= (1UL << 22),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_SKIP_BALANCE	fs.h	/^	BTRFS_MOUNT_SKIP_BALANCE		= (1UL << 18),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_SPACE_CACHE	fs.h	/^	BTRFS_MOUNT_SPACE_CACHE			= (1UL << 12),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_SSD	fs.h	/^	BTRFS_MOUNT_SSD				= (1UL << 3),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_SSD_SPREAD	fs.h	/^	BTRFS_MOUNT_SSD_SPREAD			= (1UL << 8),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_USEBACKUPROOT	fs.h	/^	BTRFS_MOUNT_USEBACKUPROOT		= (1UL << 17),$/;"	e	enum:__anon7c96edb40303
BTRFS_MOUNT_USER_SUBVOL_RM_ALLOWED	fs.h	/^	BTRFS_MOUNT_USER_SUBVOL_RM_ALLOWED	= (1UL << 14),$/;"	e	enum:__anon7c96edb40303
BTRFS_NEED_TRUNCATE_BLOCK	inode-item.h	/^#define BTRFS_NEED_TRUNCATE_BLOCK	/;"	d
BTRFS_NESTING_COW	locking.h	/^	BTRFS_NESTING_COW,$/;"	e	enum:btrfs_lock_nesting
BTRFS_NESTING_LEFT	locking.h	/^	BTRFS_NESTING_LEFT,$/;"	e	enum:btrfs_lock_nesting
BTRFS_NESTING_LEFT_COW	locking.h	/^	BTRFS_NESTING_LEFT_COW,$/;"	e	enum:btrfs_lock_nesting
BTRFS_NESTING_MAX	locking.h	/^	BTRFS_NESTING_MAX,$/;"	e	enum:btrfs_lock_nesting
BTRFS_NESTING_NEW_ROOT	locking.h	/^	BTRFS_NESTING_NEW_ROOT,$/;"	e	enum:btrfs_lock_nesting
BTRFS_NESTING_NORMAL	locking.h	/^	BTRFS_NESTING_NORMAL,$/;"	e	enum:btrfs_lock_nesting
BTRFS_NESTING_RIGHT	locking.h	/^	BTRFS_NESTING_RIGHT,$/;"	e	enum:btrfs_lock_nesting
BTRFS_NESTING_RIGHT_COW	locking.h	/^	BTRFS_NESTING_RIGHT_COW,$/;"	e	enum:btrfs_lock_nesting
BTRFS_NESTING_SPLIT	locking.h	/^	BTRFS_NESTING_SPLIT,$/;"	e	enum:btrfs_lock_nesting
BTRFS_NODEPTRS_PER_BLOCK	ctree.h	/^static inline u32 BTRFS_NODEPTRS_PER_BLOCK(const struct btrfs_fs_info *info)$/;"	f	typeref:typename:u32
BTRFS_NO_LOG_SYNC	tree-log.h	/^#define BTRFS_NO_LOG_SYNC /;"	d
BTRFS_NR_COMPRESS_TYPES	compression.h	/^	BTRFS_NR_COMPRESS_TYPES = 4,$/;"	e	enum:btrfs_compression_type
BTRFS_NR_DISCARD_LISTS	fs.h	/^#define BTRFS_NR_DISCARD_LISTS	/;"	d
BTRFS_NR_RAID_TYPES	volumes.h	/^	BTRFS_NR_RAID_TYPES$/;"	e	enum:btrfs_raid_types
BTRFS_NR_READ_POLICY	volumes.h	/^	BTRFS_NR_READ_POLICY,$/;"	e	enum:btrfs_read_policy
BTRFS_NR_SB_LOG_ZONES	zoned.c	/^#define BTRFS_NR_SB_LOG_ZONES /;"	d	file:
BTRFS_NR_WORKSPACE_MANAGERS	compression.h	/^#define BTRFS_NR_WORKSPACE_MANAGERS	/;"	d
BTRFS_OLDEST_GENERATION	fs.h	/^#define BTRFS_OLDEST_GENERATION	/;"	d
BTRFS_ORDERED_COMPLETE	ordered-data.h	/^	BTRFS_ORDERED_COMPLETE,$/;"	e	enum:__anon5616a1270103
BTRFS_ORDERED_COMPRESSED	ordered-data.h	/^	BTRFS_ORDERED_COMPRESSED,$/;"	e	enum:__anon5616a1270103
BTRFS_ORDERED_DATA_H	ordered-data.h	/^#define BTRFS_ORDERED_DATA_H$/;"	d
BTRFS_ORDERED_DIRECT	ordered-data.h	/^	BTRFS_ORDERED_DIRECT,$/;"	e	enum:__anon5616a1270103
BTRFS_ORDERED_ENCODED	ordered-data.h	/^	BTRFS_ORDERED_ENCODED,$/;"	e	enum:__anon5616a1270103
BTRFS_ORDERED_IOERR	ordered-data.h	/^	BTRFS_ORDERED_IOERR,$/;"	e	enum:__anon5616a1270103
BTRFS_ORDERED_IO_DONE	ordered-data.h	/^	BTRFS_ORDERED_IO_DONE,$/;"	e	enum:__anon5616a1270103
BTRFS_ORDERED_LOGGED	ordered-data.h	/^	BTRFS_ORDERED_LOGGED,$/;"	e	enum:__anon5616a1270103
BTRFS_ORDERED_LOGGED_CSUM	ordered-data.h	/^	BTRFS_ORDERED_LOGGED_CSUM,$/;"	e	enum:__anon5616a1270103
BTRFS_ORDERED_NOCOW	ordered-data.h	/^	BTRFS_ORDERED_NOCOW,$/;"	e	enum:__anon5616a1270103
BTRFS_ORDERED_PENDING	ordered-data.h	/^	BTRFS_ORDERED_PENDING,$/;"	e	enum:__anon5616a1270103
BTRFS_ORDERED_PREALLOC	ordered-data.h	/^	BTRFS_ORDERED_PREALLOC,$/;"	e	enum:__anon5616a1270103
BTRFS_ORDERED_REGULAR	ordered-data.h	/^	BTRFS_ORDERED_REGULAR,$/;"	e	enum:__anon5616a1270103
BTRFS_ORDERED_TRUNCATED	ordered-data.h	/^	BTRFS_ORDERED_TRUNCATED,$/;"	e	enum:__anon5616a1270103
BTRFS_ORDERED_TYPE_FLAGS	ordered-data.h	/^#define BTRFS_ORDERED_TYPE_FLAGS /;"	d
BTRFS_ORPHAN_H	orphan.h	/^#define BTRFS_ORPHAN_H$/;"	d
BTRFS_PRINT_TREE_H	print-tree.h	/^#define BTRFS_PRINT_TREE_H$/;"	d
BTRFS_PROPS_H	props.h	/^#define BTRFS_PROPS_H$/;"	d
BTRFS_PROP_HANDLERS_HT_BITS	props.c	/^#define BTRFS_PROP_HANDLERS_HT_BITS /;"	d	file:
BTRFS_QGROUP_H	qgroup.h	/^#define BTRFS_QGROUP_H$/;"	d
BTRFS_QGROUP_RSV_DATA	qgroup.h	/^	BTRFS_QGROUP_RSV_DATA,$/;"	e	enum:btrfs_qgroup_rsv_type
BTRFS_QGROUP_RSV_LAST	qgroup.h	/^	BTRFS_QGROUP_RSV_LAST,$/;"	e	enum:btrfs_qgroup_rsv_type
BTRFS_QGROUP_RSV_META_PERTRANS	qgroup.h	/^	BTRFS_QGROUP_RSV_META_PERTRANS,$/;"	e	enum:btrfs_qgroup_rsv_type
BTRFS_QGROUP_RSV_META_PREALLOC	qgroup.h	/^	BTRFS_QGROUP_RSV_META_PREALLOC,$/;"	e	enum:btrfs_qgroup_rsv_type
BTRFS_QGROUP_RUNTIME_FLAG_CANCEL_RESCAN	qgroup.h	/^#define BTRFS_QGROUP_RUNTIME_FLAG_CANCEL_RESCAN	/;"	d
BTRFS_QGROUP_RUNTIME_FLAG_NO_ACCOUNTING	qgroup.h	/^#define BTRFS_QGROUP_RUNTIME_FLAG_NO_ACCOUNTING	/;"	d
BTRFS_RAID56_H	raid56.h	/^#define BTRFS_RAID56_H$/;"	d
BTRFS_RAID_DUP	volumes.h	/^	BTRFS_RAID_DUP	   = BTRFS_BG_FLAG_TO_INDEX(BTRFS_BLOCK_GROUP_DUP),$/;"	e	enum:btrfs_raid_types
BTRFS_RAID_RAID0	volumes.h	/^	BTRFS_RAID_RAID0   = BTRFS_BG_FLAG_TO_INDEX(BTRFS_BLOCK_GROUP_RAID0),$/;"	e	enum:btrfs_raid_types
BTRFS_RAID_RAID1	volumes.h	/^	BTRFS_RAID_RAID1   = BTRFS_BG_FLAG_TO_INDEX(BTRFS_BLOCK_GROUP_RAID1),$/;"	e	enum:btrfs_raid_types
BTRFS_RAID_RAID10	volumes.h	/^	BTRFS_RAID_RAID10  = BTRFS_BG_FLAG_TO_INDEX(BTRFS_BLOCK_GROUP_RAID10),$/;"	e	enum:btrfs_raid_types
BTRFS_RAID_RAID1C3	volumes.h	/^	BTRFS_RAID_RAID1C3 = BTRFS_BG_FLAG_TO_INDEX(BTRFS_BLOCK_GROUP_RAID1C3),$/;"	e	enum:btrfs_raid_types
BTRFS_RAID_RAID1C4	volumes.h	/^	BTRFS_RAID_RAID1C4 = BTRFS_BG_FLAG_TO_INDEX(BTRFS_BLOCK_GROUP_RAID1C4),$/;"	e	enum:btrfs_raid_types
BTRFS_RAID_RAID5	volumes.h	/^	BTRFS_RAID_RAID5   = BTRFS_BG_FLAG_TO_INDEX(BTRFS_BLOCK_GROUP_RAID5),$/;"	e	enum:btrfs_raid_types
BTRFS_RAID_RAID6	volumes.h	/^	BTRFS_RAID_RAID6   = BTRFS_BG_FLAG_TO_INDEX(BTRFS_BLOCK_GROUP_RAID6),$/;"	e	enum:btrfs_raid_types
BTRFS_RAID_SINGLE	volumes.h	/^	BTRFS_RAID_SINGLE  = 0,$/;"	e	enum:btrfs_raid_types
BTRFS_RBIO_PARITY_SCRUB	raid56.h	/^	BTRFS_RBIO_PARITY_SCRUB,$/;"	e	enum:btrfs_rbio_ops
BTRFS_RBIO_READ_REBUILD	raid56.h	/^	BTRFS_RBIO_READ_REBUILD,$/;"	e	enum:btrfs_rbio_ops
BTRFS_RBIO_WRITE	raid56.h	/^	BTRFS_RBIO_WRITE,$/;"	e	enum:btrfs_rbio_ops
BTRFS_RCU_STRING_H	rcu-string.h	/^#define BTRFS_RCU_STRING_H$/;"	d
BTRFS_READ_LOCK	locking.h	/^#define BTRFS_READ_LOCK /;"	d
BTRFS_READ_POLICY_PID	volumes.h	/^	BTRFS_READ_POLICY_PID,$/;"	e	enum:btrfs_read_policy
BTRFS_REFLINK_H	reflink.h	/^#define BTRFS_REFLINK_H$/;"	d
BTRFS_REF_DATA	delayed-ref.h	/^	BTRFS_REF_DATA,$/;"	e	enum:btrfs_ref_type
BTRFS_REF_LAST	delayed-ref.h	/^	BTRFS_REF_LAST,$/;"	e	enum:btrfs_ref_type
BTRFS_REF_METADATA	delayed-ref.h	/^	BTRFS_REF_METADATA,$/;"	e	enum:btrfs_ref_type
BTRFS_REF_NOT_SET	delayed-ref.h	/^	BTRFS_REF_NOT_SET,$/;"	e	enum:btrfs_ref_type
BTRFS_REF_TYPE_ANY	extent-tree.h	/^	BTRFS_REF_TYPE_ANY,$/;"	e	enum:btrfs_inline_ref_type
BTRFS_REF_TYPE_BLOCK	extent-tree.h	/^	BTRFS_REF_TYPE_BLOCK,$/;"	e	enum:btrfs_inline_ref_type
BTRFS_REF_TYPE_DATA	extent-tree.h	/^	BTRFS_REF_TYPE_DATA,$/;"	e	enum:btrfs_inline_ref_type
BTRFS_REF_TYPE_INVALID	extent-tree.h	/^	BTRFS_REF_TYPE_INVALID,$/;"	e	enum:btrfs_inline_ref_type
BTRFS_REF_VERIFY_H	ref-verify.h	/^#define BTRFS_REF_VERIFY_H$/;"	d
BTRFS_RELOCATION_H	relocation.h	/^#define BTRFS_RELOCATION_H$/;"	d
BTRFS_REPORT_NR_ZONES	zoned.c	/^#define BTRFS_REPORT_NR_ZONES /;"	d	file:
BTRFS_RESERVE_FLUSH_ALL	space-info.h	/^	BTRFS_RESERVE_FLUSH_ALL,$/;"	e	enum:btrfs_reserve_flush_enum
BTRFS_RESERVE_FLUSH_ALL_STEAL	space-info.h	/^	BTRFS_RESERVE_FLUSH_ALL_STEAL,$/;"	e	enum:btrfs_reserve_flush_enum
BTRFS_RESERVE_FLUSH_DATA	space-info.h	/^	BTRFS_RESERVE_FLUSH_DATA,$/;"	e	enum:btrfs_reserve_flush_enum
BTRFS_RESERVE_FLUSH_EMERGENCY	space-info.h	/^	BTRFS_RESERVE_FLUSH_EMERGENCY,$/;"	e	enum:btrfs_reserve_flush_enum
BTRFS_RESERVE_FLUSH_EVICT	space-info.h	/^	BTRFS_RESERVE_FLUSH_EVICT,$/;"	e	enum:btrfs_reserve_flush_enum
BTRFS_RESERVE_FLUSH_FREE_SPACE_INODE	space-info.h	/^	BTRFS_RESERVE_FLUSH_FREE_SPACE_INODE,$/;"	e	enum:btrfs_reserve_flush_enum
BTRFS_RESERVE_FLUSH_LIMIT	space-info.h	/^	BTRFS_RESERVE_FLUSH_LIMIT,$/;"	e	enum:btrfs_reserve_flush_enum
BTRFS_RESERVE_NO_FLUSH	space-info.h	/^	BTRFS_RESERVE_NO_FLUSH,$/;"	e	enum:btrfs_reserve_flush_enum
BTRFS_ROOT_DEAD_RELOC_TREE	ctree.h	/^	BTRFS_ROOT_DEAD_RELOC_TREE,$/;"	e	enum:__anondf6384ae0203
BTRFS_ROOT_DEAD_TREE	ctree.h	/^	BTRFS_ROOT_DEAD_TREE,$/;"	e	enum:__anondf6384ae0203
BTRFS_ROOT_DEFRAG_RUNNING	ctree.h	/^	BTRFS_ROOT_DEFRAG_RUNNING,$/;"	e	enum:__anondf6384ae0203
BTRFS_ROOT_DELETING	ctree.h	/^	BTRFS_ROOT_DELETING,$/;"	e	enum:__anondf6384ae0203
BTRFS_ROOT_DIRTY	ctree.h	/^	BTRFS_ROOT_DIRTY,$/;"	e	enum:__anondf6384ae0203
BTRFS_ROOT_FORCE_COW	ctree.h	/^	BTRFS_ROOT_FORCE_COW,$/;"	e	enum:__anondf6384ae0203
BTRFS_ROOT_HAS_LOG_TREE	ctree.h	/^	BTRFS_ROOT_HAS_LOG_TREE,$/;"	e	enum:__anondf6384ae0203
BTRFS_ROOT_IN_RADIX	ctree.h	/^	BTRFS_ROOT_IN_RADIX,$/;"	e	enum:__anondf6384ae0203
BTRFS_ROOT_IN_TRANS_SETUP	ctree.h	/^	BTRFS_ROOT_IN_TRANS_SETUP,$/;"	e	enum:__anondf6384ae0203
BTRFS_ROOT_MULTI_LOG_TASKS	ctree.h	/^	BTRFS_ROOT_MULTI_LOG_TASKS,$/;"	e	enum:__anondf6384ae0203
BTRFS_ROOT_NAME_BUF_LEN	print-tree.h	/^#define BTRFS_ROOT_NAME_BUF_LEN	/;"	d
BTRFS_ROOT_ORPHAN_CLEANUP	ctree.h	/^	BTRFS_ROOT_ORPHAN_CLEANUP,$/;"	e	enum:__anondf6384ae0203
BTRFS_ROOT_ORPHAN_ITEM_INSERTED	ctree.h	/^	BTRFS_ROOT_ORPHAN_ITEM_INSERTED,$/;"	e	enum:__anondf6384ae0203
BTRFS_ROOT_QGROUP_FLUSHING	ctree.h	/^	BTRFS_ROOT_QGROUP_FLUSHING,$/;"	e	enum:__anondf6384ae0203
BTRFS_ROOT_RESET_LOCKDEP_CLASS	ctree.h	/^	BTRFS_ROOT_RESET_LOCKDEP_CLASS,$/;"	e	enum:__anondf6384ae0203
BTRFS_ROOT_SHAREABLE	ctree.h	/^	BTRFS_ROOT_SHAREABLE,$/;"	e	enum:__anondf6384ae0203
BTRFS_ROOT_TRACK_DIRTY	ctree.h	/^	BTRFS_ROOT_TRACK_DIRTY,$/;"	e	enum:__anondf6384ae0203
BTRFS_ROOT_TRANS_TAG	transaction.c	/^#define BTRFS_ROOT_TRANS_TAG /;"	d	file:
BTRFS_ROOT_TREE_H	root-tree.h	/^#define BTRFS_ROOT_TREE_H$/;"	d
BTRFS_ROOT_UNFINISHED_DROP	ctree.h	/^	BTRFS_ROOT_UNFINISHED_DROP,$/;"	e	enum:__anondf6384ae0203
BTRFS_SB_LOG_FIRST_OFFSET	zoned.c	/^#define BTRFS_SB_LOG_FIRST_OFFSET	/;"	d	file:
BTRFS_SB_LOG_FIRST_SHIFT	zoned.c	/^#define BTRFS_SB_LOG_FIRST_SHIFT	/;"	d	file:
BTRFS_SB_LOG_PRIMARY_OFFSET	zoned.c	/^#define BTRFS_SB_LOG_PRIMARY_OFFSET	/;"	d	file:
BTRFS_SB_LOG_SECOND_OFFSET	zoned.c	/^#define BTRFS_SB_LOG_SECOND_OFFSET	/;"	d	file:
BTRFS_SB_LOG_SECOND_SHIFT	zoned.c	/^#define BTRFS_SB_LOG_SECOND_SHIFT	/;"	d	file:
BTRFS_SCRUB_H	scrub.h	/^#define BTRFS_SCRUB_H$/;"	d
BTRFS_SEND_A_ATIME	send.h	/^	BTRFS_SEND_A_ATIME		= 11,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_CLONE_CTRANSID	send.h	/^	BTRFS_SEND_A_CLONE_CTRANSID	= 21,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_CLONE_LEN	send.h	/^	BTRFS_SEND_A_CLONE_LEN		= 24,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_CLONE_OFFSET	send.h	/^	BTRFS_SEND_A_CLONE_OFFSET	= 23,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_CLONE_PATH	send.h	/^	BTRFS_SEND_A_CLONE_PATH		= 22,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_CLONE_UUID	send.h	/^	BTRFS_SEND_A_CLONE_UUID		= 20,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_COMPRESSION	send.h	/^	BTRFS_SEND_A_COMPRESSION	= 30,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_CTIME	send.h	/^	BTRFS_SEND_A_CTIME		= 9,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_CTRANSID	send.h	/^	BTRFS_SEND_A_CTRANSID		= 2,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_DATA	send.h	/^	BTRFS_SEND_A_DATA		= 19,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_ENCRYPTION	send.h	/^	BTRFS_SEND_A_ENCRYPTION		= 31,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_FALLOCATE_MODE	send.h	/^	BTRFS_SEND_A_FALLOCATE_MODE	= 25,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_FILEATTR	send.h	/^	BTRFS_SEND_A_FILEATTR		= 26,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_FILE_OFFSET	send.h	/^	BTRFS_SEND_A_FILE_OFFSET	= 18,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_GID	send.h	/^	BTRFS_SEND_A_GID		= 7,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_INO	send.h	/^	BTRFS_SEND_A_INO		= 3,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_MAX_V1	send.h	/^	BTRFS_SEND_A_MAX_V1		= 24,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_MAX_V2	send.h	/^	BTRFS_SEND_A_MAX_V2		= 31,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_MAX_V3	send.h	/^	BTRFS_SEND_A_MAX_V3		= 35,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_MODE	send.h	/^	BTRFS_SEND_A_MODE		= 5,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_MTIME	send.h	/^	BTRFS_SEND_A_MTIME		= 10,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_OTIME	send.h	/^	BTRFS_SEND_A_OTIME		= 12,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_PATH	send.h	/^	BTRFS_SEND_A_PATH		= 15,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_PATH_LINK	send.h	/^	BTRFS_SEND_A_PATH_LINK		= 17,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_PATH_TO	send.h	/^	BTRFS_SEND_A_PATH_TO		= 16,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_RDEV	send.h	/^	BTRFS_SEND_A_RDEV		= 8,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_SIZE	send.h	/^	BTRFS_SEND_A_SIZE		= 4,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_UID	send.h	/^	BTRFS_SEND_A_UID		= 6,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_UNENCODED_FILE_LEN	send.h	/^	BTRFS_SEND_A_UNENCODED_FILE_LEN	= 27,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_UNENCODED_LEN	send.h	/^	BTRFS_SEND_A_UNENCODED_LEN	= 28,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_UNENCODED_OFFSET	send.h	/^	BTRFS_SEND_A_UNENCODED_OFFSET	= 29,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_UNSPEC	send.h	/^	BTRFS_SEND_A_UNSPEC		= 0,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_UUID	send.h	/^	BTRFS_SEND_A_UUID		= 1,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_VERITY_ALGORITHM	send.h	/^	BTRFS_SEND_A_VERITY_ALGORITHM	= 32,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_VERITY_BLOCK_SIZE	send.h	/^	BTRFS_SEND_A_VERITY_BLOCK_SIZE	= 33,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_VERITY_SALT_DATA	send.h	/^	BTRFS_SEND_A_VERITY_SALT_DATA	= 34,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_VERITY_SIG_DATA	send.h	/^	BTRFS_SEND_A_VERITY_SIG_DATA	= 35,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_XATTR_DATA	send.h	/^	BTRFS_SEND_A_XATTR_DATA		= 14,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_A_XATTR_NAME	send.h	/^	BTRFS_SEND_A_XATTR_NAME		= 13,$/;"	e	enum:__anon1b81f1650103
BTRFS_SEND_BUF_SIZE_V1	send.h	/^#define BTRFS_SEND_BUF_SIZE_V1	/;"	d
BTRFS_SEND_BUF_SIZE_V2	send.h	/^#define BTRFS_SEND_BUF_SIZE_V2	/;"	d
BTRFS_SEND_C_CHMOD	send.h	/^	BTRFS_SEND_C_CHMOD		= 18,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_CHOWN	send.h	/^	BTRFS_SEND_C_CHOWN		= 19,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_CLONE	send.h	/^	BTRFS_SEND_C_CLONE		= 16,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_ENABLE_VERITY	send.h	/^	BTRFS_SEND_C_ENABLE_VERITY	= 26,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_ENCODED_WRITE	send.h	/^	BTRFS_SEND_C_ENCODED_WRITE	= 25,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_END	send.h	/^	BTRFS_SEND_C_END		= 21,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_FALLOCATE	send.h	/^	BTRFS_SEND_C_FALLOCATE		= 23,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_FILEATTR	send.h	/^	BTRFS_SEND_C_FILEATTR		= 24,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_LINK	send.h	/^	BTRFS_SEND_C_LINK		= 10,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_MAX	send.h	/^	BTRFS_SEND_C_MAX		= 26,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_MAX_V1	send.h	/^	BTRFS_SEND_C_MAX_V1		= 22,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_MAX_V2	send.h	/^	BTRFS_SEND_C_MAX_V2		= 25,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_MAX_V3	send.h	/^	BTRFS_SEND_C_MAX_V3		= 26,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_MKDIR	send.h	/^	BTRFS_SEND_C_MKDIR		= 4,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_MKFIFO	send.h	/^	BTRFS_SEND_C_MKFIFO		= 6,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_MKFILE	send.h	/^	BTRFS_SEND_C_MKFILE		= 3,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_MKNOD	send.h	/^	BTRFS_SEND_C_MKNOD		= 5,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_MKSOCK	send.h	/^	BTRFS_SEND_C_MKSOCK		= 7,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_REMOVE_XATTR	send.h	/^	BTRFS_SEND_C_REMOVE_XATTR	= 14,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_RENAME	send.h	/^	BTRFS_SEND_C_RENAME		= 9,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_RMDIR	send.h	/^	BTRFS_SEND_C_RMDIR		= 12,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_SET_XATTR	send.h	/^	BTRFS_SEND_C_SET_XATTR		= 13,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_SNAPSHOT	send.h	/^	BTRFS_SEND_C_SNAPSHOT		= 2,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_SUBVOL	send.h	/^	BTRFS_SEND_C_SUBVOL		= 1,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_SYMLINK	send.h	/^	BTRFS_SEND_C_SYMLINK		= 8,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_TRUNCATE	send.h	/^	BTRFS_SEND_C_TRUNCATE		= 17,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_UNLINK	send.h	/^	BTRFS_SEND_C_UNLINK		= 11,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_UNSPEC	send.h	/^	BTRFS_SEND_C_UNSPEC		= 0,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_UPDATE_EXTENT	send.h	/^	BTRFS_SEND_C_UPDATE_EXTENT	= 22,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_UTIMES	send.h	/^	BTRFS_SEND_C_UTIMES		= 20,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_WRITE	send.h	/^	BTRFS_SEND_C_WRITE		= 15,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_H	send.h	/^#define BTRFS_SEND_H$/;"	d
BTRFS_SEND_STREAM_MAGIC	send.h	/^#define BTRFS_SEND_STREAM_MAGIC /;"	d
BTRFS_SEND_STREAM_VERSION	send.h	/^#define BTRFS_SEND_STREAM_VERSION /;"	d
BTRFS_SEQ_LAST	tree-mod-log.h	/^#define BTRFS_SEQ_LAST /;"	d
BTRFS_SEQ_LIST_INIT	tree-mod-log.h	/^#define BTRFS_SEQ_LIST_INIT(/;"	d
BTRFS_SETGET_FUNCS	accessors.h	/^#define BTRFS_SETGET_FUNCS(/;"	d
BTRFS_SETGET_HEADER_FUNCS	accessors.h	/^#define BTRFS_SETGET_HEADER_FUNCS(/;"	d
BTRFS_SETGET_STACK_FUNCS	accessors.h	/^#define BTRFS_SETGET_STACK_FUNCS(/;"	d
BTRFS_SPACE_INFO_H	space-info.h	/^#define BTRFS_SPACE_INFO_H$/;"	d
BTRFS_STAT_CURR	free-space-cache.h	/^	BTRFS_STAT_CURR,$/;"	e	enum:__anon9c3ff8b70103
BTRFS_STAT_NR_ENTRIES	free-space-cache.h	/^	BTRFS_STAT_NR_ENTRIES,$/;"	e	enum:__anon9c3ff8b70103
BTRFS_STAT_PREV	free-space-cache.h	/^	BTRFS_STAT_PREV,$/;"	e	enum:__anon9c3ff8b70103
BTRFS_STRIPE_HASH_TABLE_BITS	raid56.c	/^#define BTRFS_STRIPE_HASH_TABLE_BITS	/;"	d	file:
BTRFS_STRIPE_LEN	volumes.h	/^#define BTRFS_STRIPE_LEN	/;"	d
BTRFS_STRIPE_LEN_MASK	volumes.h	/^#define BTRFS_STRIPE_LEN_MASK	/;"	d
BTRFS_STRIPE_LEN_SHIFT	volumes.h	/^#define BTRFS_STRIPE_LEN_SHIFT	/;"	d
BTRFS_SUBPAGE_DATA	subpage.h	/^	BTRFS_SUBPAGE_DATA,$/;"	e	enum:btrfs_subpage_type
BTRFS_SUBPAGE_H	subpage.h	/^#define BTRFS_SUBPAGE_H$/;"	d
BTRFS_SUBPAGE_METADATA	subpage.h	/^	BTRFS_SUBPAGE_METADATA,$/;"	e	enum:btrfs_subpage_type
BTRFS_SUPER_FLAG_SUPP	disk-io.c	/^#define BTRFS_SUPER_FLAG_SUPP	/;"	d	file:
BTRFS_SUPER_H	super.h	/^#define BTRFS_SUPER_H$/;"	d
BTRFS_SUPER_INFO_OFFSET	fs.h	/^#define BTRFS_SUPER_INFO_OFFSET	/;"	d
BTRFS_SUPER_INFO_OFFSET_1	fs.h	/^#define BTRFS_SUPER_INFO_OFFSET_1 /;"	d
BTRFS_SUPER_INFO_OFFSET_2	fs.h	/^#define BTRFS_SUPER_INFO_OFFSET_2 /;"	d
BTRFS_SUPER_INFO_SIZE	fs.h	/^#define BTRFS_SUPER_INFO_SIZE	/;"	d
BTRFS_SUPER_MIRROR_MAX	disk-io.h	/^#define BTRFS_SUPER_MIRROR_MAX	/;"	d
BTRFS_SUPER_MIRROR_SHIFT	disk-io.h	/^#define BTRFS_SUPER_MIRROR_SHIFT /;"	d
BTRFS_SYSFS_H	sysfs.h	/^#define BTRFS_SYSFS_H$/;"	d
BTRFS_TESTS_H	tests/btrfs-tests.h	/^#define BTRFS_TESTS_H$/;"	d
BTRFS_TLV_BINARY	send.h	/^	BTRFS_TLV_BINARY,$/;"	e	enum:btrfs_tlv_type
BTRFS_TLV_STRING	send.h	/^	BTRFS_TLV_STRING,$/;"	e	enum:btrfs_tlv_type
BTRFS_TLV_TIMESPEC	send.h	/^	BTRFS_TLV_TIMESPEC,$/;"	e	enum:btrfs_tlv_type
BTRFS_TLV_U16	send.h	/^	BTRFS_TLV_U16,$/;"	e	enum:btrfs_tlv_type
BTRFS_TLV_U32	send.h	/^	BTRFS_TLV_U32,$/;"	e	enum:btrfs_tlv_type
BTRFS_TLV_U64	send.h	/^	BTRFS_TLV_U64,$/;"	e	enum:btrfs_tlv_type
BTRFS_TLV_U8	send.h	/^	BTRFS_TLV_U8,$/;"	e	enum:btrfs_tlv_type
BTRFS_TLV_UUID	send.h	/^	BTRFS_TLV_UUID,$/;"	e	enum:btrfs_tlv_type
BTRFS_TRANSACTION_H	transaction.h	/^#define BTRFS_TRANSACTION_H$/;"	d
BTRFS_TRANS_CACHE_ENOSPC	transaction.h	/^#define BTRFS_TRANS_CACHE_ENOSPC	/;"	d
BTRFS_TRANS_DIRTY_BG_RUN	transaction.h	/^#define BTRFS_TRANS_DIRTY_BG_RUN	/;"	d
BTRFS_TRANS_HAVE_FREE_BGS	transaction.h	/^#define BTRFS_TRANS_HAVE_FREE_BGS	/;"	d
BTRFS_TREE_BLOCK_BAD_KEY_ORDER	tree-checker.h	/^	BTRFS_TREE_BLOCK_BAD_KEY_ORDER,$/;"	e	enum:btrfs_tree_block_status
BTRFS_TREE_BLOCK_CLEAN	tree-checker.h	/^	BTRFS_TREE_BLOCK_CLEAN,$/;"	e	enum:btrfs_tree_block_status
BTRFS_TREE_BLOCK_INVALID_BLOCKPTR	tree-checker.h	/^	BTRFS_TREE_BLOCK_INVALID_BLOCKPTR,$/;"	e	enum:btrfs_tree_block_status
BTRFS_TREE_BLOCK_INVALID_FREE_SPACE	tree-checker.h	/^	BTRFS_TREE_BLOCK_INVALID_FREE_SPACE,$/;"	e	enum:btrfs_tree_block_status
BTRFS_TREE_BLOCK_INVALID_ITEM	tree-checker.h	/^	BTRFS_TREE_BLOCK_INVALID_ITEM,$/;"	e	enum:btrfs_tree_block_status
BTRFS_TREE_BLOCK_INVALID_LEVEL	tree-checker.h	/^	BTRFS_TREE_BLOCK_INVALID_LEVEL,$/;"	e	enum:btrfs_tree_block_status
BTRFS_TREE_BLOCK_INVALID_NRITEMS	tree-checker.h	/^	BTRFS_TREE_BLOCK_INVALID_NRITEMS,$/;"	e	enum:btrfs_tree_block_status
BTRFS_TREE_BLOCK_INVALID_OFFSETS	tree-checker.h	/^	BTRFS_TREE_BLOCK_INVALID_OFFSETS,$/;"	e	enum:btrfs_tree_block_status
BTRFS_TREE_BLOCK_INVALID_OWNER	tree-checker.h	/^	BTRFS_TREE_BLOCK_INVALID_OWNER,$/;"	e	enum:btrfs_tree_block_status
BTRFS_TREE_BLOCK_INVALID_PARENT_KEY	tree-checker.h	/^	BTRFS_TREE_BLOCK_INVALID_PARENT_KEY,$/;"	e	enum:btrfs_tree_block_status
BTRFS_TREE_CHECKER_H	tree-checker.h	/^#define BTRFS_TREE_CHECKER_H$/;"	d
BTRFS_TREE_LOG_H	tree-log.h	/^#define BTRFS_TREE_LOG_H$/;"	d
BTRFS_TREE_MOD_LOG_H	tree-mod-log.h	/^#define BTRFS_TREE_MOD_LOG_H$/;"	d
BTRFS_TRIM_STATE_TRIMMED	free-space-cache.h	/^	BTRFS_TRIM_STATE_TRIMMED,$/;"	e	enum:btrfs_trim_state
BTRFS_TRIM_STATE_TRIMMING	free-space-cache.h	/^	BTRFS_TRIM_STATE_TRIMMING,$/;"	e	enum:btrfs_trim_state
BTRFS_TRIM_STATE_UNTRIMMED	free-space-cache.h	/^	BTRFS_TRIM_STATE_UNTRIMMED,$/;"	e	enum:btrfs_trim_state
BTRFS_ULIST_H	ulist.h	/^#define BTRFS_ULIST_H$/;"	d
BTRFS_UNLINK_METADATA_UNITS	fs.h	/^#define BTRFS_UNLINK_METADATA_UNITS	/;"	d
BTRFS_UPDATE_DELAYED_HEAD	delayed-ref.h	/^#define BTRFS_UPDATE_DELAYED_HEAD /;"	d
BTRFS_UUID_TREE_H	uuid-tree.h	/^#define BTRFS_UUID_TREE_H$/;"	d
BTRFS_VERITY_H	verity.h	/^#define BTRFS_VERITY_H$/;"	d
BTRFS_VOLUMES_H	volumes.h	/^#define BTRFS_VOLUMES_H$/;"	d
BTRFS_WRITE_LOCK	locking.h	/^#define BTRFS_WRITE_LOCK /;"	d
BTRFS_XATTR_H	xattr.h	/^#define BTRFS_XATTR_H$/;"	d
BTRFS_ZLIB_DEFAULT_LEVEL	compression.h	/^#define	BTRFS_ZLIB_DEFAULT_LEVEL	/;"	d
BTRFS_ZONED_H	zoned.h	/^#define BTRFS_ZONED_H$/;"	d
BUCKET_SIZE	compression.c	/^#define BUCKET_SIZE	/;"	d	file:
BYTE_CORE_SET_HIGH	compression.c	/^#define BYTE_CORE_SET_HIGH	/;"	d	file:
BYTE_CORE_SET_LOW	compression.c	/^#define BYTE_CORE_SET_LOW	/;"	d	file:
BYTE_MASK	extent_io.h	/^#define BYTE_MASK /;"	d
BYTE_SET_THRESHOLD	compression.c	/^#define BYTE_SET_THRESHOLD	/;"	d	file:
CACHING_CTL_WAKE_UP	block-group.h	/^#define CACHING_CTL_WAKE_UP /;"	d
CHECK_APPEND_1ARG	volumes.c	/^#define CHECK_APPEND_1ARG(/;"	d	file:
CHECK_APPEND_2ARG	volumes.c	/^#define CHECK_APPEND_2ARG(/;"	d	file:
CHECK_APPEND_NOARG	volumes.c	/^#define CHECK_APPEND_NOARG(/;"	d	file:
CHECK_FE_ALIGNED	tree-checker.c	/^#define CHECK_FE_ALIGNED(/;"	d	file:
CHUNK_ALLOCATED	extent-io-tree.h	/^#define CHUNK_ALLOCATED	/;"	d
CHUNK_ALLOC_FORCE	block-group.h	/^	CHUNK_ALLOC_FORCE,$/;"	e	enum:btrfs_chunk_alloc_enum
CHUNK_ALLOC_FORCE_FOR_EXTENT	block-group.h	/^	CHUNK_ALLOC_FORCE_FOR_EXTENT,$/;"	e	enum:btrfs_chunk_alloc_enum
CHUNK_ALLOC_LIMITED	block-group.h	/^	CHUNK_ALLOC_LIMITED,$/;"	e	enum:btrfs_chunk_alloc_enum
CHUNK_ALLOC_NO_FORCE	block-group.h	/^	CHUNK_ALLOC_NO_FORCE,$/;"	e	enum:btrfs_chunk_alloc_enum
CHUNK_STATE_MASK	extent-io-tree.h	/^#define CHUNK_STATE_MASK	/;"	d
CHUNK_TRIMMED	extent-io-tree.h	/^#define CHUNK_TRIMMED	/;"	d
CLUSTER_SIZE	defrag.c	/^#define CLUSTER_SIZE	/;"	d	file:
COMMIT_TRANS	space-info.c	/^	COMMIT_TRANS,$/;"	e	enum:data_flush_states	file:
COMMIT_TRANS	space-info.c	/^	COMMIT_TRANS,$/;"	e	enum:evict_flush_states	file:
COMMIT_TRANS	space-info.h	/^	COMMIT_TRANS		= 11,$/;"	e	enum:btrfs_flush_state
CONFIG_BTRFS_ASSERT	Kconfig	/^config BTRFS_ASSERT$/;"	c
CONFIG_BTRFS_DEBUG	Kconfig	/^config BTRFS_DEBUG$/;"	c
CONFIG_BTRFS_FS	Kconfig	/^config BTRFS_FS$/;"	c
CONFIG_BTRFS_FS_CHECK_INTEGRITY	Kconfig	/^config BTRFS_FS_CHECK_INTEGRITY$/;"	c
CONFIG_BTRFS_FS_POSIX_ACL	Kconfig	/^config BTRFS_FS_POSIX_ACL$/;"	c
CONFIG_BTRFS_FS_REF_VERIFY	Kconfig	/^config BTRFS_FS_REF_VERIFY$/;"	c
CONFIG_BTRFS_FS_RUN_SANITY_TESTS	Kconfig	/^config BTRFS_FS_RUN_SANITY_TESTS$/;"	c
CONFIG_CALCLOCK	calclock/calclock.h	/^#define CONFIG_CALCLOCK$/;"	d
COUNTERS_SIZE	compression.c	/^#define COUNTERS_SIZE	/;"	d	file:
CREATE_TRACE_POINTS	super.c	/^#define CREATE_TRACE_POINTS$/;"	d	file:
CSUM_FMT	btrfs_inode.h	/^#define CSUM_FMT	/;"	d
CSUM_FMT_VALUE	btrfs_inode.h	/^#define CSUM_FMT_VALUE(/;"	d
ClearPageOrdered	ctree.h	/^#define ClearPageOrdered(/;"	d
DECLARE_BTRFS_SETGET_BITS	accessors.h	/^#define DECLARE_BTRFS_SETGET_BITS(/;"	d
DECLARE_BTRFS_SUBPAGE_OPS	subpage.h	/^#define DECLARE_BTRFS_SUBPAGE_OPS(/;"	d
DECLARE_SPACE_INFO_UPDATE	space-info.h	/^#define DECLARE_SPACE_INFO_UPDATE(/;"	d
DEFINE_BTRFS_SETGET_BITS	accessors.c	/^#define DEFINE_BTRFS_SETGET_BITS(/;"	d	file:
DEFINE_LEVEL	locking.c	/^#define DEFINE_LEVEL(/;"	d	file:
DEFINE_NAME	locking.c	/^#define DEFINE_NAME(/;"	d	file:
DESCRIBE_FLAG	volumes.c	/^#define DESCRIBE_FLAG(/;"	d	file:
DFT_THRESHOLD	async-thread.c	/^#define DFT_THRESHOLD /;"	d	file:
DROP_REFERENCE	extent-tree.c	/^#define DROP_REFERENCE	/;"	d	file:
DUMP_BLOCK_RSV	space-info.c	/^#define DUMP_BLOCK_RSV(/;"	d	file:
ENTROPY_LVL_ACEPTABLE	compression.c	/^#define ENTROPY_LVL_ACEPTABLE	/;"	d	file:
ENTROPY_LVL_HIGH	compression.c	/^#define ENTROPY_LVL_HIGH	/;"	d	file:
ENUM_BIT	btrfs_inode.h	/^	ENUM_BIT(BTRFS_ILOCK_MMAP),$/;"	e	enum:btrfs_ilock_type
ENUM_BIT	btrfs_inode.h	/^	ENUM_BIT(BTRFS_ILOCK_SHARED),$/;"	e	enum:btrfs_ilock_type
ENUM_BIT	btrfs_inode.h	/^	ENUM_BIT(BTRFS_ILOCK_TRY),$/;"	e	enum:btrfs_ilock_type
ENUM_BIT	extent-io-tree.h	/^	ENUM_BIT(EXTENT_ADD_INODE_BYTES),$/;"	e	enum:__anon44b841950103
ENUM_BIT	extent-io-tree.h	/^	ENUM_BIT(EXTENT_BOUNDARY),$/;"	e	enum:__anon44b841950103
ENUM_BIT	extent-io-tree.h	/^	ENUM_BIT(EXTENT_CLEAR_ALL_BITS),$/;"	e	enum:__anon44b841950103
ENUM_BIT	extent-io-tree.h	/^	ENUM_BIT(EXTENT_CLEAR_DATA_RESV),$/;"	e	enum:__anon44b841950103
ENUM_BIT	extent-io-tree.h	/^	ENUM_BIT(EXTENT_CLEAR_META_RESV),$/;"	e	enum:__anon44b841950103
ENUM_BIT	extent-io-tree.h	/^	ENUM_BIT(EXTENT_DEFRAG),$/;"	e	enum:__anon44b841950103
ENUM_BIT	extent-io-tree.h	/^	ENUM_BIT(EXTENT_DELALLOC),$/;"	e	enum:__anon44b841950103
ENUM_BIT	extent-io-tree.h	/^	ENUM_BIT(EXTENT_DELALLOC_NEW),$/;"	e	enum:__anon44b841950103
ENUM_BIT	extent-io-tree.h	/^	ENUM_BIT(EXTENT_DIRTY),$/;"	e	enum:__anon44b841950103
ENUM_BIT	extent-io-tree.h	/^	ENUM_BIT(EXTENT_LOCKED),$/;"	e	enum:__anon44b841950103
ENUM_BIT	extent-io-tree.h	/^	ENUM_BIT(EXTENT_NEED_WAIT),$/;"	e	enum:__anon44b841950103
ENUM_BIT	extent-io-tree.h	/^	ENUM_BIT(EXTENT_NEW),$/;"	e	enum:__anon44b841950103
ENUM_BIT	extent-io-tree.h	/^	ENUM_BIT(EXTENT_NODATASUM),$/;"	e	enum:__anon44b841950103
ENUM_BIT	extent-io-tree.h	/^	ENUM_BIT(EXTENT_NORESERVE),$/;"	e	enum:__anon44b841950103
ENUM_BIT	extent-io-tree.h	/^	ENUM_BIT(EXTENT_NOWAIT)$/;"	e	enum:__anon44b841950103
ENUM_BIT	extent-io-tree.h	/^	ENUM_BIT(EXTENT_QGROUP_RESERVED),$/;"	e	enum:__anon44b841950103
ENUM_BIT	extent-io-tree.h	/^	ENUM_BIT(EXTENT_UPTODATE),$/;"	e	enum:__anon44b841950103
ENUM_BIT	extent_io.h	/^	ENUM_BIT(PAGE_END_WRITEBACK),$/;"	e	enum:__anon955c914a0203
ENUM_BIT	extent_io.h	/^	ENUM_BIT(PAGE_SET_ORDERED),$/;"	e	enum:__anon955c914a0203
ENUM_BIT	extent_io.h	/^	ENUM_BIT(PAGE_START_WRITEBACK),$/;"	e	enum:__anon955c914a0203
ENUM_BIT	extent_io.h	/^	ENUM_BIT(PAGE_UNLOCK),$/;"	e	enum:__anon955c914a0203
ENUM_BIT	misc.h	/^#define ENUM_BIT(/;"	d
ENUM_BIT	qgroup.h	/^	ENUM_BIT(QGROUP_FREE),$/;"	e	enum:__anoncf7775b90103
ENUM_BIT	qgroup.h	/^	ENUM_BIT(QGROUP_RELEASE),$/;"	e	enum:__anoncf7775b90103
ENUM_BIT	qgroup.h	/^	ENUM_BIT(QGROUP_RESERVE),$/;"	e	enum:__anoncf7775b90103
ENUM_BIT	transaction.h	/^	ENUM_BIT(__TRANS_ATTACH),$/;"	e	enum:__anon28f55c210103
ENUM_BIT	transaction.h	/^	ENUM_BIT(__TRANS_DUMMY),$/;"	e	enum:__anon28f55c210103
ENUM_BIT	transaction.h	/^	ENUM_BIT(__TRANS_FREEZABLE),$/;"	e	enum:__anon28f55c210103
ENUM_BIT	transaction.h	/^	ENUM_BIT(__TRANS_JOIN),$/;"	e	enum:__anon28f55c210103
ENUM_BIT	transaction.h	/^	ENUM_BIT(__TRANS_JOIN_NOLOCK),$/;"	e	enum:__anon28f55c210103
ENUM_BIT	transaction.h	/^	ENUM_BIT(__TRANS_JOIN_NOSTART),$/;"	e	enum:__anon28f55c210103
ENUM_BIT	transaction.h	/^	ENUM_BIT(__TRANS_START),$/;"	e	enum:__anon28f55c210103
EXPORT_FOR_TESTS	fs.h	/^#define EXPORT_FOR_TESTS /;"	d
EXPORT_FOR_TESTS	fs.h	/^#define EXPORT_FOR_TESTS$/;"	d
EXTENT_BUFFER_CORRUPT	extent_io.h	/^	EXTENT_BUFFER_CORRUPT,$/;"	e	enum:__anon955c914a0103
EXTENT_BUFFER_DIRTY	extent_io.h	/^	EXTENT_BUFFER_DIRTY,$/;"	e	enum:__anon955c914a0103
EXTENT_BUFFER_IN_TREE	extent_io.h	/^	EXTENT_BUFFER_IN_TREE,$/;"	e	enum:__anon955c914a0103
EXTENT_BUFFER_NO_CHECK	extent_io.h	/^	EXTENT_BUFFER_NO_CHECK,$/;"	e	enum:__anon955c914a0103
EXTENT_BUFFER_READAHEAD	extent_io.h	/^	EXTENT_BUFFER_READAHEAD,$/;"	e	enum:__anon955c914a0103
EXTENT_BUFFER_READING	extent_io.h	/^	EXTENT_BUFFER_READING,$/;"	e	enum:__anon955c914a0103
EXTENT_BUFFER_READ_ERR	extent_io.h	/^	EXTENT_BUFFER_READ_ERR,$/;"	e	enum:__anon955c914a0103
EXTENT_BUFFER_STALE	extent_io.h	/^	EXTENT_BUFFER_STALE,$/;"	e	enum:__anon955c914a0103
EXTENT_BUFFER_TREE_REF	extent_io.h	/^	EXTENT_BUFFER_TREE_REF,$/;"	e	enum:__anon955c914a0103
EXTENT_BUFFER_UNMAPPED	extent_io.h	/^	EXTENT_BUFFER_UNMAPPED,$/;"	e	enum:__anon955c914a0103
EXTENT_BUFFER_UPTODATE	extent_io.h	/^	EXTENT_BUFFER_UPTODATE,$/;"	e	enum:__anon955c914a0103
EXTENT_BUFFER_WRITEBACK	extent_io.h	/^	EXTENT_BUFFER_WRITEBACK,$/;"	e	enum:__anon955c914a0103
EXTENT_BUFFER_WRITE_ERR	extent_io.h	/^	EXTENT_BUFFER_WRITE_ERR,$/;"	e	enum:__anon955c914a0103
EXTENT_CTLBITS	extent-io-tree.h	/^#define EXTENT_CTLBITS	/;"	d
EXTENT_DO_ACCOUNTING	extent-io-tree.h	/^#define EXTENT_DO_ACCOUNTING /;"	d
EXTENT_FLAG_COMPRESSED	extent_map.h	/^	EXTENT_FLAG_COMPRESSED,$/;"	e	enum:__anon413080f00103
EXTENT_FLAG_FILLING	extent_map.h	/^	EXTENT_FLAG_FILLING,$/;"	e	enum:__anon413080f00103
EXTENT_FLAG_FS_MAPPING	extent_map.h	/^	EXTENT_FLAG_FS_MAPPING,$/;"	e	enum:__anon413080f00103
EXTENT_FLAG_LOGGING	extent_map.h	/^	EXTENT_FLAG_LOGGING,$/;"	e	enum:__anon413080f00103
EXTENT_FLAG_MERGED	extent_map.h	/^	EXTENT_FLAG_MERGED,$/;"	e	enum:__anon413080f00103
EXTENT_FLAG_PINNED	extent_map.h	/^	EXTENT_FLAG_PINNED,$/;"	e	enum:__anon413080f00103
EXTENT_FLAG_PREALLOC	extent_map.h	/^	EXTENT_FLAG_PREALLOC,$/;"	e	enum:__anon413080f00103
EXTENT_MAP_DELALLOC	extent_map.h	/^#define EXTENT_MAP_DELALLOC /;"	d
EXTENT_MAP_HOLE	extent_map.h	/^#define EXTENT_MAP_HOLE /;"	d
EXTENT_MAP_INLINE	extent_map.h	/^#define EXTENT_MAP_INLINE /;"	d
EXTENT_MAP_LAST_BYTE	extent_map.h	/^#define EXTENT_MAP_LAST_BYTE /;"	d
EXTENT_PAGE_PRIVATE	extent_io.h	/^#define EXTENT_PAGE_PRIVATE /;"	d
EXTENT_SIZE_PER_ITEM	space-info.c	/^#define EXTENT_SIZE_PER_ITEM	/;"	d	file:
FEAT_COMPAT	sysfs.h	/^	FEAT_COMPAT,$/;"	e	enum:btrfs_feature_set
FEAT_COMPAT_RO	sysfs.h	/^	FEAT_COMPAT_RO,$/;"	e	enum:btrfs_feature_set
FEAT_INCOMPAT	sysfs.h	/^	FEAT_INCOMPAT,$/;"	e	enum:btrfs_feature_set
FEAT_MAX	sysfs.h	/^	FEAT_MAX$/;"	e	enum:btrfs_feature_set
FLUSH_DELALLOC	space-info.c	/^	FLUSH_DELALLOC,$/;"	e	enum:evict_flush_states	file:
FLUSH_DELALLOC	space-info.h	/^	FLUSH_DELALLOC		= 5,$/;"	e	enum:btrfs_flush_state
FLUSH_DELALLOC_FULL	space-info.c	/^	FLUSH_DELALLOC_FULL,$/;"	e	enum:data_flush_states	file:
FLUSH_DELALLOC_FULL	space-info.c	/^	FLUSH_DELALLOC_FULL,$/;"	e	enum:evict_flush_states	file:
FLUSH_DELALLOC_FULL	space-info.h	/^	FLUSH_DELALLOC_FULL	= 7,$/;"	e	enum:btrfs_flush_state
FLUSH_DELALLOC_WAIT	space-info.c	/^	FLUSH_DELALLOC_WAIT,$/;"	e	enum:evict_flush_states	file:
FLUSH_DELALLOC_WAIT	space-info.h	/^	FLUSH_DELALLOC_WAIT	= 6,$/;"	e	enum:btrfs_flush_state
FLUSH_DELAYED_ITEMS	space-info.c	/^	FLUSH_DELAYED_ITEMS,$/;"	e	enum:evict_flush_states	file:
FLUSH_DELAYED_ITEMS	space-info.c	/^	FLUSH_DELAYED_ITEMS,$/;"	e	enum:priority_flush_states	file:
FLUSH_DELAYED_ITEMS	space-info.h	/^	FLUSH_DELAYED_ITEMS	= 2,$/;"	e	enum:btrfs_flush_state
FLUSH_DELAYED_ITEMS_NR	space-info.c	/^	FLUSH_DELAYED_ITEMS_NR,$/;"	e	enum:evict_flush_states	file:
FLUSH_DELAYED_ITEMS_NR	space-info.c	/^	FLUSH_DELAYED_ITEMS_NR,$/;"	e	enum:priority_flush_states	file:
FLUSH_DELAYED_ITEMS_NR	space-info.h	/^	FLUSH_DELAYED_ITEMS_NR	= 1,$/;"	e	enum:btrfs_flush_state
FLUSH_DELAYED_REFS	space-info.c	/^	FLUSH_DELAYED_REFS,$/;"	e	enum:evict_flush_states	file:
FLUSH_DELAYED_REFS	space-info.h	/^	FLUSH_DELAYED_REFS	= 4,$/;"	e	enum:btrfs_flush_state
FLUSH_DELAYED_REFS_NR	space-info.c	/^	FLUSH_DELAYED_REFS_NR,$/;"	e	enum:evict_flush_states	file:
FLUSH_DELAYED_REFS_NR	space-info.h	/^	FLUSH_DELAYED_REFS_NR	= 3,$/;"	e	enum:btrfs_flush_state
FORCE_EXTENT_THRESHOLD	free-space-cache.c	/^#define FORCE_EXTENT_THRESHOLD	/;"	d	file:
FS_PATH_INLINE_SIZE	send.c	/^#define FS_PATH_INLINE_SIZE /;"	d	file:
GANG_LOOKUP_SIZE	extent_io.c	/^#define GANG_LOOKUP_SIZE	/;"	d	file:
GET_SUBPAGE_BITMAP	subpage.c	/^#define GET_SUBPAGE_BITMAP(/;"	d	file:
IMPLEMENT_BTRFS_PAGE_OPS	subpage.c	/^#define IMPLEMENT_BTRFS_PAGE_OPS(/;"	d	file:
IMPLEMENT_BTRFS_SUBPAGE_TEST_OP	subpage.c	/^#define IMPLEMENT_BTRFS_SUBPAGE_TEST_OP(/;"	d	file:
INCLUDE_VERMAGIC	btrfs.mod.c	/^#define INCLUDE_VERMAGIC$/;"	d	file:
INIT_FEATURE_FLAGS	ioctl.c	/^#define INIT_FEATURE_FLAGS(/;"	d	file:
INLINE_EXTENT_BUFFER_PAGES	extent_io.h	/^#define INLINE_EXTENT_BUFFER_PAGES /;"	d
IO_TREE_BTREE_INODE_IO	extent-io-tree.h	/^	IO_TREE_BTREE_INODE_IO,$/;"	e	enum:__anon44b841950203
IO_TREE_DEVICE_ALLOC_STATE	extent-io-tree.h	/^	IO_TREE_DEVICE_ALLOC_STATE,$/;"	e	enum:__anon44b841950203
IO_TREE_FS_EXCLUDED_EXTENTS	extent-io-tree.h	/^	IO_TREE_FS_EXCLUDED_EXTENTS,$/;"	e	enum:__anon44b841950203
IO_TREE_FS_PINNED_EXTENTS	extent-io-tree.h	/^	IO_TREE_FS_PINNED_EXTENTS,$/;"	e	enum:__anon44b841950203
IO_TREE_INODE_FILE_EXTENT	extent-io-tree.h	/^	IO_TREE_INODE_FILE_EXTENT,$/;"	e	enum:__anon44b841950203
IO_TREE_INODE_IO	extent-io-tree.h	/^	IO_TREE_INODE_IO,$/;"	e	enum:__anon44b841950203
IO_TREE_LOG_CSUM_RANGE	extent-io-tree.h	/^	IO_TREE_LOG_CSUM_RANGE,$/;"	e	enum:__anon44b841950203
IO_TREE_RELOC_BLOCKS	extent-io-tree.h	/^	IO_TREE_RELOC_BLOCKS,$/;"	e	enum:__anon44b841950203
IO_TREE_ROOT_DIRTY_LOG_PAGES	extent-io-tree.h	/^	IO_TREE_ROOT_DIRTY_LOG_PAGES,$/;"	e	enum:__anon44b841950203
IO_TREE_SELFTEST	extent-io-tree.h	/^	IO_TREE_SELFTEST,$/;"	e	enum:__anon44b841950203
IO_TREE_TRANS_DIRTY_PAGES	extent-io-tree.h	/^	IO_TREE_TRANS_DIRTY_PAGES,$/;"	e	enum:__anon44b841950203
KDIR	Makefile	/^KDIR := \/lib\/modules\/$(shell uname -r)\/build$/;"	m
KTDEC	calclock/calclock.h	/^#define KTDEC(/;"	d
KTDEF	calclock/calclock.h	/^#define KTDEF(/;"	d
LINK_LOWER	backref.h	/^#define		LINK_LOWER	/;"	d
LINK_UPPER	backref.h	/^#define		LINK_UPPER	/;"	d
LOG_INODE_ALL	tree-log.c	/^	LOG_INODE_ALL,$/;"	e	enum:__anonef6dfed50103	file:
LOG_INODE_EXISTS	tree-log.c	/^	LOG_INODE_EXISTS,$/;"	e	enum:__anonef6dfed50103	file:
LOG_WALK_PIN_ONLY	tree-log.c	/^	LOG_WALK_PIN_ONLY,$/;"	e	enum:__anonef6dfed50203	file:
LOG_WALK_REPLAY_ALL	tree-log.c	/^	LOG_WALK_REPLAY_ALL,$/;"	e	enum:__anonef6dfed50203	file:
LOG_WALK_REPLAY_DIR_INDEX	tree-log.c	/^	LOG_WALK_REPLAY_DIR_INDEX,$/;"	e	enum:__anonef6dfed50203	file:
LOG_WALK_REPLAY_INODES	tree-log.c	/^	LOG_WALK_REPLAY_INODES,$/;"	e	enum:__anonef6dfed50203	file:
LOOP_ALLOC_CHUNK	extent-tree.c	/^	LOOP_ALLOC_CHUNK,$/;"	e	enum:btrfs_loop_type	file:
LOOP_CACHING_NOWAIT	extent-tree.c	/^	LOOP_CACHING_NOWAIT,$/;"	e	enum:btrfs_loop_type	file:
LOOP_CACHING_WAIT	extent-tree.c	/^	LOOP_CACHING_WAIT,$/;"	e	enum:btrfs_loop_type	file:
LOOP_NO_EMPTY_SIZE	extent-tree.c	/^	LOOP_NO_EMPTY_SIZE,$/;"	e	enum:btrfs_loop_type	file:
LOOP_UNSET_SIZE_CLASS	extent-tree.c	/^	LOOP_UNSET_SIZE_CLASS,$/;"	e	enum:btrfs_loop_type	file:
LOOP_WRONG_SIZE_CLASS	extent-tree.c	/^	LOOP_WRONG_SIZE_CLASS,$/;"	e	enum:btrfs_loop_type	file:
LOWER	backref.h	/^#define LOWER	/;"	d
LZO_LEN	lzo.c	/^#define LZO_LEN	/;"	d	file:
MAX_CACHE_BYTES_PER_GIG	free-space-cache.c	/^#define MAX_CACHE_BYTES_PER_GIG	/;"	d	file:
MAX_CONFLICT_INODES	tree-log.c	/^#define MAX_CONFLICT_INODES /;"	d	file:
MAX_CSUM_ITEMS	file-item.c	/^#define MAX_CSUM_ITEMS(/;"	d	file:
MAX_EXTENTS	relocation.c	/^#define MAX_EXTENTS /;"	d	file:
MAX_SAMPLE_SIZE	compression.c	/^#define MAX_SAMPLE_SIZE	/;"	d	file:
MAX_TRACE	ref-verify.c	/^#define MAX_TRACE	/;"	d	file:
MERKLE_START_ALIGN	verity.c	/^#define MERKLE_START_ALIGN	/;"	d	file:
MOVE_DATA_EXTENTS	relocation.c	/^#define MOVE_DATA_EXTENTS	/;"	d	file:
NO_THRESHOLD	async-thread.c	/^#define NO_THRESHOLD /;"	d	file:
NUM_FEATURE_BITS	sysfs.c	/^#define NUM_FEATURE_BITS /;"	d	file:
Opt_acl	super.c	/^	Opt_acl, Opt_noacl,$/;"	e	enum:__anonb1387fa50103	file:
Opt_barrier	super.c	/^	Opt_barrier, Opt_nobarrier,$/;"	e	enum:__anonb1387fa50103	file:
Opt_check_integrity	super.c	/^	Opt_check_integrity,$/;"	e	enum:__anonb1387fa50103	file:
Opt_check_integrity_including_extent_data	super.c	/^	Opt_check_integrity_including_extent_data,$/;"	e	enum:__anonb1387fa50103	file:
Opt_check_integrity_print_mask	super.c	/^	Opt_check_integrity_print_mask,$/;"	e	enum:__anonb1387fa50103	file:
Opt_clear_cache	super.c	/^	Opt_clear_cache,$/;"	e	enum:__anonb1387fa50103	file:
Opt_commit_interval	super.c	/^	Opt_commit_interval,$/;"	e	enum:__anonb1387fa50103	file:
Opt_compress	super.c	/^	Opt_compress,$/;"	e	enum:__anonb1387fa50103	file:
Opt_compress_force	super.c	/^	Opt_compress_force,$/;"	e	enum:__anonb1387fa50103	file:
Opt_compress_force_type	super.c	/^	Opt_compress_force_type,$/;"	e	enum:__anonb1387fa50103	file:
Opt_compress_type	super.c	/^	Opt_compress_type,$/;"	e	enum:__anonb1387fa50103	file:
Opt_datacow	super.c	/^	Opt_datacow, Opt_nodatacow,$/;"	e	enum:__anonb1387fa50103	file:
Opt_datasum	super.c	/^	Opt_datasum, Opt_nodatasum,$/;"	e	enum:__anonb1387fa50103	file:
Opt_defrag	super.c	/^	Opt_defrag, Opt_nodefrag,$/;"	e	enum:__anonb1387fa50103	file:
Opt_degraded	super.c	/^	Opt_degraded,$/;"	e	enum:__anonb1387fa50103	file:
Opt_device	super.c	/^	Opt_device,$/;"	e	enum:__anonb1387fa50103	file:
Opt_discard	super.c	/^	Opt_discard, Opt_nodiscard,$/;"	e	enum:__anonb1387fa50103	file:
Opt_discard_mode	super.c	/^	Opt_discard_mode,$/;"	e	enum:__anonb1387fa50103	file:
Opt_enospc_debug	super.c	/^	Opt_enospc_debug, Opt_noenospc_debug,$/;"	e	enum:__anonb1387fa50103	file:
Opt_err	super.c	/^	Opt_err,$/;"	e	enum:__anonb1387fa50103	file:
Opt_fatal_errors	super.c	/^	Opt_fatal_errors,$/;"	e	enum:__anonb1387fa50103	file:
Opt_flushoncommit	super.c	/^	Opt_flushoncommit, Opt_noflushoncommit,$/;"	e	enum:__anonb1387fa50103	file:
Opt_fragment_all	super.c	/^	Opt_fragment_data, Opt_fragment_metadata, Opt_fragment_all,$/;"	e	enum:__anonb1387fa50103	file:
Opt_fragment_data	super.c	/^	Opt_fragment_data, Opt_fragment_metadata, Opt_fragment_all,$/;"	e	enum:__anonb1387fa50103	file:
Opt_fragment_metadata	super.c	/^	Opt_fragment_data, Opt_fragment_metadata, Opt_fragment_all,$/;"	e	enum:__anonb1387fa50103	file:
Opt_ignorebadroots	super.c	/^	Opt_ignorebadroots,$/;"	e	enum:__anonb1387fa50103	file:
Opt_ignoredatacsums	super.c	/^	Opt_ignoredatacsums,$/;"	e	enum:__anonb1387fa50103	file:
Opt_inode_cache	super.c	/^	Opt_inode_cache, Opt_noinode_cache,$/;"	e	enum:__anonb1387fa50103	file:
Opt_max_inline	super.c	/^	Opt_max_inline,$/;"	e	enum:__anonb1387fa50103	file:
Opt_no_space_cache	super.c	/^	Opt_space_cache, Opt_no_space_cache,$/;"	e	enum:__anonb1387fa50103	file:
Opt_noacl	super.c	/^	Opt_acl, Opt_noacl,$/;"	e	enum:__anonb1387fa50103	file:
Opt_nobarrier	super.c	/^	Opt_barrier, Opt_nobarrier,$/;"	e	enum:__anonb1387fa50103	file:
Opt_nodatacow	super.c	/^	Opt_datacow, Opt_nodatacow,$/;"	e	enum:__anonb1387fa50103	file:
Opt_nodatasum	super.c	/^	Opt_datasum, Opt_nodatasum,$/;"	e	enum:__anonb1387fa50103	file:
Opt_nodefrag	super.c	/^	Opt_defrag, Opt_nodefrag,$/;"	e	enum:__anonb1387fa50103	file:
Opt_nodiscard	super.c	/^	Opt_discard, Opt_nodiscard,$/;"	e	enum:__anonb1387fa50103	file:
Opt_noenospc_debug	super.c	/^	Opt_enospc_debug, Opt_noenospc_debug,$/;"	e	enum:__anonb1387fa50103	file:
Opt_noflushoncommit	super.c	/^	Opt_flushoncommit, Opt_noflushoncommit,$/;"	e	enum:__anonb1387fa50103	file:
Opt_noinode_cache	super.c	/^	Opt_inode_cache, Opt_noinode_cache,$/;"	e	enum:__anonb1387fa50103	file:
Opt_nologreplay	super.c	/^	Opt_nologreplay,$/;"	e	enum:__anonb1387fa50103	file:
Opt_norecovery	super.c	/^	Opt_norecovery,$/;"	e	enum:__anonb1387fa50103	file:
Opt_nossd	super.c	/^	Opt_ssd, Opt_nossd,$/;"	e	enum:__anonb1387fa50103	file:
Opt_nossd_spread	super.c	/^	Opt_ssd_spread, Opt_nossd_spread,$/;"	e	enum:__anonb1387fa50103	file:
Opt_notreelog	super.c	/^	Opt_treelog, Opt_notreelog,$/;"	e	enum:__anonb1387fa50103	file:
Opt_ratio	super.c	/^	Opt_ratio,$/;"	e	enum:__anonb1387fa50103	file:
Opt_recovery	super.c	/^	Opt_recovery,$/;"	e	enum:__anonb1387fa50103	file:
Opt_ref_verify	super.c	/^	Opt_ref_verify,$/;"	e	enum:__anonb1387fa50103	file:
Opt_rescan_uuid_tree	super.c	/^	Opt_rescan_uuid_tree,$/;"	e	enum:__anonb1387fa50103	file:
Opt_rescue	super.c	/^	Opt_rescue,$/;"	e	enum:__anonb1387fa50103	file:
Opt_rescue_all	super.c	/^	Opt_rescue_all,$/;"	e	enum:__anonb1387fa50103	file:
Opt_skip_balance	super.c	/^	Opt_skip_balance,$/;"	e	enum:__anonb1387fa50103	file:
Opt_space_cache	super.c	/^	Opt_space_cache, Opt_no_space_cache,$/;"	e	enum:__anonb1387fa50103	file:
Opt_space_cache_version	super.c	/^	Opt_space_cache_version,$/;"	e	enum:__anonb1387fa50103	file:
Opt_ssd	super.c	/^	Opt_ssd, Opt_nossd,$/;"	e	enum:__anonb1387fa50103	file:
Opt_ssd_spread	super.c	/^	Opt_ssd_spread, Opt_nossd_spread,$/;"	e	enum:__anonb1387fa50103	file:
Opt_subvol	super.c	/^	Opt_subvol,$/;"	e	enum:__anonb1387fa50103	file:
Opt_subvol_empty	super.c	/^	Opt_subvol_empty,$/;"	e	enum:__anonb1387fa50103	file:
Opt_subvolid	super.c	/^	Opt_subvolid,$/;"	e	enum:__anonb1387fa50103	file:
Opt_thread_pool	super.c	/^	Opt_thread_pool,$/;"	e	enum:__anonb1387fa50103	file:
Opt_treelog	super.c	/^	Opt_treelog, Opt_notreelog,$/;"	e	enum:__anonb1387fa50103	file:
Opt_usebackuproot	super.c	/^	Opt_usebackuproot,$/;"	e	enum:__anonb1387fa50103	file:
Opt_user_subvol_rm_allowed	super.c	/^	Opt_user_subvol_rm_allowed,$/;"	e	enum:__anonb1387fa50103	file:
PREFTREE_INIT	backref.c	/^#define PREFTREE_INIT	/;"	d	file:
PRINT_ONE_FLAG	tests/extent-io-tests.c	/^#define PRINT_ONE_FLAG(/;"	d	file:
PROCESS_RELEASE	tests/extent-io-tests.c	/^#define PROCESS_RELEASE	/;"	d	file:
PROCESS_TEST_LOCKED	tests/extent-io-tests.c	/^#define PROCESS_TEST_LOCKED	/;"	d	file:
PROCESS_UNLOCK	tests/extent-io-tests.c	/^#define PROCESS_UNLOCK	/;"	d	file:
PWD	Makefile	/^PWD := $(shell pwd)$/;"	m
PageOrdered	ctree.h	/^#define PageOrdered(/;"	d
Per-CPU Calclock	calclock/README.md	/^Per-CPU Calclock$/;"	c
QGROUP_ATTR	sysfs.c	/^#define QGROUP_ATTR(/;"	d	file:
QGROUP_RSV_ATTR	sysfs.c	/^#define QGROUP_RSV_ATTR(/;"	d	file:
RADIX_BASE	compression.c	/^#define RADIX_BASE	/;"	d	file:
RAID5_P_STRIPE	raid56.h	/^#define RAID5_P_STRIPE /;"	d
RAID6_Q_STRIPE	raid56.h	/^#define RAID6_Q_STRIPE /;"	d
RANGE_BOUNDARY_HOLE	file.c	/^	RANGE_BOUNDARY_HOLE,$/;"	e	enum:__anonfd762eb60103	file:
RANGE_BOUNDARY_PREALLOC_EXTENT	file.c	/^	RANGE_BOUNDARY_PREALLOC_EXTENT,$/;"	e	enum:__anonfd762eb60103	file:
RANGE_BOUNDARY_WRITTEN_EXTENT	file.c	/^	RANGE_BOUNDARY_WRITTEN_EXTENT,$/;"	e	enum:__anonfd762eb60103	file:
RBIO_CACHE_BIT	raid56.c	/^#define RBIO_CACHE_BIT	/;"	d	file:
RBIO_CACHE_READY_BIT	raid56.c	/^#define RBIO_CACHE_READY_BIT	/;"	d	file:
RBIO_CACHE_SIZE	raid56.c	/^#define RBIO_CACHE_SIZE /;"	d	file:
RBIO_RMW_LOCKED_BIT	raid56.c	/^#define RBIO_RMW_LOCKED_BIT	/;"	d	file:
READA_BACK	ctree.h	/^	READA_BACK,$/;"	e	enum:__anondf6384ae0103
READA_FORWARD	ctree.h	/^	READA_FORWARD,$/;"	e	enum:__anondf6384ae0103
READA_FORWARD_ALWAYS	ctree.h	/^	READA_FORWARD_ALWAYS,$/;"	e	enum:__anondf6384ae0103
READA_NONE	ctree.h	/^	READA_NONE,$/;"	e	enum:__anondf6384ae0103
RELOCATION_RESERVED_NODES	relocation.c	/^#define RELOCATION_RESERVED_NODES	/;"	d	file:
REQ_BTRFS_CGROUP_PUNT	bio.h	/^#define REQ_BTRFS_CGROUP_PUNT	/;"	d
RUN_DELAYED_IPUTS	space-info.c	/^	RUN_DELAYED_IPUTS,$/;"	e	enum:data_flush_states	file:
RUN_DELAYED_IPUTS	space-info.h	/^	RUN_DELAYED_IPUTS	= 10,$/;"	e	enum:btrfs_flush_state
SAMPLING_INTERVAL	compression.c	/^#define SAMPLING_INTERVAL	/;"	d	file:
SAMPLING_READ_SIZE	compression.c	/^#define SAMPLING_READ_SIZE	/;"	d	file:
SCRUB_GROUPS_PER_SCTX	scrub.c	/^#define SCRUB_GROUPS_PER_SCTX	/;"	d	file:
SCRUB_MAX_SECTORS_PER_BLOCK	scrub.c	/^#define SCRUB_MAX_SECTORS_PER_BLOCK	/;"	d	file:
SCRUB_STRIPES_PER_GROUP	scrub.c	/^#define SCRUB_STRIPES_PER_GROUP	/;"	d	file:
SCRUB_STRIPE_FLAG_INITIALIZED	scrub.c	/^	SCRUB_STRIPE_FLAG_INITIALIZED,$/;"	e	enum:scrub_stripe_flags	file:
SCRUB_STRIPE_FLAG_NO_REPORT	scrub.c	/^	SCRUB_STRIPE_FLAG_NO_REPORT,$/;"	e	enum:scrub_stripe_flags	file:
SCRUB_STRIPE_FLAG_REPAIR_DONE	scrub.c	/^	SCRUB_STRIPE_FLAG_REPAIR_DONE,$/;"	e	enum:scrub_stripe_flags	file:
SCRUB_STRIPE_PAGES	scrub.c	/^#define SCRUB_STRIPE_PAGES	/;"	d	file:
SCRUB_TOTAL_STRIPES	scrub.c	/^#define SCRUB_TOTAL_STRIPES	/;"	d	file:
SEND_MAX_BACKREF_CACHE_ROOTS	send.c	/^#define SEND_MAX_BACKREF_CACHE_ROOTS	/;"	d	file:
SEND_MAX_BACKREF_CACHE_SIZE	send.c	/^#define SEND_MAX_BACKREF_CACHE_SIZE /;"	d	file:
SEND_MAX_DIR_CREATED_CACHE_SIZE	send.c	/^#define SEND_MAX_DIR_CREATED_CACHE_SIZE	/;"	d	file:
SEND_MAX_DIR_UTIMES_CACHE_SIZE	send.c	/^#define SEND_MAX_DIR_UTIMES_CACHE_SIZE	/;"	d	file:
SEND_MAX_EXTENT_REFS	send.c	/^#define SEND_MAX_EXTENT_REFS	/;"	d	file:
SEND_MAX_NAME_CACHE_SIZE	send.c	/^#define SEND_MAX_NAME_CACHE_SIZE	/;"	d	file:
SPACE_INFO_ATTR	sysfs.c	/^#define SPACE_INFO_ATTR(/;"	d	file:
STATE_FLAG_STR_LEN	tests/extent-io-tests.c	/^#define STATE_FLAG_STR_LEN	/;"	d	file:
STATE_STRING_BUF_LEN	messages.c	/^#define STATE_STRING_BUF_LEN	/;"	d	file:
STATE_STRING_PREFACE	messages.c	/^#define STATE_STRING_PREFACE	/;"	d	file:
SUPER_INFO_SECTORS	zoned.c	/^#define SUPER_INFO_SECTORS	/;"	d	file:
SetPageOrdered	ctree.h	/^#define SetPageOrdered(/;"	d
TEST_ALLOC_BLOCK_GROUP	tests/btrfs-tests.h	/^	TEST_ALLOC_BLOCK_GROUP,$/;"	e	enum:__anon401904de0103
TEST_ALLOC_EXTENT_BUFFER	tests/btrfs-tests.h	/^	TEST_ALLOC_EXTENT_BUFFER,$/;"	e	enum:__anon401904de0103
TEST_ALLOC_EXTENT_MAP	tests/btrfs-tests.h	/^	TEST_ALLOC_EXTENT_MAP,$/;"	e	enum:__anon401904de0103
TEST_ALLOC_FS_INFO	tests/btrfs-tests.h	/^	TEST_ALLOC_FS_INFO,$/;"	e	enum:__anon401904de0103
TEST_ALLOC_INODE	tests/btrfs-tests.h	/^	TEST_ALLOC_INODE,$/;"	e	enum:__anon401904de0103
TEST_ALLOC_PATH	tests/btrfs-tests.h	/^	TEST_ALLOC_PATH,$/;"	e	enum:__anon401904de0103
TEST_ALLOC_ROOT	tests/btrfs-tests.h	/^	TEST_ALLOC_ROOT,$/;"	e	enum:__anon401904de0103
TLV_PUT	send.c	/^#define TLV_PUT(/;"	d	file:
TLV_PUT_BTRFS_TIMESPEC	send.c	/^#define TLV_PUT_BTRFS_TIMESPEC(/;"	d	file:
TLV_PUT_DEFINE_INT	send.c	/^#define TLV_PUT_DEFINE_INT(/;"	d	file:
TLV_PUT_INT	send.c	/^#define TLV_PUT_INT(/;"	d	file:
TLV_PUT_PATH	send.c	/^#define TLV_PUT_PATH(/;"	d	file:
TLV_PUT_STRING	send.c	/^#define TLV_PUT_STRING(/;"	d	file:
TLV_PUT_U16	send.c	/^#define TLV_PUT_U16(/;"	d	file:
TLV_PUT_U32	send.c	/^#define TLV_PUT_U32(/;"	d	file:
TLV_PUT_U64	send.c	/^#define TLV_PUT_U64(/;"	d	file:
TLV_PUT_U8	send.c	/^#define TLV_PUT_U8(/;"	d	file:
TLV_PUT_UUID	send.c	/^#define TLV_PUT_UUID(/;"	d	file:
TRANS_ABORTED	transaction.h	/^#define TRANS_ABORTED(/;"	d
TRANS_ATTACH	transaction.h	/^#define TRANS_ATTACH	/;"	d
TRANS_EXTWRITERS	transaction.h	/^#define TRANS_EXTWRITERS	/;"	d
TRANS_JOIN	transaction.h	/^#define TRANS_JOIN	/;"	d
TRANS_JOIN_NOLOCK	transaction.h	/^#define TRANS_JOIN_NOLOCK	/;"	d
TRANS_JOIN_NOSTART	transaction.h	/^#define TRANS_JOIN_NOSTART	/;"	d
TRANS_START	transaction.h	/^#define TRANS_START	/;"	d
TRANS_STATE_COMMIT_DOING	transaction.h	/^	TRANS_STATE_COMMIT_DOING,$/;"	e	enum:btrfs_trans_state
TRANS_STATE_COMMIT_PREP	transaction.h	/^	TRANS_STATE_COMMIT_PREP,$/;"	e	enum:btrfs_trans_state
TRANS_STATE_COMMIT_START	transaction.h	/^	TRANS_STATE_COMMIT_START,$/;"	e	enum:btrfs_trans_state
TRANS_STATE_COMPLETED	transaction.h	/^	TRANS_STATE_COMPLETED,$/;"	e	enum:btrfs_trans_state
TRANS_STATE_MAX	transaction.h	/^	TRANS_STATE_MAX,$/;"	e	enum:btrfs_trans_state
TRANS_STATE_RUNNING	transaction.h	/^	TRANS_STATE_RUNNING,$/;"	e	enum:btrfs_trans_state
TRANS_STATE_SUPER_COMMITTED	transaction.h	/^	TRANS_STATE_SUPER_COMMITTED,$/;"	e	enum:btrfs_trans_state
TRANS_STATE_UNBLOCKED	transaction.h	/^	TRANS_STATE_UNBLOCKED,$/;"	e	enum:btrfs_trans_state
To enable calclock, define `CONFIG_CALCLOCK` when including calclock.h:	calclock/README.md	/^### To enable calclock, define `CONFIG_CALCLOCK` when including calclock.h:$/;"	S	section:Per-CPU Calclock""Usage
ULIST_ITER_INIT	ulist.h	/^#define ULIST_ITER_INIT(/;"	d
UPDATE_BACKREF	extent-tree.c	/^#define UPDATE_BACKREF	/;"	d	file:
UPDATE_DATA_PTRS	relocation.c	/^#define UPDATE_DATA_PTRS	/;"	d	file:
UPDATE_NEW	qgroup.c	/^#define UPDATE_NEW	/;"	d	file:
UPDATE_OLD	qgroup.c	/^#define UPDATE_OLD	/;"	d	file:
UPPER	backref.h	/^#define UPPER	/;"	d
Usage	calclock/README.md	/^## Usage$/;"	s	chapter:Per-CPU Calclock
WAIT_COMPLETE	extent_io.h	/^#define WAIT_COMPLETE	/;"	d
WAIT_NONE	extent_io.h	/^#define WAIT_NONE	/;"	d
WAIT_PAGE_LOCK	extent_io.h	/^#define WAIT_PAGE_LOCK	/;"	d
WORKSPACE_BUF_LENGTH	lzo.c	/^#define WORKSPACE_BUF_LENGTH	/;"	d	file:
WORKSPACE_CBUF_LENGTH	lzo.c	/^#define WORKSPACE_CBUF_LENGTH	/;"	d	file:
WORK_DONE_BIT	async-thread.c	/^	WORK_DONE_BIT,$/;"	e	enum:__anon0703ddd90103	file:
WORK_ORDER_DONE_BIT	async-thread.c	/^	WORK_ORDER_DONE_BIT,$/;"	e	enum:__anon0703ddd90103	file:
WP_CONVENTIONAL	zoned.c	/^#define WP_CONVENTIONAL /;"	d	file:
WP_MISSING_DEV	zoned.c	/^#define WP_MISSING_DEV /;"	d	file:
ZLIB_DFLTCC_BUF_SIZE	zlib.c	/^#define ZLIB_DFLTCC_BUF_SIZE /;"	d	file:
ZSTD_BTRFS_DEFAULT_LEVEL	zstd.c	/^#define ZSTD_BTRFS_DEFAULT_LEVEL /;"	d	file:
ZSTD_BTRFS_MAX_INPUT	zstd.c	/^#define ZSTD_BTRFS_MAX_INPUT /;"	d	file:
ZSTD_BTRFS_MAX_LEVEL	zstd.c	/^#define ZSTD_BTRFS_MAX_LEVEL /;"	d	file:
ZSTD_BTRFS_MAX_WINDOWLOG	zstd.c	/^#define ZSTD_BTRFS_MAX_WINDOWLOG /;"	d	file:
ZSTD_BTRFS_RECLAIM_JIFFIES	zstd.c	/^#define ZSTD_BTRFS_RECLAIM_JIFFIES /;"	d	file:
__BTRFS_NEED_DEVICE_DATA_ORDERED	volumes.h	/^#define __BTRFS_NEED_DEVICE_DATA_ORDERED$/;"	d
__BTRFS_SEND_A_MAX	send.h	/^	__BTRFS_SEND_A_MAX		= 35,$/;"	e	enum:__anon1b81f1650103
__CALCLOCK_H	calclock/calclock.h	/^#define __CALCLOCK_H$/;"	d
__INIT_KOBJ_ATTR	sysfs.c	/^#define __INIT_KOBJ_ATTR(/;"	d	file:
__MAX_CSUM_ITEMS	file-item.c	/^#define __MAX_CSUM_ITEMS(/;"	d	file:
____versions	btrfs.mod.c	/^static const struct modversion_info ____versions[]$/;"	v	typeref:typename:const struct modversion_info[]__used __section ("__versions")	file:
__add_block_group_free_space	free-space-tree.c	/^static int __add_block_group_free_space(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
__add_inode_ref	tree-log.c	/^static inline int __add_inode_ref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
__add_relation_rb	qgroup.c	/^static int __add_relation_rb(struct btrfs_qgroup *member, struct btrfs_qgroup *parent)$/;"	f	typeref:typename:int	file:
__add_reloc_root	relocation.c	/^static int __must_check __add_reloc_root(struct btrfs_root *root)$/;"	f	typeref:typename:int __must_check	file:
__add_to_discard_list	discard.c	/^static void __add_to_discard_list(struct btrfs_discard_ctl *discard_ctl,$/;"	f	typeref:typename:void	file:
__add_to_free_space_tree	free-space-tree.c	/^int __add_to_free_space_tree(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:EXPORT_FOR_TESTS int
__add_tree_block	relocation.c	/^static int __add_tree_block(struct reloc_control *rc,$/;"	f	typeref:typename:int	file:
__alloc_dummy_extent_buffer	extent_io.c	/^struct extent_buffer *__alloc_dummy_extent_buffer(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:extent_buffer *
__alloc_extent_buffer	extent_io.c	/^__alloc_extent_buffer(struct btrfs_fs_info *fs_info, u64 start,$/;"	f	typeref:struct:extent_buffer *	file:
__anon0703ddd90103	async-thread.c	/^enum {$/;"	g	file:
__anon0f27d3d5010a	bio.h	/^	union {$/;"	u	struct:btrfs_bio
__anon0f27d3d50208	bio.h	/^		struct {$/;"	s	union:btrfs_bio::__anon0f27d3d5010a
__anon0f27d3d50308	bio.h	/^		struct {$/;"	s	union:btrfs_bio::__anon0f27d3d5010a
__anon1b81f160010a	send.c	/^	union {$/;"	u	struct:fs_path	file:
__anon1b81f1600208	send.c	/^		struct {$/;"	s	union:fs_path::__anon1b81f160010a	file:
__anon1b81f1650103	send.h	/^enum {$/;"	g
__anon28f55c210103	transaction.h	/^enum {$/;"	g
__anon401904de0103	tests/btrfs-tests.h	/^enum {$/;"	g
__anon413080f00103	extent_map.h	/^enum {$/;"	g
__anon44b841950103	extent-io-tree.h	/^enum {$/;"	g
__anon44b841950203	extent-io-tree.h	/^enum {$/;"	g
__anon5106a19d010a	delayed-ref.h	/^	union {$/;"	u	struct:btrfs_ref
__anon5616a1270103	ordered-data.h	/^enum {$/;"	g
__anon6d656a820108	tree-mod-log.c	/^	struct {$/;"	s	struct:tree_mod_elem	file:
__anon7c96edb40103	fs.h	/^enum {$/;"	g
__anon7c96edb40203	fs.h	/^enum {$/;"	g
__anon7c96edb40303	fs.h	/^enum {$/;"	g
__anon87685755010a	scrub.c	/^	union {$/;"	u	struct:scrub_sector_verification	file:
__anon955c914a0103	extent_io.h	/^enum {$/;"	g
__anon955c914a0203	extent_io.h	/^enum {$/;"	g
__anon97879c060108	relocation.c	/^	struct {$/;"	s	struct:mapping_node	file:
__anon97879c060208	relocation.c	/^	struct {$/;"	s	struct:tree_block	file:
__anon98c21faa0103	btrfs_inode.h	/^enum {$/;"	g
__anon98c21faa020a	btrfs_inode.h	/^	union {$/;"	u	struct:btrfs_inode
__anon98c21faa030a	btrfs_inode.h	/^	union {$/;"	u	struct:btrfs_inode
__anon9c3ff8b70103	free-space-cache.h	/^enum {$/;"	g
__anona312c9ad010a	compression.h	/^	union {$/;"	u	struct:compressed_bio
__anona66ee266010a	volumes.h	/^	union {$/;"	u	struct:btrfs_io_stripe
__anonb1387fa50103	super.c	/^enum {$/;"	g	file:
__anonc43c1922010a	subpage.h	/^	union {$/;"	u	struct:btrfs_subpage
__anoncf7775b90103	qgroup.h	/^enum {$/;"	g
__anond556f4290108	backref.h	/^	struct {$/;"	s	struct:btrfs_backref_share_check_ctx
__anond556f4290208	backref.h	/^	struct {$/;"	s	struct:btrfs_backref_node
__anondf6384ae0103	ctree.h	/^enum {$/;"	g
__anondf6384ae0203	ctree.h	/^enum {$/;"	g
__anonef6dfed50103	tree-log.c	/^enum {$/;"	g	file:
__anonef6dfed50203	tree-log.c	/^enum {$/;"	g	file:
__anonfd762eb60103	file.c	/^enum {$/;"	g	file:
__btrfs_abort_transaction	transaction.c	/^void __cold __btrfs_abort_transaction(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void __cold
__btrfs_add_delayed_item	delayed-inode.c	/^static int __btrfs_add_delayed_item(struct btrfs_delayed_node *delayed_node,$/;"	f	typeref:typename:int	file:
__btrfs_add_free_space	free-space-cache.c	/^int __btrfs_add_free_space(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int
__btrfs_add_free_space_zoned	free-space-cache.c	/^static int __btrfs_add_free_space_zoned(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int	file:
__btrfs_add_inode_defrag	defrag.c	/^static int __btrfs_add_inode_defrag(struct btrfs_inode *inode,$/;"	f	typeref:typename:int	file:
__btrfs_balance	volumes.c	/^static int __btrfs_balance(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int	file:
__btrfs_bio_end_io	bio.c	/^static void __btrfs_bio_end_io(struct btrfs_bio *bbio)$/;"	f	typeref:typename:void	file:
__btrfs_btree_balance_dirty	disk-io.c	/^static void __btrfs_btree_balance_dirty(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
__btrfs_check_leaf	tree-checker.c	/^enum btrfs_tree_block_status __btrfs_check_leaf(struct extent_buffer *leaf)$/;"	f	typeref:enum:btrfs_tree_block_status
__btrfs_check_node	tree-checker.c	/^enum btrfs_tree_block_status __btrfs_check_node(struct extent_buffer *node)$/;"	f	typeref:enum:btrfs_tree_block_status
__btrfs_clear_fs_compat_ro	fs.c	/^void __btrfs_clear_fs_compat_ro(struct btrfs_fs_info *fs_info, u64 flag,$/;"	f	typeref:typename:void
__btrfs_clear_fs_incompat	fs.c	/^void __btrfs_clear_fs_incompat(struct btrfs_fs_info *fs_info, u64 flag,$/;"	f	typeref:typename:void
__btrfs_commit_inode_delayed_items	delayed-inode.c	/^__btrfs_commit_inode_delayed_items(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
__btrfs_cow_block	ctree.c	/^static noinline int __btrfs_cow_block(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
__btrfs_debug_check_extent_io_range	extent-io-tree.c	/^static inline void __btrfs_debug_check_extent_io_range(const char *caller,$/;"	f	typeref:typename:void	file:
__btrfs_del_delalloc_inode	inode.c	/^void __btrfs_del_delalloc_inode(struct btrfs_root *root,$/;"	f	typeref:typename:void
__btrfs_discard_schedule_work	discard.c	/^static void __btrfs_discard_schedule_work(struct btrfs_discard_ctl *discard_ctl,$/;"	f	typeref:typename:void	file:
__btrfs_dump_space_info	space-info.c	/^static void __btrfs_dump_space_info(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
__btrfs_end_transaction	transaction.c	/^static int __btrfs_end_transaction(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
__btrfs_first_delayed_deletion_item	delayed-inode.c	/^static struct btrfs_delayed_item *__btrfs_first_delayed_deletion_item($/;"	f	typeref:struct:btrfs_delayed_item *	file:
__btrfs_first_delayed_insertion_item	delayed-inode.c	/^static struct btrfs_delayed_item *__btrfs_first_delayed_insertion_item($/;"	f	typeref:struct:btrfs_delayed_item *	file:
__btrfs_free_extent	extent-tree.c	/^static int __btrfs_free_extent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
__btrfs_free_extra_devids	volumes.c	/^static void __btrfs_free_extra_devids(struct btrfs_fs_devices *fs_devices,$/;"	f	typeref:typename:void	file:
__btrfs_fs_compat_ro	fs.h	/^#define __btrfs_fs_compat_ro(/;"	d
__btrfs_fs_incompat	fs.h	/^#define __btrfs_fs_incompat(/;"	d
__btrfs_handle_fs_error	messages.c	/^void __btrfs_handle_fs_error(struct btrfs_fs_info *fs_info, const char *function,$/;"	f	typeref:typename:__cold void
__btrfs_inc_extent_ref	extent-tree.c	/^static int __btrfs_inc_extent_ref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
__btrfs_ioctl_snap_create	ioctl.c	/^static noinline int __btrfs_ioctl_snap_create(struct file *file,$/;"	f	typeref:typename:noinline int	file:
__btrfs_kill_delayed_node	delayed-inode.c	/^static void __btrfs_kill_delayed_node(struct btrfs_delayed_node *delayed_node)$/;"	f	typeref:typename:void	file:
__btrfs_lookup_delayed_item	delayed-inode.c	/^static struct btrfs_delayed_item *__btrfs_lookup_delayed_item($/;"	f	typeref:struct:btrfs_delayed_item *	file:
__btrfs_mod_ref	extent-tree.c	/^static int __btrfs_mod_ref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
__btrfs_next_delayed_item	delayed-inode.c	/^static struct btrfs_delayed_item *__btrfs_next_delayed_item($/;"	f	typeref:struct:btrfs_delayed_item *	file:
__btrfs_panic	messages.c	/^void __btrfs_panic(struct btrfs_fs_info *fs_info, const char *function,$/;"	f	typeref:typename:__cold void
__btrfs_prealloc_file_range	inode.c	/^static int __btrfs_prealloc_file_range(struct inode *inode, int mode,$/;"	f	typeref:typename:int	file:
__btrfs_qgroup_free_meta	qgroup.c	/^void __btrfs_qgroup_free_meta(struct btrfs_root *root, int num_bytes,$/;"	f	typeref:typename:void
__btrfs_qgroup_release_data	qgroup.c	/^static int __btrfs_qgroup_release_data(struct btrfs_inode *inode,$/;"	f	typeref:typename:int	file:
__btrfs_qgroup_reserve_meta	qgroup.c	/^int __btrfs_qgroup_reserve_meta(struct btrfs_root *root, int num_bytes,$/;"	f	typeref:typename:int
__btrfs_release_delayed_node	delayed-inode.c	/^static void __btrfs_release_delayed_node($/;"	f	typeref:typename:void	file:
__btrfs_release_folio	inode.c	/^static bool __btrfs_release_folio(struct folio *folio, gfp_t gfp_flags)$/;"	f	typeref:typename:bool	file:
__btrfs_remove_delayed_item	delayed-inode.c	/^static void __btrfs_remove_delayed_item(struct btrfs_delayed_item *delayed_item)$/;"	f	typeref:typename:void	file:
__btrfs_remove_free_space_cache	free-space-cache.c	/^static void __btrfs_remove_free_space_cache(struct btrfs_free_space_ctl *ctl)$/;"	f	typeref:typename:void	file:
__btrfs_return_cluster_to_free_space	free-space-cache.c	/^static void __btrfs_return_cluster_to_free_space($/;"	f	typeref:typename:void	file:
__btrfs_run_defrag_inode	defrag.c	/^static int __btrfs_run_defrag_inode(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
__btrfs_run_delayed_items	delayed-inode.c	/^static int __btrfs_run_delayed_items(struct btrfs_trans_handle *trans, int nr)$/;"	f	typeref:typename:int	file:
__btrfs_run_delayed_refs	extent-tree.c	/^static noinline int __btrfs_run_delayed_refs(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
__btrfs_set_acl	acl.c	/^int __btrfs_set_acl(struct btrfs_trans_handle *trans, struct inode *inode,$/;"	f	typeref:typename:int
__btrfs_set_acl	acl.h	/^static inline int __btrfs_set_acl(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
__btrfs_set_fs_compat_ro	fs.c	/^void __btrfs_set_fs_compat_ro(struct btrfs_fs_info *fs_info, u64 flag,$/;"	f	typeref:typename:void
__btrfs_set_fs_incompat	fs.c	/^void __btrfs_set_fs_incompat(struct btrfs_fs_info *fs_info, u64 flag,$/;"	f	typeref:typename:void
__btrfs_submit_bio	bio.c	/^static void __btrfs_submit_bio(struct bio *bio, struct btrfs_io_context *bioc,$/;"	f	typeref:typename:void	file:
__btrfs_sysfs_remove_fsid	sysfs.c	/^static void __btrfs_sysfs_remove_fsid(struct btrfs_fs_devices *fs_devs)$/;"	f	typeref:typename:void	file:
__btrfs_tree_lock	locking.c	/^void __btrfs_tree_lock(struct extent_buffer *eb, enum btrfs_lock_nesting nest)$/;"	f	typeref:typename:void
__btrfs_tree_read_lock	locking.c	/^void __btrfs_tree_read_lock(struct extent_buffer *eb, enum btrfs_lock_nesting nest)$/;"	f	typeref:typename:void
__btrfs_unlink_inode	inode.c	/^static int __btrfs_unlink_inode(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
__btrfs_update_delayed_inode	delayed-inode.c	/^static int __btrfs_update_delayed_inode(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
__btrfs_wait_cache_io	free-space-cache.c	/^static int __btrfs_wait_cache_io(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
__btrfs_wait_marked_extents	transaction.c	/^static int __btrfs_wait_marked_extents(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
__btrfs_write_out_cache	free-space-cache.c	/^static int __btrfs_write_out_cache(struct btrfs_root *root, struct inode *inode,$/;"	f	typeref:typename:int	file:
__check_free_space_extents	tests/free-space-tree-tests.c	/^static int __check_free_space_extents(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
__clear_extent_bit	extent-io-tree.c	/^int __clear_extent_bit(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f	typeref:typename:int
__clone_root_cmp_bsearch	send.c	/^static int __clone_root_cmp_bsearch(const void *key, const void *elt)$/;"	f	typeref:typename:int	file:
__clone_root_cmp_sort	send.c	/^static int __clone_root_cmp_sort(const void *e1, const void *e2)$/;"	f	typeref:typename:int	file:
__compare_inode_defrag	defrag.c	/^static int __compare_inode_defrag(struct inode_defrag *defrag1,$/;"	f	typeref:typename:int	file:
__copy_first_ref	send.c	/^static int __copy_first_ref(int num, u64 dir, int index,$/;"	f	typeref:typename:int	file:
__create_free_space_inode	free-space-cache.c	/^static int __create_free_space_inode(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
__del_qgroup_rb	qgroup.c	/^static void __del_qgroup_rb(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
__del_qgroup_relation	qgroup.c	/^static int __del_qgroup_relation(struct btrfs_trans_handle *trans, u64 src,$/;"	f	typeref:typename:int	file:
__del_reloc_root	relocation.c	/^static void __del_reloc_root(struct btrfs_root *root)$/;"	f	typeref:typename:void	file:
__exclude_logged_extent	extent-tree.c	/^static int __exclude_logged_extent(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
__extent_writepage	extent_io.c	/^static int __extent_writepage(struct page *page, struct btrfs_bio_ctrl *bio_ctrl)$/;"	f	typeref:typename:int	file:
__extent_writepage_io	extent_io.c	/^static noinline_for_stack int __extent_writepage_io(struct btrfs_inode *inode,$/;"	f	typeref:typename:noinline_for_stack int	file:
__find_xattr	send.c	/^static int __find_xattr(int num, struct btrfs_key *di_key, const char *name,$/;"	f	typeref:typename:int	file:
__free_extent_buffer	extent_io.c	/^static void __free_extent_buffer(struct extent_buffer *eb)$/;"	f	typeref:typename:void	file:
__free_recorded_refs	send.c	/^static void __free_recorded_refs(struct list_head *head)$/;"	f	typeref:typename:void	file:
__get_cur_name_and_parent	send.c	/^static int __get_cur_name_and_parent(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
__get_extent_map	extent_io.c	/^__get_extent_map(struct inode *inode, struct page *page, size_t pg_offset,$/;"	f	typeref:struct:extent_map *	file:
__insert_orphan_inode	relocation.c	/^static int __insert_orphan_inode(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
__ktprint	calclock/calclock.c	/^void __ktprint(int depth, char *fn_name, ktime_t time,$/;"	f	typeref:typename:void
__ktput	calclock/calclock.h	/^static inline void __ktput(ktime_t localclocks[], struct calclock *clock)$/;"	f	typeref:typename:void
__le8	accessors.h	/^#define __le8 /;"	d
__load_free_space_cache	free-space-cache.c	/^static int __load_free_space_cache(struct btrfs_root *root, struct inode *inode,$/;"	f	typeref:typename:int	file:
__lookup_extent_mapping	extent_map.c	/^__lookup_extent_mapping(struct extent_map_tree *tree,$/;"	f	typeref:struct:extent_map *	file:
__lookup_free_space_inode	free-space-cache.c	/^static struct inode *__lookup_free_space_inode(struct btrfs_root *root,$/;"	f	typeref:struct:inode *	file:
__need_auto_defrag	defrag.c	/^static inline int __need_auto_defrag(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int	file:
__print_stack_trace	ref-verify.c	/^static inline void __print_stack_trace(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
__print_stack_trace	ref-verify.c	/^static void __print_stack_trace(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
__process_changed_deleted_xattr	send.c	/^static int __process_changed_deleted_xattr(int num, struct btrfs_key *di_key,$/;"	f	typeref:typename:int	file:
__process_changed_new_xattr	send.c	/^static int __process_changed_new_xattr(int num, struct btrfs_key *di_key,$/;"	f	typeref:typename:int	file:
__process_deleted_xattr	send.c	/^static int __process_deleted_xattr(int num, struct btrfs_key *di_key,$/;"	f	typeref:typename:int	file:
__process_new_xattr	send.c	/^static int __process_new_xattr(int num, struct btrfs_key *di_key,$/;"	f	typeref:typename:int	file:
__process_pages_contig	extent_io.c	/^static void __process_pages_contig(struct address_space *mapping,$/;"	f	typeref:typename:void	file:
__push_leaf_left	ctree.c	/^static noinline int __push_leaf_left(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
__push_leaf_right	ctree.c	/^static noinline int __push_leaf_right(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
__qgroup_excl_accounting	qgroup.c	/^static int __qgroup_excl_accounting(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
__remove_from_free_space_tree	free-space-tree.c	/^int __remove_from_free_space_tree(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:EXPORT_FOR_TESTS int
__remove_rbio_from_cache	raid56.c	/^static void __remove_rbio_from_cache(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:void	file:
__reserve_bytes	space-info.c	/^static int __reserve_bytes(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
__run_delayed_extent_op	extent-tree.c	/^static void __run_delayed_extent_op(struct btrfs_delayed_extent_op *extent_op,$/;"	f	typeref:typename:void	file:
__save_stack_trace	ref-verify.c	/^static inline void __save_stack_trace(struct ref_action *ra)$/;"	f	typeref:typename:void	file:
__save_stack_trace	ref-verify.c	/^static void __save_stack_trace(struct ref_action *ra)$/;"	f	typeref:typename:void	file:
__scrub_blocked_if_needed	scrub.c	/^static void __scrub_blocked_if_needed(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
__set_extent_bit	extent-io-tree.c	/^static int __set_extent_bit(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f	typeref:typename:int	file:
__setup_root	disk-io.c	/^static void __setup_root(struct btrfs_root *root, struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
__test_case_3	tests/extent-map-tests.c	/^static int __test_case_3(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
__test_case_4	tests/extent-map-tests.c	/^static int __test_case_4(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
__test_eb_bitmaps	tests/extent-io-tests.c	/^static int __test_eb_bitmaps(unsigned long *bitmap, struct extent_buffer *eb)$/;"	f	typeref:typename:int	file:
__tree_mod_log_search	tree-mod-log.c	/^static struct tree_mod_elem *__tree_mod_log_search(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:tree_mod_elem *	file:
__tree_search	extent_map.c	/^static struct rb_node *__tree_search(struct rb_root *root, u64 offset,$/;"	f	typeref:struct:rb_node *	file:
__tree_search	ordered-data.c	/^static struct rb_node *__tree_search(struct rb_root *root, u64 file_offset,$/;"	f	typeref:struct:rb_node *	file:
__unlink_start_trans	inode.c	/^static struct btrfs_trans_handle *__unlink_start_trans(struct btrfs_inode *dir)$/;"	f	typeref:struct:btrfs_trans_handle *	file:
__unlock_for_delalloc	extent_io.c	/^static noinline void __unlock_for_delalloc(struct inode *inode,$/;"	f	typeref:typename:noinline void	file:
__update_reloc_root	relocation.c	/^static int __update_reloc_root(struct btrfs_root *root)$/;"	f	typeref:typename:int	file:
__write_extent_buffer	extent_io.c	/^static void __write_extent_buffer(const struct extent_buffer *eb,$/;"	f	typeref:typename:void	file:
_btrfs_ioctl_send	ioctl.c	/^static int _btrfs_ioctl_send(struct inode *inode, void __user *argp, bool compat)$/;"	f	typeref:typename:int	file:
_btrfs_ioctl_set_received_subvol	ioctl.c	/^static long _btrfs_ioctl_set_received_subvol(struct file *file,$/;"	f	typeref:typename:long	file:
_btrfs_printk	messages.c	/^void __cold _btrfs_printk(const struct btrfs_fs_info *fs_info, const char *fmt, ...)$/;"	f	typeref:typename:void __cold
abort_and_dump	extent-tree.c	/^#define abort_and_dump(/;"	d	file:
abort_should_print_stack	ctree.c	/^bool __cold abort_should_print_stack(int errno)$/;"	f	typeref:typename:bool __cold
aborted	transaction.h	/^	int aborted;$/;"	m	struct:btrfs_transaction	typeref:typename:int
aborted	transaction.h	/^	short aborted;$/;"	m	struct:btrfs_trans_handle	typeref:typename:short
accounting_lock	ctree.h	/^	spinlock_t accounting_lock;$/;"	m	struct:btrfs_root	typeref:typename:spinlock_t
acl	btrfs_inode.h	/^	struct posix_acl *acl;$/;"	m	struct:btrfs_new_inode_args	typeref:struct:posix_acl *
acl_show	sysfs.c	/^static ssize_t acl_show(struct kobject *kobj, struct kobj_attribute *a, char *buf)$/;"	f	typeref:typename:ssize_t	file:
acls_after_inode_item	inode.c	/^static noinline int acls_after_inode_item(struct extent_buffer *leaf,$/;"	f	typeref:typename:noinline int	file:
action	delayed-ref.h	/^	int action;$/;"	m	struct:btrfs_ref	typeref:typename:int
action	delayed-ref.h	/^	unsigned int action:8;$/;"	m	struct:btrfs_delayed_ref_node	typeref:typename:unsigned int:8
action	ref-verify.c	/^	int action;$/;"	m	struct:ref_action	typeref:typename:int	file:
actions	ref-verify.c	/^	struct list_head actions;$/;"	m	struct:block_entry	typeref:struct:list_head	file:
active_bg_list	block-group.h	/^	struct list_head active_bg_list;$/;"	m	struct:btrfs_block_group	typeref:struct:list_head
active_map	zstd.c	/^	unsigned long active_map;$/;"	m	struct:zstd_workspace_manager	typeref:typename:unsigned long	file:
active_meta_bg	fs.h	/^	struct btrfs_block_group *active_meta_bg;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_block_group *
active_system_bg	fs.h	/^	struct btrfs_block_group *active_system_bg;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_block_group *
active_zones	zoned.h	/^	unsigned long *active_zones;$/;"	m	struct:btrfs_zoned_device_info	typeref:typename:unsigned long *
active_zones_left	zoned.h	/^	atomic_t active_zones_left;$/;"	m	struct:btrfs_zoned_device_info	typeref:typename:atomic_t
add_all_parents	backref.c	/^static int add_all_parents(struct btrfs_backref_walk_ctx *ctx,$/;"	f	typeref:typename:int	file:
add_async_extent	inode.c	/^static noinline int add_async_extent(struct async_chunk *cow,$/;"	f	typeref:typename:noinline int	file:
add_block_entry	ref-verify.c	/^static struct block_entry *add_block_entry(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:block_entry *	file:
add_block_group_free_space	free-space-tree.c	/^int add_block_group_free_space(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
add_bytes_to_bitmap	free-space-cache.c	/^static u64 add_bytes_to_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:u64	file:
add_compressed_extent	tests/extent-map-tests.c	/^static int add_compressed_extent(struct extent_map_tree *em_tree,$/;"	f	typeref:typename:int	file:
add_conflicting_inode	tree-log.c	/^static int add_conflicting_inode(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
add_data_references	relocation.c	/^int add_data_references(struct reloc_control *rc,$/;"	f	typeref:typename:noinline_for_stack int	file:
add_delayed_ref_head	delayed-ref.c	/^add_delayed_ref_head(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline struct btrfs_delayed_ref_head *	file:
add_delayed_refs	backref.c	/^static int add_delayed_refs(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
add_direct_ref	backref.c	/^static int add_direct_ref(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
add_extent_changeset	extent-io-tree.c	/^static int add_extent_changeset(struct extent_state *state, u32 bits,$/;"	f	typeref:typename:int	file:
add_extent_data_ref	ref-verify.c	/^static int add_extent_data_ref(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
add_extent_mapping	extent_map.c	/^int add_extent_mapping(struct extent_map_tree *tree,$/;"	f	typeref:typename:int
add_falloc_range	file.c	/^static int add_falloc_range(struct list_head *head, u64 start, u64 len)$/;"	f	typeref:typename:int	file:
add_free_space_extent	free-space-tree.c	/^static int add_free_space_extent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
add_indirect_ref	backref.c	/^static int add_indirect_ref(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
add_inline_refs	backref.c	/^static int add_inline_refs(struct btrfs_backref_walk_ctx *ctx,$/;"	f	typeref:typename:int	file:
add_inode_ref	tree-log.c	/^static noinline int add_inode_ref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
add_keyed_refs	backref.c	/^static int add_keyed_refs(struct btrfs_backref_walk_ctx *ctx,$/;"	f	typeref:typename:int	file:
add_list	delayed-ref.h	/^	struct list_head add_list;$/;"	m	struct:btrfs_delayed_ref_node	typeref:struct:list_head
add_missing_dev	volumes.c	/^static struct btrfs_device *add_missing_dev(struct btrfs_fs_devices *fs_devices,$/;"	f	typeref:struct:btrfs_device *	file:
add_missing_keys	backref.c	/^static int add_missing_keys(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
add_new_bitmap	free-space-cache.c	/^static void add_new_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:void	file:
add_new_free_space_info	free-space-tree.c	/^static int add_new_free_space_info(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
add_orphan_dir_info	send.c	/^static struct orphan_dir_info *add_orphan_dir_info(struct send_ctx *sctx,$/;"	f	typeref:struct:orphan_dir_info *	file:
add_pending_csums	inode.c	/^static int add_pending_csums(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
add_pending_dir_move	send.c	/^static int add_pending_dir_move(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
add_pending_snapshot	transaction.c	/^static void add_pending_snapshot(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:void	file:
add_prelim_ref	backref.c	/^static int add_prelim_ref(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
add_qgroup_item	qgroup.c	/^static int add_qgroup_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
add_qgroup_rb	qgroup.c	/^static struct btrfs_qgroup *add_qgroup_rb(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_qgroup *	file:
add_qgroup_relation_item	qgroup.c	/^static int add_qgroup_relation_item(struct btrfs_trans_handle *trans, u64 src,$/;"	f	typeref:typename:int	file:
add_ra_bio_pages	compression.c	/^static noinline int add_ra_bio_pages(struct inode *inode,$/;"	f	typeref:typename:noinline int	file:
add_relation_rb	qgroup.c	/^static int add_relation_rb(struct btrfs_fs_info *fs_info, u64 memberid, u64 parentid)$/;"	f	typeref:typename:int	file:
add_root_meta_rsv	qgroup.c	/^static void add_root_meta_rsv(struct btrfs_root *root, int num_bytes,$/;"	f	typeref:typename:void	file:
add_root_to_dirty_list	ctree.c	/^static void add_root_to_dirty_list(struct btrfs_root *root)$/;"	f	typeref:typename:void	file:
add_shared_data_ref	ref-verify.c	/^static int add_shared_data_ref(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
add_to_discard_list	discard.c	/^static void add_to_discard_list(struct btrfs_discard_ctl *discard_ctl,$/;"	f	typeref:typename:void	file:
add_to_discard_unused_list	discard.c	/^static void add_to_discard_unused_list(struct btrfs_discard_ctl *discard_ctl,$/;"	f	typeref:typename:void	file:
add_to_free_space_tree	free-space-tree.c	/^int add_to_free_space_tree(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
add_tree_block	ref-verify.c	/^static int add_tree_block(struct btrfs_fs_info *fs_info, u64 ref_root,$/;"	f	typeref:typename:int	file:
add_tree_block	relocation.c	/^static int add_tree_block(struct reloc_control *rc,$/;"	f	typeref:typename:int	file:
add_tree_ref	tests/qgroup-tests.c	/^static int add_tree_ref(struct btrfs_root *root, u64 bytenr, u64 num_bytes,$/;"	f	typeref:typename:int	file:
add_waiting_dir_move	send.c	/^static int add_waiting_dir_move(struct send_ctx *sctx, u64 ino, bool orphanized)$/;"	f	typeref:typename:int	file:
adding_csums	transaction.h	/^	bool adding_csums;$/;"	m	struct:btrfs_trans_handle	typeref:typename:bool
addrm_unknown_feature_attrs	sysfs.c	/^static int addrm_unknown_feature_attrs(struct btrfs_fs_info *fs_info, bool add)$/;"	f	typeref:typename:int	file:
adjust_slots_upwards	qgroup.c	/^static int adjust_slots_upwards(struct btrfs_path *path, int root_level)$/;"	f	typeref:typename:int	file:
all_blocks_list	check-integrity.c	/^	struct list_head all_blocks_list;$/;"	m	struct:btrfsic_state	typeref:struct:list_head	file:
all_blocks_node	check-integrity.c	/^	struct list_head all_blocks_node;	\/* list node *\/$/;"	m	struct:btrfsic_block	typeref:struct:list_head	file:
alloc_bitmap	free-space-tree.c	/^static unsigned long *alloc_bitmap(u32 bitmap_size)$/;"	f	typeref:typename:unsigned long *	file:
alloc_btrfs_io_context	volumes.c	/^static struct btrfs_io_context *alloc_btrfs_io_context(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_io_context *	file:
alloc_bytenr	ctree.h	/^	u64 alloc_bytenr;$/;"	m	struct:btrfs_root	typeref:typename:u64
alloc_chunk_ctl	volumes.c	/^struct alloc_chunk_ctl {$/;"	s	file:
alloc_compressed_bio	compression.c	/^static struct compressed_bio *alloc_compressed_bio(struct btrfs_inode *inode,$/;"	f	typeref:struct:compressed_bio *	file:
alloc_dummy_extent_buffer	extent_io.c	/^struct extent_buffer *alloc_dummy_extent_buffer(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:extent_buffer *
alloc_extent_buffer	extent_io.c	/^struct extent_buffer *alloc_extent_buffer(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:extent_buffer *
alloc_extent_map	extent_map.c	/^struct extent_map *alloc_extent_map(void)$/;"	f	typeref:struct:extent_map *
alloc_extent_state	extent-io-tree.c	/^static struct extent_state *alloc_extent_state(gfp_t mask)$/;"	f	typeref:struct:extent_state *	file:
alloc_extent_state_atomic	extent-io-tree.c	/^static struct extent_state *alloc_extent_state_atomic(struct extent_state *prealloc)$/;"	f	typeref:struct:extent_state *	file:
alloc_fs_devices	volumes.c	/^static struct btrfs_fs_devices *alloc_fs_devices(const u8 *fsid,$/;"	f	typeref:struct:btrfs_fs_devices *	file:
alloc_heuristic_ws	compression.c	/^static struct list_head *alloc_heuristic_ws(unsigned int level)$/;"	f	typeref:struct:list_head *	file:
alloc_list	volumes.h	/^	struct list_head alloc_list;$/;"	m	struct:btrfs_fs_devices	typeref:struct:list_head
alloc_log_tree	disk-io.c	/^static struct btrfs_root *alloc_log_tree(struct btrfs_trans_handle *trans,$/;"	f	typeref:struct:btrfs_root *	file:
alloc_name	sysfs.c	/^static const char *alloc_name(u64 flags)$/;"	f	typeref:typename:const char *	file:
alloc_new_bio	extent_io.c	/^static void alloc_new_bio(struct btrfs_inode *inode,$/;"	f	typeref:typename:void	file:
alloc_offset	block-group.h	/^	u64 alloc_offset;$/;"	m	struct:btrfs_block_group	typeref:typename:u64
alloc_ordered_extent	ordered-data.c	/^static struct btrfs_ordered_extent *alloc_ordered_extent($/;"	f	typeref:struct:btrfs_ordered_extent *	file:
alloc_path_for_send	send.c	/^static struct btrfs_path *alloc_path_for_send(void)$/;"	f	typeref:struct:btrfs_path *	file:
alloc_profile_is_valid	volumes.c	/^static int alloc_profile_is_valid(u64 flags, int extended)$/;"	f	typeref:typename:int	file:
alloc_rbio	raid56.c	/^static struct btrfs_raid_bio *alloc_rbio(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_raid_bio *	file:
alloc_rbio_data_pages	raid56.c	/^static int alloc_rbio_data_pages(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:int	file:
alloc_rbio_essential_pages	raid56.c	/^static int alloc_rbio_essential_pages(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:int	file:
alloc_rbio_pages	raid56.c	/^static int alloc_rbio_pages(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:int	file:
alloc_rbio_parity_pages	raid56.c	/^static int alloc_rbio_parity_pages(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:int	file:
alloc_reloc_control	relocation.c	/^static struct reloc_control *alloc_reloc_control(struct btrfs_fs_info *fs_info)$/;"	f	typeref:struct:reloc_control *	file:
alloc_reserved_extent	extent-tree.c	/^static int alloc_reserved_extent(struct btrfs_trans_handle *trans, u64 bytenr,$/;"	f	typeref:typename:int	file:
alloc_reserved_file_extent	extent-tree.c	/^static int alloc_reserved_file_extent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
alloc_reserved_tree_block	extent-tree.c	/^static int alloc_reserved_tree_block(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
alloc_state	volumes.h	/^	struct extent_io_tree alloc_state;$/;"	m	struct:btrfs_device	typeref:struct:extent_io_tree
alloc_test_extent_buffer	extent_io.c	/^struct extent_buffer *alloc_test_extent_buffer(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:extent_buffer *
alloc_tree_mod_elem	tree-mod-log.c	/^static struct tree_mod_elem *alloc_tree_mod_elem(struct extent_buffer *eb,$/;"	f	typeref:struct:tree_mod_elem *	file:
alloc_workspace	compression.c	/^static struct list_head *alloc_workspace(int type, unsigned int level)$/;"	f	typeref:struct:list_head *	file:
allocated_ebs	fs.h	/^	struct list_head allocated_ebs;$/;"	m	struct:btrfs_fs_info	typeref:struct:list_head
allocated_roots	fs.h	/^	struct list_head allocated_roots;$/;"	m	struct:btrfs_fs_info	typeref:struct:list_head
allocating_chunk	transaction.h	/^	bool allocating_chunk;$/;"	m	struct:btrfs_trans_handle	typeref:typename:bool
allocation_attrs	sysfs.c	/^static const struct attribute *allocation_attrs[] = {$/;"	v	typeref:typename:const struct attribute * []	file:
anon_dev	ctree.h	/^	dev_t anon_dev;$/;"	m	struct:btrfs_root	typeref:typename:dev_t
anon_dev	transaction.h	/^	dev_t anon_dev;$/;"	m	struct:btrfs_pending_snapshot	typeref:typename:dev_t
apply	props.c	/^	int (*apply)(struct inode *inode, const char *value, size_t len);$/;"	m	struct:prop_handler	typeref:typename:int (*)(struct inode * inode,const char * value,size_t len)	file:
apply_children_dir_moves	send.c	/^static int apply_children_dir_moves(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
apply_dir_move	send.c	/^static int apply_dir_move(struct send_ctx *sctx, struct pending_dir_move *pm)$/;"	f	typeref:typename:int	file:
areas_overlap	extent_io.c	/^static inline bool areas_overlap(unsigned long src, unsigned long dst, unsigned long len)$/;"	f	typeref:typename:bool	file:
assert_eb_page_uptodate	extent_io.c	/^static void assert_eb_page_uptodate(const struct extent_buffer *eb,$/;"	f	typeref:typename:void	file:
async_chunk	inode.c	/^struct async_chunk {$/;"	s	file:
async_cow	inode.c	/^	struct async_cow *async_cow;$/;"	m	struct:async_chunk	typeref:struct:async_cow *	file:
async_cow	inode.c	/^struct async_cow {$/;"	s	file:
async_cow_free	inode.c	/^static noinline void async_cow_free(struct btrfs_work *work)$/;"	f	typeref:typename:noinline void	file:
async_data_reclaim_work	fs.h	/^	struct work_struct async_data_reclaim_work;$/;"	m	struct:btrfs_fs_info	typeref:struct:work_struct
async_delalloc_pages	fs.h	/^	atomic_t async_delalloc_pages;$/;"	m	struct:btrfs_fs_info	typeref:typename:atomic_t
async_extent	inode.c	/^struct async_extent {$/;"	s	file:
async_reclaim_work	fs.h	/^	struct work_struct async_reclaim_work;$/;"	m	struct:btrfs_fs_info	typeref:struct:work_struct
async_submit_bio	bio.c	/^struct async_submit_bio {$/;"	s	file:
async_submit_wait	fs.h	/^	wait_queue_head_t async_submit_wait;$/;"	m	struct:btrfs_fs_info	typeref:typename:wait_queue_head_t
attach_extent_buffer_page	extent_io.c	/^static int attach_extent_buffer_page(struct extent_buffer *eb,$/;"	f	typeref:typename:int	file:
attr_to_btrfs_attr	sysfs.c	/^static struct kobj_attribute *attr_to_btrfs_attr(struct attribute *attr)$/;"	f	typeref:struct:kobj_attribute *	file:
attr_to_btrfs_feature_attr	sysfs.c	/^static struct btrfs_feature_attr *attr_to_btrfs_feature_attr($/;"	f	typeref:struct:btrfs_feature_attr *	file:
aux	ulist.h	/^	u64 aux;		\/* auxiliary value saved along with the val *\/$/;"	m	struct:ulist_node	typeref:typename:u64
avail_data_alloc_bits	fs.h	/^	u64 avail_data_alloc_bits;$/;"	m	struct:btrfs_fs_info	typeref:typename:u64
avail_metadata_alloc_bits	fs.h	/^	u64 avail_metadata_alloc_bits;$/;"	m	struct:btrfs_fs_info	typeref:typename:u64
avail_system_alloc_bits	fs.h	/^	u64 avail_system_alloc_bits;$/;"	m	struct:btrfs_fs_info	typeref:typename:u64
backref_cache	relocation.c	/^	struct btrfs_backref_cache backref_cache;$/;"	m	struct:reloc_control	typeref:struct:btrfs_backref_cache	file:
backref_cache	send.c	/^	struct btrfs_lru_cache backref_cache;$/;"	m	struct:send_ctx	typeref:struct:btrfs_lru_cache	file:
backref_cache_entry	send.c	/^struct backref_cache_entry {$/;"	s	file:
backref_cache_last_reloc_trans	send.c	/^	u64 backref_cache_last_reloc_trans;$/;"	m	struct:send_ctx	typeref:typename:u64	file:
backref_ctx	send.c	/^struct backref_ctx {$/;"	s	file:
backref_in_log	tree-log.c	/^static noinline int backref_in_log(struct btrfs_root *log,$/;"	f	typeref:typename:noinline int	file:
backref_offset	send.c	/^	u64 backref_offset;$/;"	m	struct:backref_ctx	typeref:typename:u64	file:
backref_owner	send.c	/^	u64 backref_owner;$/;"	m	struct:backref_ctx	typeref:typename:u64	file:
backup_root_index	fs.h	/^	int backup_root_index;$/;"	m	struct:btrfs_fs_info	typeref:typename:int
backup_super_roots	disk-io.c	/^static void backup_super_roots(struct btrfs_fs_info *info)$/;"	f	typeref:typename:void	file:
balance_cancel_req	fs.h	/^	atomic_t balance_cancel_req;$/;"	m	struct:btrfs_fs_info	typeref:typename:atomic_t
balance_ctl	fs.h	/^	struct btrfs_balance_control *balance_ctl;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_balance_control *
balance_kthread	volumes.c	/^static int balance_kthread(void *data)$/;"	f	typeref:typename:int	file:
balance_level	ctree.c	/^static noinline int balance_level(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
balance_lock	fs.h	/^	spinlock_t balance_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:spinlock_t
balance_mutex	fs.h	/^	struct mutex balance_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:mutex
balance_node_right	ctree.c	/^static int balance_node_right(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
balance_pause_req	fs.h	/^	atomic_t balance_pause_req;$/;"	m	struct:btrfs_fs_info	typeref:typename:atomic_t
balance_wait_q	fs.h	/^	wait_queue_head_t balance_wait_q;$/;"	m	struct:btrfs_fs_info	typeref:typename:wait_queue_head_t
barrier_all_devices	disk-io.c	/^static int barrier_all_devices(struct btrfs_fs_info *info)$/;"	f	typeref:typename:int	file:
batch_delete_dir_index_items	tree-log.c	/^static int batch_delete_dir_index_items(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
bbio	bio.c	/^	struct btrfs_bio *bbio;$/;"	m	struct:async_submit_bio	typeref:struct:btrfs_bio *	file:
bbio	bio.c	/^	struct btrfs_bio *bbio;$/;"	m	struct:btrfs_failed_bio	typeref:struct:btrfs_bio *	file:
bbio	compression.h	/^	struct btrfs_bio bbio;$/;"	m	struct:compressed_bio	typeref:struct:btrfs_bio
bbio	extent_io.c	/^	struct btrfs_bio *bbio;$/;"	m	struct:btrfs_bio_ctrl	typeref:struct:btrfs_bio *	file:
bbio	inode.c	/^	struct btrfs_bio bbio;$/;"	m	struct:btrfs_dio_private	typeref:struct:btrfs_bio	file:
bbio_has_ordered_extent	bio.c	/^static bool bbio_has_ordered_extent(struct btrfs_bio *bbio)$/;"	f	typeref:typename:bool	file:
bdev	check-integrity.c	/^	struct block_device *bdev;$/;"	m	struct:btrfsic_dev_state	typeref:struct:block_device *	file:
bdev	volumes.h	/^	struct block_device *bdev;$/;"	m	struct:btrfs_device	typeref:struct:block_device *
bdev_holder	fs.h	/^	void *bdev_holder;$/;"	m	struct:btrfs_fs_info	typeref:typename:void *
begin_cmd	send.c	/^static int begin_cmd(struct send_ctx *sctx, int cmd)$/;"	f	typeref:typename:int	file:
begin_page_read	extent_io.c	/^static void begin_page_read(struct btrfs_fs_info *fs_info, struct page *page)$/;"	f	typeref:typename:void	file:
bflags	extent_io.h	/^	unsigned long bflags;$/;"	m	struct:extent_buffer	typeref:typename:unsigned long
bg	scrub.c	/^	struct btrfs_block_group *bg;$/;"	m	struct:scrub_stripe	typeref:struct:btrfs_block_group *	file:
bg_extent_count	volumes.h	/^	int bg_extent_count;$/;"	m	struct:btrfs_swapfile_pin	typeref:typename:int
bg_flag	volumes.h	/^	u64 bg_flag;		\/* block group flag of the raid *\/$/;"	m	struct:btrfs_raid_attr	typeref:typename:u64
bg_list	block-group.h	/^	struct list_head bg_list;$/;"	m	struct:btrfs_block_group	typeref:struct:list_head
bg_reclaim_threshold	fs.h	/^	int bg_reclaim_threshold;$/;"	m	struct:btrfs_fs_info	typeref:typename:int
bg_reclaim_threshold	space-info.h	/^	int bg_reclaim_threshold;$/;"	m	struct:btrfs_space_info	typeref:typename:int
bio	bio.h	/^	struct bio bio;$/;"	m	struct:btrfs_bio	typeref:struct:bio
bio_counter	fs.h	/^	struct percpu_counter bio_counter;$/;"	m	struct:btrfs_dev_replace	typeref:struct:percpu_counter
bio_get_trace_info	raid56.c	/^static void bio_get_trace_info(struct btrfs_raid_bio *rbio, struct bio *bio,$/;"	f	typeref:typename:void	file:
bio_list	raid56.h	/^	struct bio_list bio_list;$/;"	m	struct:btrfs_raid_bio	typeref:struct:bio_list
bio_list_bytes	raid56.h	/^	int bio_list_bytes;$/;"	m	struct:btrfs_raid_bio	typeref:typename:int
bio_list_lock	raid56.h	/^	spinlock_t bio_list_lock;$/;"	m	struct:btrfs_raid_bio	typeref:typename:spinlock_t
bio_list_put	raid56.c	/^static inline void bio_list_put(struct bio_list *bio_list)$/;"	f	typeref:typename:void	file:
bio_sectors	raid56.h	/^	struct sector_ptr *bio_sectors;$/;"	m	struct:btrfs_raid_bio	typeref:struct:sector_ptr *
bioc	bio.c	/^	struct btrfs_io_context *bioc;$/;"	m	struct:async_submit_bio	typeref:struct:btrfs_io_context *	file:
bioc	raid56.h	/^	struct btrfs_io_context *bioc;$/;"	m	struct:btrfs_raid_bio	typeref:struct:btrfs_io_context *
bioc	volumes.h	/^		struct btrfs_io_context *bioc;$/;"	m	union:btrfs_io_stripe::__anona66ee266010a	typeref:struct:btrfs_io_context *
bitmap	free-space-cache.h	/^	unsigned long *bitmap;$/;"	m	struct:btrfs_free_space	typeref:typename:unsigned long *
bitmap_clear_bits	free-space-cache.c	/^static inline void bitmap_clear_bits(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:void	file:
bitmap_extents	free-space-cache.h	/^	s32 bitmap_extents;$/;"	m	struct:btrfs_free_space	typeref:typename:s32
bitmap_high_thresh	block-group.h	/^	u32 bitmap_high_thresh;$/;"	m	struct:btrfs_block_group	typeref:typename:u32
bitmap_low_thresh	block-group.h	/^	u32 bitmap_low_thresh;$/;"	m	struct:btrfs_block_group	typeref:typename:u32
bitmap_nr_bits	subpage.h	/^	unsigned int bitmap_nr_bits;$/;"	m	struct:btrfs_subpage_info	typeref:typename:unsigned int
bitmap_set_bits	free-space-cache.c	/^static void bitmap_set_bits(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:void	file:
bitmap_test_range_all_set	misc.h	/^static inline bool bitmap_test_range_all_set(const unsigned long *addr,$/;"	f	typeref:typename:bool
bitmap_test_range_all_zero	misc.h	/^static inline bool bitmap_test_range_all_zero(const unsigned long *addr,$/;"	f	typeref:typename:bool
bitmaps	free-space-cache.h	/^	int bitmaps;$/;"	m	struct:btrfs_io_ctl	typeref:typename:int
bitmaps	subpage.h	/^	unsigned long bitmaps[];$/;"	m	struct:btrfs_subpage	typeref:typename:unsigned long[]
blkcg_css	inode.c	/^	struct cgroup_subsys_state *blkcg_css;$/;"	m	struct:async_chunk	typeref:struct:cgroup_subsys_state *	file:
block	check-integrity.c	/^	struct btrfsic_block *block;$/;"	m	struct:btrfsic_stack_frame	typeref:struct:btrfsic_block *	file:
block_ctx	check-integrity.c	/^	struct btrfsic_block_data_ctx *block_ctx;$/;"	m	struct:btrfsic_stack_frame	typeref:struct:btrfsic_block_data_ctx *	file:
block_entry	ref-verify.c	/^struct block_entry {$/;"	s	file:
block_group	block-group.h	/^	struct btrfs_block_group *block_group;$/;"	m	struct:btrfs_caching_control	typeref:struct:btrfs_block_group *
block_group	free-space-cache.h	/^	struct btrfs_block_group *block_group;$/;"	m	struct:btrfs_free_space_ctl	typeref:struct:btrfs_block_group *
block_group	fs.h	/^	struct btrfs_block_group *block_group;$/;"	m	struct:btrfs_discard_ctl	typeref:struct:btrfs_block_group *
block_group	fs.h	/^	struct btrfs_block_group *block_group;$/;"	m	struct:btrfs_free_cluster	typeref:struct:btrfs_block_group *
block_group	relocation.c	/^	struct btrfs_block_group *block_group;$/;"	m	struct:reloc_control	typeref:struct:btrfs_block_group *	file:
block_group_bits	extent-tree.c	/^static int block_group_bits(struct btrfs_block_group *cache, u64 bits)$/;"	f	typeref:typename:int	file:
block_group_cache_lock	fs.h	/^	rwlock_t block_group_cache_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:rwlock_t
block_group_cache_tree	fs.h	/^	struct rb_root_cached block_group_cache_tree;$/;"	m	struct:btrfs_fs_info	typeref:struct:rb_root_cached
block_group_cache_tree_search	block-group.c	/^static struct btrfs_block_group *block_group_cache_tree_search($/;"	f	typeref:struct:btrfs_block_group *	file:
block_group_err	tree-checker.c	/^static void block_group_err(const struct extent_buffer *eb, int slot,$/;"	f	file:
block_group_kobjs	space-info.h	/^	struct kobject *block_group_kobjs[BTRFS_NR_RAID_TYPES];$/;"	m	struct:btrfs_space_info	typeref:struct:kobject * []
block_group_list	fs.h	/^	struct list_head block_group_list;$/;"	m	struct:btrfs_free_cluster	typeref:struct:list_head
block_group_root	fs.h	/^	struct btrfs_root *block_group_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_root *
block_groups	space-info.h	/^	struct list_head block_groups[BTRFS_NR_RAID_TYPES];$/;"	m	struct:btrfs_space_info	typeref:struct:list_head[]
block_hashtable	check-integrity.c	/^	struct btrfsic_block_hashtable block_hashtable;$/;"	m	struct:btrfsic_state	typeref:struct:btrfsic_block_hashtable	file:
block_len	extent_map.h	/^	u64 block_len;$/;"	m	struct:extent_map	typeref:typename:u64
block_len	inode.c	/^	u64 block_len;$/;"	m	struct:btrfs_swap_info	typeref:typename:u64	file:
block_link_hashtable	check-integrity.c	/^	struct btrfsic_block_link_hashtable block_link_hashtable;$/;"	m	struct:btrfsic_state	typeref:struct:btrfsic_block_link_hashtable	file:
block_ref_from	check-integrity.c	/^	struct btrfsic_block *block_ref_from;$/;"	m	struct:btrfsic_block_link	typeref:struct:btrfsic_block *	file:
block_ref_to	check-integrity.c	/^	struct btrfsic_block *block_ref_to;$/;"	m	struct:btrfsic_block_link	typeref:struct:btrfsic_block *	file:
block_rsv	btrfs_inode.h	/^	struct btrfs_block_rsv block_rsv;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_block_rsv
block_rsv	ctree.h	/^	struct btrfs_block_rsv *block_rsv;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_block_rsv *
block_rsv	relocation.c	/^	struct btrfs_block_rsv *block_rsv;$/;"	m	struct:reloc_control	typeref:struct:btrfs_block_rsv *	file:
block_rsv	transaction.h	/^	struct btrfs_block_rsv *block_rsv;$/;"	m	struct:btrfs_trans_handle	typeref:struct:btrfs_block_rsv *
block_rsv	transaction.h	/^	struct btrfs_block_rsv block_rsv;$/;"	m	struct:btrfs_pending_snapshot	typeref:struct:btrfs_block_rsv
block_rsv_release_bytes	block-rsv.c	/^static u64 block_rsv_release_bytes(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:u64	file:
block_start	extent_map.h	/^	u64 block_start;$/;"	m	struct:extent_map	typeref:typename:u64
block_start	inode.c	/^	u64 block_start;$/;"	m	struct:btrfs_swap_info	typeref:typename:u64	file:
block_tree	fs.h	/^	struct rb_root block_tree;$/;"	m	struct:btrfs_fs_info	typeref:struct:rb_root
blockptr	tree-mod-log.c	/^	u64 blockptr;$/;"	m	struct:tree_mod_elem	typeref:typename:u64	file:
blocks	ctree.h	/^	struct rb_root blocks[BTRFS_MAX_LEVEL];$/;"	m	struct:btrfs_qgroup_swapped_blocks	typeref:struct:rb_root[]
boundary	relocation.c	/^	u64 boundary[MAX_EXTENTS];$/;"	m	struct:file_extent_cluster	typeref:typename:u64[]	file:
btree_aops	disk-io.c	/^static const struct address_space_operations btree_aops = {$/;"	v	typeref:typename:const struct address_space_operations	file:
btree_clear_page_dirty	extent_io.c	/^static void btree_clear_page_dirty(struct page *page)$/;"	f	typeref:typename:void	file:
btree_csum_one_bio	disk-io.c	/^blk_status_t btree_csum_one_bio(struct btrfs_bio *bbio)$/;"	f	typeref:typename:blk_status_t
btree_dirty_folio	disk-io.c	/^#define btree_dirty_folio /;"	d	file:
btree_dirty_folio	disk-io.c	/^static bool btree_dirty_folio(struct address_space *mapping,$/;"	f	typeref:typename:bool	file:
btree_inode	fs.h	/^	struct inode *btree_inode;$/;"	m	struct:btrfs_fs_info	typeref:struct:inode *
btree_invalidate_folio	disk-io.c	/^static void btree_invalidate_folio(struct folio *folio, size_t offset,$/;"	f	typeref:typename:void	file:
btree_migrate_folio	disk-io.c	/^#define btree_migrate_folio /;"	d	file:
btree_migrate_folio	disk-io.c	/^static int btree_migrate_folio(struct address_space *mapping,$/;"	f	typeref:typename:int	file:
btree_release_folio	disk-io.c	/^static bool btree_release_folio(struct folio *folio, gfp_t gfp_flags)$/;"	f	typeref:typename:bool	file:
btree_write_cache_pages	extent_io.c	/^int btree_write_cache_pages(struct address_space *mapping,$/;"	f	typeref:typename:int
btree_writepages	disk-io.c	/^static int btree_writepages(struct address_space *mapping,$/;"	f	typeref:typename:int	file:
btrfs_abort_transaction	transaction.h	/^#define btrfs_abort_transaction(/;"	d
btrfs_account_ro_block_groups_free_space	space-info.c	/^u64 btrfs_account_ro_block_groups_free_space(struct btrfs_space_info *sinfo)$/;"	f	typeref:typename:u64
btrfs_add_bg_to_space_info	space-info.c	/^void btrfs_add_bg_to_space_info(struct btrfs_fs_info *info,$/;"	f	typeref:typename:void
btrfs_add_block_group_cache	block-group.c	/^static int btrfs_add_block_group_cache(struct btrfs_fs_info *info,$/;"	f	typeref:typename:int	file:
btrfs_add_compressed_bio_pages	compression.c	/^static void btrfs_add_compressed_bio_pages(struct compressed_bio *cb)$/;"	f	typeref:typename:void	file:
btrfs_add_dead_root	transaction.c	/^void btrfs_add_dead_root(struct btrfs_root *root)$/;"	f	typeref:typename:void
btrfs_add_delalloc_inodes	inode.c	/^static void btrfs_add_delalloc_inodes(struct btrfs_root *root,$/;"	f	typeref:typename:void	file:
btrfs_add_delayed_data_ref	delayed-ref.c	/^int btrfs_add_delayed_data_ref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_add_delayed_extent_op	delayed-ref.c	/^int btrfs_add_delayed_extent_op(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_add_delayed_iput	inode.c	/^void btrfs_add_delayed_iput(struct btrfs_inode *inode)$/;"	f	typeref:typename:void
btrfs_add_delayed_tree_ref	delayed-ref.c	/^int btrfs_add_delayed_tree_ref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_add_dev_item	volumes.c	/^static int btrfs_add_dev_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_add_dropped_root	transaction.c	/^void btrfs_add_dropped_root(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void
btrfs_add_extent_mapping	extent_map.c	/^int btrfs_add_extent_mapping(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_add_free_space	free-space-cache.c	/^int btrfs_add_free_space(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int
btrfs_add_free_space_async_trimmed	free-space-cache.c	/^int btrfs_add_free_space_async_trimmed(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int
btrfs_add_free_space_unused	free-space-cache.c	/^int btrfs_add_free_space_unused(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int
btrfs_add_inode_defrag	defrag.c	/^int btrfs_add_inode_defrag(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_add_link	inode.c	/^int btrfs_add_link(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_add_log_tree	disk-io.c	/^int btrfs_add_log_tree(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_add_new_free_space	block-group.c	/^int btrfs_add_new_free_space(struct btrfs_block_group *block_group, u64 start,$/;"	f	typeref:typename:int
btrfs_add_ordered_sum	ordered-data.c	/^void btrfs_add_ordered_sum(struct btrfs_ordered_extent *entry,$/;"	f	typeref:typename:void
btrfs_add_qgroup_relation	qgroup.c	/^int btrfs_add_qgroup_relation(struct btrfs_trans_handle *trans, u64 src,$/;"	f	typeref:typename:int
btrfs_add_reserved_bytes	block-group.c	/^int btrfs_add_reserved_bytes(struct btrfs_block_group *cache,$/;"	f	typeref:typename:int
btrfs_add_root_ref	root-tree.c	/^int btrfs_add_root_ref(struct btrfs_trans_handle *trans, u64 root_id,$/;"	f	typeref:typename:int
btrfs_add_swap_extent	inode.c	/^static int btrfs_add_swap_extent(struct swap_info_struct *sis,$/;"	f	typeref:typename:int	file:
btrfs_add_swapfile_pin	inode.c	/^static int btrfs_add_swapfile_pin(struct inode *inode, void *ptr,$/;"	f	typeref:typename:int	file:
btrfs_add_system_chunk	volumes.c	/^static int btrfs_add_system_chunk(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
btrfs_advance_sb_log	zoned.c	/^int btrfs_advance_sb_log(struct btrfs_device *device, int mirror)$/;"	f	typeref:typename:int
btrfs_advance_sb_log	zoned.h	/^static inline int btrfs_advance_sb_log(struct btrfs_device *device, int mirror)$/;"	f	typeref:typename:int
btrfs_alert	messages.h	/^#define btrfs_alert(/;"	d
btrfs_alert_in_rcu	messages.h	/^#define btrfs_alert_in_rcu(/;"	d
btrfs_alert_rl	messages.h	/^#define btrfs_alert_rl(/;"	d
btrfs_alert_rl_in_rcu	messages.h	/^#define btrfs_alert_rl_in_rcu(/;"	d
btrfs_alloc_backref_share_check_ctx	backref.c	/^struct btrfs_backref_share_check_ctx *btrfs_alloc_backref_share_check_ctx(void)$/;"	f	typeref:struct:btrfs_backref_share_check_ctx *
btrfs_alloc_block_rsv	block-rsv.c	/^struct btrfs_block_rsv *btrfs_alloc_block_rsv(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_block_rsv *
btrfs_alloc_data_chunk_ondemand	delalloc-space.c	/^int btrfs_alloc_data_chunk_ondemand(struct btrfs_inode *inode, u64 bytes)$/;"	f	typeref:typename:int
btrfs_alloc_delalloc_work	inode.c	/^static struct btrfs_delalloc_work *btrfs_alloc_delalloc_work(struct inode *inode)$/;"	f	typeref:struct:btrfs_delalloc_work *	file:
btrfs_alloc_delayed_extent_op	delayed-ref.h	/^btrfs_alloc_delayed_extent_op(void)$/;"	f	typeref:struct:btrfs_delayed_extent_op *
btrfs_alloc_delayed_item	delayed-inode.c	/^static struct btrfs_delayed_item *btrfs_alloc_delayed_item(u16 data_len,$/;"	f	typeref:struct:btrfs_delayed_item *	file:
btrfs_alloc_device	volumes.c	/^struct btrfs_device *btrfs_alloc_device(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_device *
btrfs_alloc_dummy_block_group	tests/btrfs-tests.c	/^btrfs_alloc_dummy_block_group(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_block_group *
btrfs_alloc_dummy_device	tests/btrfs-tests.c	/^struct btrfs_device *btrfs_alloc_dummy_device(struct btrfs_fs_info *fs_info)$/;"	f	typeref:struct:btrfs_device *
btrfs_alloc_dummy_fs_info	tests/btrfs-tests.c	/^struct btrfs_fs_info *btrfs_alloc_dummy_fs_info(u32 nodesize, u32 sectorsize)$/;"	f	typeref:struct:btrfs_fs_info *
btrfs_alloc_dummy_root	disk-io.c	/^struct btrfs_root *btrfs_alloc_dummy_root(struct btrfs_fs_info *fs_info)$/;"	f	typeref:struct:btrfs_root *
btrfs_alloc_dummy_sum	file-item.c	/^blk_status_t btrfs_alloc_dummy_sum(struct btrfs_bio *bbio)$/;"	f	typeref:typename:blk_status_t
btrfs_alloc_from_bitmap	free-space-cache.c	/^static u64 btrfs_alloc_from_bitmap(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:u64	file:
btrfs_alloc_from_cluster	free-space-cache.c	/^u64 btrfs_alloc_from_cluster(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:u64
btrfs_alloc_inode	inode.c	/^struct inode *btrfs_alloc_inode(struct super_block *sb)$/;"	f	typeref:struct:inode *
btrfs_alloc_log_tree_node	disk-io.c	/^int btrfs_alloc_log_tree_node(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_alloc_logged_file_extent	extent-tree.c	/^int btrfs_alloc_logged_file_extent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_alloc_ordered_extent	ordered-data.c	/^struct btrfs_ordered_extent *btrfs_alloc_ordered_extent($/;"	f	typeref:struct:btrfs_ordered_extent *
btrfs_alloc_ordered_workqueue	async-thread.c	/^struct btrfs_workqueue *btrfs_alloc_ordered_workqueue($/;"	f	typeref:struct:btrfs_workqueue *
btrfs_alloc_page_array	extent_io.c	/^int btrfs_alloc_page_array(unsigned int nr_pages, struct page **page_array)$/;"	f	typeref:typename:int
btrfs_alloc_path	ctree.c	/^struct btrfs_path *btrfs_alloc_path(void)$/;"	f	typeref:struct:btrfs_path *
btrfs_alloc_reserved_file_extent	extent-tree.c	/^int btrfs_alloc_reserved_file_extent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_alloc_root	disk-io.c	/^static struct btrfs_root *btrfs_alloc_root(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_root *	file:
btrfs_alloc_stripe_hash_table	raid56.c	/^int btrfs_alloc_stripe_hash_table(struct btrfs_fs_info *info)$/;"	f	typeref:typename:int
btrfs_alloc_subpage	subpage.c	/^struct btrfs_subpage *btrfs_alloc_subpage(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_subpage *
btrfs_alloc_tree_block	extent-tree.c	/^struct extent_buffer *btrfs_alloc_tree_block(struct btrfs_trans_handle *trans,$/;"	f	typeref:struct:extent_buffer *
btrfs_alloc_workqueue	async-thread.c	/^struct btrfs_workqueue *btrfs_alloc_workqueue(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_workqueue *
btrfs_alloc_write_mask	ctree.h	/^static inline gfp_t btrfs_alloc_write_mask(struct address_space *mapping)$/;"	f	typeref:typename:gfp_t
btrfs_aops	inode.c	/^static const struct address_space_operations btrfs_aops = {$/;"	v	typeref:typename:const struct address_space_operations	file:
btrfs_aops	inode.c	/^static const struct address_space_operations btrfs_aops;$/;"	v	typeref:typename:const struct address_space_operations	file:
btrfs_assert_delayed_root_empty	delayed-inode.c	/^void btrfs_assert_delayed_root_empty(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_assert_inode_range_clean	inode.c	/^void btrfs_assert_inode_range_clean(struct btrfs_inode *inode, u64 start, u64 end)$/;"	f	typeref:typename:void
btrfs_assert_tree_write_locked	locking.h	/^static inline void btrfs_assert_tree_write_locked(struct extent_buffer *eb) { }$/;"	f	typeref:typename:void
btrfs_assert_tree_write_locked	locking.h	/^static inline void btrfs_assert_tree_write_locked(struct extent_buffer *eb)$/;"	f	typeref:typename:void
btrfs_assertfail	messages.h	/^#define btrfs_assertfail(/;"	d
btrfs_assign_next_active_device	volumes.c	/^void __cold btrfs_assign_next_active_device(struct btrfs_device *device,$/;"	f	typeref:typename:void __cold
btrfs_async_delayed_work	delayed-inode.c	/^struct btrfs_async_delayed_work {$/;"	s	file:
btrfs_async_reclaim_data_space	space-info.c	/^static void btrfs_async_reclaim_data_space(struct work_struct *work)$/;"	f	typeref:typename:void	file:
btrfs_async_reclaim_metadata_space	space-info.c	/^static void btrfs_async_reclaim_metadata_space(struct work_struct *work)$/;"	f	typeref:typename:void	file:
btrfs_async_run_delayed_root	delayed-inode.c	/^static void btrfs_async_run_delayed_root(struct btrfs_work *work)$/;"	f	typeref:typename:void	file:
btrfs_attach_subpage	subpage.c	/^int btrfs_attach_subpage(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_attach_transaction	transaction.c	/^struct btrfs_trans_handle *btrfs_attach_transaction(struct btrfs_root *root)$/;"	f	typeref:struct:btrfs_trans_handle *
btrfs_attach_transaction_barrier	transaction.c	/^btrfs_attach_transaction_barrier(struct btrfs_root *root)$/;"	f	typeref:struct:btrfs_trans_handle *
btrfs_attrs	sysfs.c	/^static const struct attribute *btrfs_attrs[] = {$/;"	v	typeref:typename:const struct attribute * []	file:
btrfs_auto_defrag_exit	defrag.c	/^void __cold btrfs_auto_defrag_exit(void)$/;"	f	typeref:typename:void __cold
btrfs_auto_defrag_init	defrag.c	/^int __init btrfs_auto_defrag_init(void)$/;"	f	typeref:typename:int __init
btrfs_backref_add_tree_node	backref.c	/^int btrfs_backref_add_tree_node(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_backref_alloc_edge	backref.c	/^struct btrfs_backref_edge *btrfs_backref_alloc_edge($/;"	f	typeref:struct:btrfs_backref_edge *
btrfs_backref_alloc_node	backref.c	/^struct btrfs_backref_node *btrfs_backref_alloc_node($/;"	f	typeref:struct:btrfs_backref_node *
btrfs_backref_cache	backref.h	/^struct btrfs_backref_cache {$/;"	s
btrfs_backref_cleanup_node	backref.c	/^void btrfs_backref_cleanup_node(struct btrfs_backref_cache *cache,$/;"	f	typeref:typename:void
btrfs_backref_drop_node	backref.h	/^static inline void btrfs_backref_drop_node(struct btrfs_backref_cache *tree,$/;"	f	typeref:typename:void
btrfs_backref_drop_node_buffer	backref.h	/^static inline void btrfs_backref_drop_node_buffer($/;"	f	typeref:typename:void
btrfs_backref_edge	backref.h	/^struct btrfs_backref_edge {$/;"	s
btrfs_backref_error_cleanup	backref.c	/^void btrfs_backref_error_cleanup(struct btrfs_backref_cache *cache,$/;"	f	typeref:typename:void
btrfs_backref_finish_upper_links	backref.c	/^int btrfs_backref_finish_upper_links(struct btrfs_backref_cache *cache,$/;"	f	typeref:typename:int
btrfs_backref_free_edge	backref.h	/^static inline void btrfs_backref_free_edge(struct btrfs_backref_cache *cache,$/;"	f	typeref:typename:void
btrfs_backref_free_node	backref.h	/^static inline void btrfs_backref_free_node(struct btrfs_backref_cache *cache,$/;"	f	typeref:typename:void
btrfs_backref_get_eb	backref.h	/^static inline struct extent_buffer *btrfs_backref_get_eb($/;"	f	typeref:struct:extent_buffer *
btrfs_backref_has_tree_block_info	backref.h	/^static inline bool btrfs_backref_has_tree_block_info($/;"	f	typeref:typename:bool
btrfs_backref_init_cache	backref.c	/^void btrfs_backref_init_cache(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_backref_iter	backref.h	/^struct btrfs_backref_iter {$/;"	s
btrfs_backref_iter_alloc	backref.c	/^struct btrfs_backref_iter *btrfs_backref_iter_alloc(struct btrfs_fs_info *fs_info)$/;"	f	typeref:struct:btrfs_backref_iter *
btrfs_backref_iter_free	backref.h	/^static inline void btrfs_backref_iter_free(struct btrfs_backref_iter *iter)$/;"	f	typeref:typename:void
btrfs_backref_iter_is_inline_ref	backref.h	/^static inline bool btrfs_backref_iter_is_inline_ref($/;"	f	typeref:typename:bool
btrfs_backref_iter_next	backref.c	/^int btrfs_backref_iter_next(struct btrfs_backref_iter *iter)$/;"	f	typeref:typename:int
btrfs_backref_iter_release	backref.h	/^static inline void btrfs_backref_iter_release(struct btrfs_backref_iter *iter)$/;"	f	typeref:typename:void
btrfs_backref_iter_start	backref.c	/^int btrfs_backref_iter_start(struct btrfs_backref_iter *iter, u64 bytenr)$/;"	f	typeref:typename:int
btrfs_backref_link_edge	backref.h	/^static inline void btrfs_backref_link_edge(struct btrfs_backref_edge *edge,$/;"	f	typeref:typename:void
btrfs_backref_node	backref.h	/^struct btrfs_backref_node {$/;"	s
btrfs_backref_panic	backref.h	/^static inline void btrfs_backref_panic(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_backref_release_cache	backref.c	/^void btrfs_backref_release_cache(struct btrfs_backref_cache *cache)$/;"	f	typeref:typename:void
btrfs_backref_share_check_ctx	backref.h	/^struct btrfs_backref_share_check_ctx {$/;"	s
btrfs_backref_shared_cache_entry	backref.h	/^struct btrfs_backref_shared_cache_entry {$/;"	s
btrfs_backref_unlock_node_buffer	backref.h	/^static inline void btrfs_backref_unlock_node_buffer($/;"	f	typeref:typename:void
btrfs_backref_walk_ctx	backref.h	/^struct btrfs_backref_walk_ctx {$/;"	s
btrfs_balance	volumes.c	/^int btrfs_balance(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_balance_control	volumes.h	/^struct btrfs_balance_control {$/;"	s
btrfs_balance_data	accessors.h	/^static inline void btrfs_balance_data(const struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_balance_delayed_items	delayed-inode.c	/^void btrfs_balance_delayed_items(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_balance_meta	accessors.h	/^static inline void btrfs_balance_meta(const struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_balance_sys	accessors.h	/^static inline void btrfs_balance_sys(const struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_batch_delete_items	delayed-inode.c	/^static int btrfs_batch_delete_items(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_bbio_propagate_error	bio.c	/^static void btrfs_bbio_propagate_error(struct btrfs_bio *bbio,$/;"	f	typeref:typename:void	file:
btrfs_begin_enable_verity	verity.c	/^static int btrfs_begin_enable_verity(struct file *filp)$/;"	f	typeref:typename:int	file:
btrfs_bg_flags_to_raid_index	volumes.c	/^enum btrfs_raid_types __attribute_const__ btrfs_bg_flags_to_raid_index(u64 flags)$/;"	f	typeref:enum:btrfs_raid_types __attribute_const__
btrfs_bg_reclaim_threshold_show	sysfs.c	/^static ssize_t btrfs_bg_reclaim_threshold_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_bg_reclaim_threshold_store	sysfs.c	/^static ssize_t btrfs_bg_reclaim_threshold_store(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_bg_type_to_factor	volumes.c	/^int btrfs_bg_type_to_factor(u64 flags)$/;"	f	typeref:typename:int
btrfs_bg_type_to_raid_name	volumes.c	/^const char *btrfs_bg_type_to_raid_name(u64 flags)$/;"	f	typeref:typename:const char *
btrfs_bin_search	ctree.c	/^int btrfs_bin_search(struct extent_buffer *eb, int first_slot,$/;"	f	typeref:typename:int
btrfs_bio	bio.h	/^static inline struct btrfs_bio *btrfs_bio(struct bio *bio)$/;"	f	typeref:struct:btrfs_bio *
btrfs_bio	bio.h	/^struct btrfs_bio {$/;"	s
btrfs_bio_alloc	bio.c	/^struct btrfs_bio *btrfs_bio_alloc(unsigned int nr_vecs, blk_opf_t opf,$/;"	f	typeref:struct:btrfs_bio *
btrfs_bio_counter_dec	dev-replace.h	/^static inline void btrfs_bio_counter_dec(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_bio_counter_inc_blocked	dev-replace.c	/^void btrfs_bio_counter_inc_blocked(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_bio_counter_sub	dev-replace.c	/^void btrfs_bio_counter_sub(struct btrfs_fs_info *fs_info, s64 amount)$/;"	f	typeref:typename:void
btrfs_bio_csum	bio.c	/^static blk_status_t btrfs_bio_csum(struct btrfs_bio *bbio)$/;"	f	typeref:typename:blk_status_t	file:
btrfs_bio_ctrl	extent_io.c	/^struct btrfs_bio_ctrl {$/;"	s	file:
btrfs_bio_end_io	bio.c	/^void btrfs_bio_end_io(struct btrfs_bio *bbio, blk_status_t status)$/;"	f	typeref:typename:void
btrfs_bio_end_io_t	bio.h	/^typedef void (*btrfs_bio_end_io_t)(struct btrfs_bio *bbio);$/;"	t	typeref:typename:void (*)(struct btrfs_bio * bbio)
btrfs_bio_init	bio.c	/^void btrfs_bio_init(struct btrfs_bio *bbio, struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_bio_is_contig	extent_io.c	/^static bool btrfs_bio_is_contig(struct btrfs_bio_ctrl *bio_ctrl,$/;"	f	typeref:typename:bool	file:
btrfs_bioset	bio.c	/^static struct bio_set btrfs_bioset;$/;"	v	typeref:struct:bio_set	file:
btrfs_bioset_exit	bio.c	/^void __cold btrfs_bioset_exit(void)$/;"	f	typeref:typename:void __cold
btrfs_bioset_init	bio.c	/^int __init btrfs_bioset_init(void)$/;"	f	typeref:typename:int __init
btrfs_bitmap_cluster	free-space-cache.c	/^static int btrfs_bitmap_cluster(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int	file:
btrfs_block_can_be_shared	ctree.c	/^int btrfs_block_can_be_shared(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_block_group	block-group.h	/^struct btrfs_block_group {$/;"	s
btrfs_block_group_done	block-group.h	/^static inline int btrfs_block_group_done(struct btrfs_block_group *cache)$/;"	f	typeref:typename:int
btrfs_block_group_end	block-group.h	/^static inline u64 btrfs_block_group_end(struct btrfs_block_group *block_group)$/;"	f	typeref:typename:u64
btrfs_block_group_flags	block-group.h	/^enum btrfs_block_group_flags {$/;"	g
btrfs_block_group_root	disk-io.c	/^struct btrfs_root *btrfs_block_group_root(struct btrfs_fs_info *fs_info)$/;"	f	typeref:struct:btrfs_root *
btrfs_block_group_should_use_size_class	block-group.c	/^bool btrfs_block_group_should_use_size_class(struct btrfs_block_group *bg)$/;"	f	typeref:typename:bool
btrfs_block_group_size_class	block-group.h	/^enum btrfs_block_group_size_class {$/;"	g
btrfs_block_rsv	block-rsv.h	/^struct btrfs_block_rsv {$/;"	s
btrfs_block_rsv_add	block-rsv.c	/^int btrfs_block_rsv_add(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_block_rsv_add_bytes	block-rsv.c	/^void btrfs_block_rsv_add_bytes(struct btrfs_block_rsv *block_rsv,$/;"	f	typeref:typename:void
btrfs_block_rsv_check	block-rsv.c	/^int btrfs_block_rsv_check(struct btrfs_block_rsv *block_rsv, int min_percent)$/;"	f	typeref:typename:int
btrfs_block_rsv_full	block-rsv.h	/^static inline bool btrfs_block_rsv_full(const struct btrfs_block_rsv *rsv)$/;"	f	typeref:typename:bool
btrfs_block_rsv_migrate	block-rsv.c	/^int btrfs_block_rsv_migrate(struct btrfs_block_rsv *src,$/;"	f	typeref:typename:int
btrfs_block_rsv_refill	block-rsv.c	/^int btrfs_block_rsv_refill(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_block_rsv_release	block-rsv.c	/^u64 btrfs_block_rsv_release(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:u64
btrfs_block_rsv_use_bytes	block-rsv.c	/^int btrfs_block_rsv_use_bytes(struct btrfs_block_rsv *block_rsv, u64 num_bytes)$/;"	f	typeref:typename:int
btrfs_blocked_trans_types	transaction.c	/^static const unsigned int btrfs_blocked_trans_types[TRANS_STATE_MAX] = {$/;"	v	typeref:typename:const unsigned int[]	file:
btrfs_btree_balance_dirty	disk-io.c	/^void btrfs_btree_balance_dirty(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_btree_balance_dirty_nodelay	disk-io.c	/^void btrfs_btree_balance_dirty_nodelay(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_btrfs_xattr_handler	xattr.c	/^static const struct xattr_handler btrfs_btrfs_xattr_handler = {$/;"	v	typeref:typename:const struct xattr_handler	file:
btrfs_buffer_uptodate	disk-io.c	/^int btrfs_buffer_uptodate(struct extent_buffer *eb, u64 parent_transid, int atomic)$/;"	f	typeref:typename:int
btrfs_buffered_write	file.c	/^static noinline ssize_t btrfs_buffered_write(struct kiocb *iocb,$/;"	f	typeref:typename:noinline ssize_t	file:
btrfs_build_ref_tree	ref-verify.c	/^int btrfs_build_ref_tree(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_build_ref_tree	ref-verify.h	/^static inline int btrfs_build_ref_tree(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_cache_block_group	block-group.c	/^int btrfs_cache_block_group(struct btrfs_block_group *cache, bool wait)$/;"	f	typeref:typename:int
btrfs_caching_control	block-group.h	/^struct btrfs_caching_control {$/;"	s
btrfs_caching_ctl_wait_done	block-group.c	/^static int btrfs_caching_ctl_wait_done(struct btrfs_block_group *cache,$/;"	f	typeref:typename:int	file:
btrfs_caching_type	block-group.h	/^enum btrfs_caching_type {$/;"	g
btrfs_calc_avail_data_space	super.c	/^static inline int btrfs_calc_avail_data_space(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
btrfs_calc_block_group_size_class	block-group.c	/^enum btrfs_block_group_size_class btrfs_calc_block_group_size_class(u64 size)$/;"	f	typeref:enum:btrfs_block_group_size_class
btrfs_calc_delayed_ref_bytes	delayed-ref.h	/^static inline u64 btrfs_calc_delayed_ref_bytes(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:u64
btrfs_calc_insert_metadata_size	fs.h	/^static inline u64 btrfs_calc_insert_metadata_size(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:u64
btrfs_calc_metadata_size	fs.h	/^static inline u64 btrfs_calc_metadata_size(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:u64
btrfs_calc_reclaim_metadata_size	space-info.c	/^btrfs_calc_reclaim_metadata_size(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:u64	file:
btrfs_calc_stripe_length	volumes.c	/^u64 btrfs_calc_stripe_length(const struct extent_map *em)$/;"	f	typeref:typename:u64
btrfs_calc_zone_unusable	zoned.c	/^void btrfs_calc_zone_unusable(struct btrfs_block_group *cache)$/;"	f	typeref:typename:void
btrfs_calc_zone_unusable	zoned.h	/^static inline void btrfs_calc_zone_unusable(struct btrfs_block_group *cache) { }$/;"	f	typeref:typename:void
btrfs_calculate_inode_block_rsv_size	delalloc-space.c	/^static void btrfs_calculate_inode_block_rsv_size(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
btrfs_can_activate_zone	zoned.c	/^bool btrfs_can_activate_zone(struct btrfs_fs_devices *fs_devices, u64 flags)$/;"	f	typeref:typename:bool
btrfs_can_activate_zone	zoned.h	/^static inline bool btrfs_can_activate_zone(struct btrfs_fs_devices *fs_devices,$/;"	f	typeref:typename:bool
btrfs_can_overcommit	space-info.c	/^int btrfs_can_overcommit(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_can_zone_reset	zoned.h	/^static inline bool btrfs_can_zone_reset(struct btrfs_device *device,$/;"	f	typeref:typename:bool
btrfs_cancel_balance	volumes.c	/^int btrfs_cancel_balance(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_check_active_zone_reservation	zoned.c	/^void btrfs_check_active_zone_reservation(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_check_active_zone_reservation	zoned.h	/^static inline void btrfs_check_active_zone_reservation(struct btrfs_fs_info *fs_info) { }$/;"	f	typeref:typename:void
btrfs_check_and_init_root_item	root-tree.c	/^void btrfs_check_and_init_root_item(struct btrfs_root_item *root_item)$/;"	f	typeref:typename:void
btrfs_check_chunk_valid	tree-checker.c	/^int btrfs_check_chunk_valid(struct extent_buffer *leaf,$/;"	f	typeref:typename:int
btrfs_check_data_free_space	delalloc-space.c	/^int btrfs_check_data_free_space(struct btrfs_inode *inode,$/;"	f	typeref:typename:int
btrfs_check_delayed_seq	delayed-ref.c	/^int btrfs_check_delayed_seq(struct btrfs_fs_info *fs_info, u64 seq)$/;"	f	typeref:typename:int
btrfs_check_device_zone_type	zoned.h	/^static inline bool btrfs_check_device_zone_type(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:bool
btrfs_check_dir_item_collision	dir-item.c	/^int btrfs_check_dir_item_collision(struct btrfs_root *root, u64 dir,$/;"	f	typeref:typename:int
btrfs_check_eb_owner	tree-checker.c	/^int btrfs_check_eb_owner(const struct extent_buffer *eb, u64 root_owner)$/;"	f	typeref:typename:int
btrfs_check_features	disk-io.c	/^int btrfs_check_features(struct btrfs_fs_info *fs_info, bool is_rw_mount)$/;"	f	typeref:typename:int
btrfs_check_for_zoned_device	zoned.c	/^static int btrfs_check_for_zoned_device(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int	file:
btrfs_check_leaf	tree-checker.c	/^int btrfs_check_leaf(struct extent_buffer *leaf)$/;"	f	typeref:typename:int
btrfs_check_leaked_roots	disk-io.c	/^void btrfs_check_leaked_roots(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_check_meta_write_pointer	zoned.c	/^int btrfs_check_meta_write_pointer(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_check_meta_write_pointer	zoned.h	/^static inline int btrfs_check_meta_write_pointer(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_check_mountopts_zoned	zoned.c	/^int btrfs_check_mountopts_zoned(struct btrfs_fs_info *info)$/;"	f	typeref:typename:int
btrfs_check_mountopts_zoned	zoned.h	/^static inline int btrfs_check_mountopts_zoned(struct btrfs_fs_info *info)$/;"	f	typeref:typename:int
btrfs_check_nocow_lock	file.c	/^int btrfs_check_nocow_lock(struct btrfs_inode *inode, loff_t pos,$/;"	f	typeref:typename:int
btrfs_check_nocow_unlock	file.c	/^void btrfs_check_nocow_unlock(struct btrfs_inode *inode)$/;"	f	typeref:typename:void
btrfs_check_node	tree-checker.c	/^int btrfs_check_node(struct extent_buffer *node)$/;"	f	typeref:typename:int
btrfs_check_quota_leak	qgroup.c	/^bool btrfs_check_quota_leak(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:bool
btrfs_check_raid_min_devices	volumes.c	/^static int btrfs_check_raid_min_devices(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
btrfs_check_read_bio	bio.c	/^static void btrfs_check_read_bio(struct btrfs_bio *bbio, struct btrfs_device *dev)$/;"	f	typeref:typename:void	file:
btrfs_check_ref_name_override	tree-log.c	/^static int btrfs_check_ref_name_override(struct extent_buffer *eb,$/;"	f	typeref:typename:int	file:
btrfs_check_rw_degradable	volumes.c	/^bool btrfs_check_rw_degradable(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:bool
btrfs_check_sector_csum	inode.c	/^int btrfs_check_sector_csum(struct btrfs_fs_info *fs_info, struct page *page,$/;"	f	typeref:typename:int
btrfs_check_space_for_delayed_refs	delayed-ref.c	/^bool btrfs_check_space_for_delayed_refs(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:bool
btrfs_check_super_csum	disk-io.c	/^int btrfs_check_super_csum(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_check_super_location	zoned.h	/^static inline bool btrfs_check_super_location(struct btrfs_device *device, u64 pos)$/;"	f	typeref:typename:bool
btrfs_check_trunc_cache_free_space	block-rsv.c	/^int btrfs_check_trunc_cache_free_space(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_check_uuid_tree	disk-io.c	/^static int btrfs_check_uuid_tree(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int	file:
btrfs_check_uuid_tree_entry	uuid-tree.c	/^static int btrfs_check_uuid_tree_entry(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
btrfs_check_zoned_mode	zoned.c	/^int btrfs_check_zoned_mode(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_check_zoned_mode	zoned.h	/^static inline int btrfs_check_zoned_mode(const struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_checksum_show	sysfs.c	/^static ssize_t btrfs_checksum_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_chunk_alloc	block-group.c	/^int btrfs_chunk_alloc(struct btrfs_trans_handle *trans, u64 flags,$/;"	f	typeref:typename:int
btrfs_chunk_alloc_add_chunk_item	volumes.c	/^int btrfs_chunk_alloc_add_chunk_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_chunk_alloc_enum	block-group.h	/^enum btrfs_chunk_alloc_enum {$/;"	g
btrfs_chunk_allocation_policy	volumes.h	/^enum btrfs_chunk_allocation_policy {$/;"	g
btrfs_chunk_item_size	volumes.h	/^static inline unsigned long btrfs_chunk_item_size(int num_stripes)$/;"	f	typeref:typename:unsigned long
btrfs_chunk_max_errors	volumes.c	/^static inline int btrfs_chunk_max_errors(struct map_lookup *map)$/;"	f	typeref:typename:int	file:
btrfs_chunk_size_show	sysfs.c	/^static ssize_t btrfs_chunk_size_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_chunk_size_store	sysfs.c	/^static ssize_t btrfs_chunk_size_store(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_chunk_writeable	volumes.c	/^bool btrfs_chunk_writeable(struct btrfs_fs_info *fs_info, u64 chunk_offset)$/;"	f	typeref:typename:bool
btrfs_clean_one_deleted_snapshot	transaction.c	/^int btrfs_clean_one_deleted_snapshot(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_clean_quota_tree	qgroup.c	/^static int btrfs_clean_quota_tree(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_cleanup_bg_io	disk-io.c	/^static void btrfs_cleanup_bg_io(struct btrfs_block_group *cache)$/;"	f	typeref:typename:void	file:
btrfs_cleanup_bio	bio.c	/^static void btrfs_cleanup_bio(struct btrfs_bio *bbio)$/;"	f	typeref:typename:void	file:
btrfs_cleanup_defrag_inodes	defrag.c	/^void btrfs_cleanup_defrag_inodes(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_cleanup_dirty_bgs	disk-io.c	/^void btrfs_cleanup_dirty_bgs(struct btrfs_transaction *cur_trans,$/;"	f	typeref:typename:void
btrfs_cleanup_fs_roots	disk-io.c	/^static int btrfs_cleanup_fs_roots(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int	file:
btrfs_cleanup_fs_uuids	volumes.c	/^void __exit btrfs_cleanup_fs_uuids(void)$/;"	f	typeref:typename:void __exit
btrfs_cleanup_one_transaction	disk-io.c	/^void btrfs_cleanup_one_transaction(struct btrfs_transaction *cur_trans,$/;"	f	typeref:typename:void
btrfs_cleanup_ordered_extents	inode.c	/^static inline void btrfs_cleanup_ordered_extents(struct btrfs_inode *inode,$/;"	f	typeref:typename:void	file:
btrfs_cleanup_pending_block_groups	transaction.c	/^static void btrfs_cleanup_pending_block_groups(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:void	file:
btrfs_cleanup_ref_head_accounting	extent-tree.c	/^void btrfs_cleanup_ref_head_accounting(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_cleanup_transaction	disk-io.c	/^static int btrfs_cleanup_transaction(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int	file:
btrfs_cleanup_workspace_manager	compression.c	/^static void btrfs_cleanup_workspace_manager(int type)$/;"	f	typeref:typename:void	file:
btrfs_clear_and_info	fs.h	/^#define btrfs_clear_and_info(/;"	d
btrfs_clear_buffer_dirty	extent_io.c	/^void btrfs_clear_buffer_dirty(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void
btrfs_clear_data_reloc_bg	zoned.c	/^void btrfs_clear_data_reloc_bg(struct btrfs_block_group *bg)$/;"	f	typeref:typename:void
btrfs_clear_data_reloc_bg	zoned.h	/^static inline void btrfs_clear_data_reloc_bg(struct btrfs_block_group *bg) { }$/;"	f	typeref:typename:void
btrfs_clear_delalloc_extent	inode.c	/^void btrfs_clear_delalloc_extent(struct btrfs_inode *inode,$/;"	f	typeref:typename:void
btrfs_clear_fs_compat_ro	fs.h	/^#define btrfs_clear_fs_compat_ro(/;"	d
btrfs_clear_fs_incompat	fs.h	/^#define btrfs_clear_fs_incompat(/;"	d
btrfs_clear_header_flag	accessors.h	/^static inline void btrfs_clear_header_flag(struct extent_buffer *eb, u64 flag)$/;"	f	typeref:typename:void
btrfs_clear_oneshot_options	disk-io.c	/^void btrfs_clear_oneshot_options(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_clear_opt	fs.h	/^#define btrfs_clear_opt(/;"	d
btrfs_clear_rbio_cache	raid56.c	/^static void btrfs_clear_rbio_cache(struct btrfs_fs_info *info)$/;"	f	typeref:typename:void	file:
btrfs_clear_sb_rdonly	super.h	/^static inline void btrfs_clear_sb_rdonly(struct super_block *sb)$/;"	f	typeref:typename:void
btrfs_clear_skip_qgroup	transaction.h	/^static inline void btrfs_clear_skip_qgroup(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:void
btrfs_clear_space_info_full	space-info.c	/^void btrfs_clear_space_info_full(struct btrfs_fs_info *info)$/;"	f	typeref:typename:void
btrfs_clear_treelog_bg	zoned.h	/^static inline void btrfs_clear_treelog_bg(struct btrfs_block_group *bg)$/;"	f	typeref:typename:void
btrfs_clone	reflink.c	/^static int btrfs_clone(struct inode *src, struct inode *inode,$/;"	f	typeref:typename:int	file:
btrfs_clone_alignment_show	sysfs.c	/^static ssize_t btrfs_clone_alignment_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_clone_bioset	bio.c	/^static struct bio_set btrfs_clone_bioset;$/;"	v	typeref:struct:bio_set	file:
btrfs_clone_dev_zone_info	zoned.c	/^struct btrfs_zoned_device_info *btrfs_clone_dev_zone_info(struct btrfs_device *orig_dev)$/;"	f	typeref:struct:btrfs_zoned_device_info *
btrfs_clone_dev_zone_info	zoned.h	/^static inline struct btrfs_zoned_device_info *btrfs_clone_dev_zone_info($/;"	f	typeref:struct:btrfs_zoned_device_info *
btrfs_clone_extent_buffer	extent_io.c	/^struct extent_buffer *btrfs_clone_extent_buffer(const struct extent_buffer *src)$/;"	f	typeref:struct:extent_buffer *
btrfs_clone_files	reflink.c	/^static noinline int btrfs_clone_files(struct file *file, struct file *file_src,$/;"	f	typeref:typename:noinline int	file:
btrfs_clone_write_end_io	bio.c	/^static void btrfs_clone_write_end_io(struct bio *bio)$/;"	f	typeref:typename:void	file:
btrfs_close_bdev	volumes.c	/^static void btrfs_close_bdev(struct btrfs_device *device)$/;"	f	typeref:typename:void	file:
btrfs_close_devices	volumes.c	/^void btrfs_close_devices(struct btrfs_fs_devices *fs_devices)$/;"	f	typeref:typename:void
btrfs_close_one_device	volumes.c	/^static void btrfs_close_one_device(struct btrfs_device *device)$/;"	f	typeref:typename:void	file:
btrfs_cmd_header	send.h	/^struct btrfs_cmd_header {$/;"	s
btrfs_cmp_device_free_bytes	super.c	/^static int btrfs_cmp_device_free_bytes(const void *a, const void *b)$/;"	f	typeref:typename:int	file:
btrfs_cmp_device_info	volumes.c	/^static int btrfs_cmp_device_info(const void *a, const void *b)$/;"	f	typeref:typename:int	file:
btrfs_commit_device_sizes	volumes.c	/^void btrfs_commit_device_sizes(struct btrfs_transaction *trans)$/;"	f	typeref:typename:void
btrfs_commit_inode_delayed_inode	delayed-inode.c	/^int btrfs_commit_inode_delayed_inode(struct btrfs_inode *inode)$/;"	f	typeref:typename:int
btrfs_commit_inode_delayed_items	delayed-inode.c	/^int btrfs_commit_inode_delayed_items(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_commit_stats	fs.h	/^struct btrfs_commit_stats {$/;"	s
btrfs_commit_stats_show	sysfs.c	/^static ssize_t btrfs_commit_stats_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_commit_stats_store	sysfs.c	/^static ssize_t btrfs_commit_stats_store(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_commit_super	disk-io.c	/^int btrfs_commit_super(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_commit_transaction	transaction.c	/^int btrfs_commit_transaction(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:int
btrfs_commit_transaction_async	transaction.c	/^void btrfs_commit_transaction_async(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:void
btrfs_comp_cpu_keys	ctree.c	/^int __pure btrfs_comp_cpu_keys(const struct btrfs_key *k1, const struct btrfs_key *k2)$/;"	f	typeref:typename:int __pure
btrfs_compare_tree_result	send.c	/^enum btrfs_compare_tree_result {$/;"	g	file:
btrfs_compare_trees	send.c	/^static int btrfs_compare_trees(struct btrfs_root *left_root,$/;"	f	typeref:typename:int	file:
btrfs_compat_ioctl	ioctl.c	/^long btrfs_compat_ioctl(struct file *file, unsigned int cmd, unsigned long arg)$/;"	f	typeref:typename:long
btrfs_compress_heuristic	compression.c	/^int btrfs_compress_heuristic(struct inode *inode, u64 start, u64 end)$/;"	f	typeref:typename:int
btrfs_compress_is_valid_type	compression.c	/^bool btrfs_compress_is_valid_type(const char *str, size_t len)$/;"	f	typeref:typename:bool
btrfs_compress_level	compression.h	/^static inline unsigned int btrfs_compress_level(unsigned int type_level)$/;"	f	typeref:typename:unsigned int
btrfs_compress_op	compression.c	/^static const struct btrfs_compress_op * const btrfs_compress_op[] = {$/;"	v	typeref:typename:const struct btrfs_compress_op * const[]	file:
btrfs_compress_op	compression.h	/^struct btrfs_compress_op {$/;"	s
btrfs_compress_pages	compression.c	/^int btrfs_compress_pages(unsigned int type_level, struct address_space *mapping,$/;"	f	typeref:typename:int
btrfs_compress_set_level	compression.c	/^static unsigned int btrfs_compress_set_level(int type, unsigned level)$/;"	f	typeref:typename:unsigned int	file:
btrfs_compress_str2level	compression.c	/^unsigned int btrfs_compress_str2level(unsigned int type, const char *str)$/;"	f	typeref:typename:unsigned int
btrfs_compress_type	compression.h	/^static inline unsigned int btrfs_compress_type(unsigned int type_level)$/;"	f	typeref:typename:unsigned int
btrfs_compress_type2str	compression.c	/^const char* btrfs_compress_type2str(enum btrfs_compression_type type)$/;"	f	typeref:typename:const char *
btrfs_compress_types	compression.c	/^static const char* const btrfs_compress_types[] = { "", "zlib", "lzo", "zstd" };$/;"	v	typeref:typename:const char * const[]	file:
btrfs_compressed_bioset	compression.c	/^static struct bio_set btrfs_compressed_bioset;$/;"	v	typeref:struct:bio_set	file:
btrfs_compression_type	compression.h	/^enum btrfs_compression_type {$/;"	g
btrfs_cont_expand	inode.c	/^int btrfs_cont_expand(struct btrfs_inode *inode, loff_t oldsize, loff_t size)$/;"	f	typeref:typename:int
btrfs_control_ioctl	super.c	/^static long btrfs_control_ioctl(struct file *file, unsigned int cmd,$/;"	f	typeref:typename:long	file:
btrfs_control_open	super.c	/^static int btrfs_control_open(struct inode *inode, struct file *file)$/;"	f	typeref:typename:int	file:
btrfs_copy_from_user	file.c	/^static noinline int btrfs_copy_from_user(loff_t pos, size_t write_bytes,$/;"	f	typeref:typename:noinline int	file:
btrfs_copy_root	ctree.c	/^int btrfs_copy_root(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_cow_block	ctree.c	/^noinline int btrfs_cow_block(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int
btrfs_cpu_balance_args_to_disk	accessors.h	/^static inline void btrfs_cpu_balance_args_to_disk($/;"	f	typeref:typename:void
btrfs_cpu_key_to_disk	accessors.h	/^static inline void btrfs_cpu_key_to_disk(struct btrfs_disk_key *disk,$/;"	f	typeref:typename:void
btrfs_cpu_key_to_disk	accessors.h	/^static inline void btrfs_cpu_key_to_disk(struct btrfs_disk_key *disk_key,$/;"	f	typeref:typename:void
btrfs_crc32c	ctree.h	/^static inline u32 btrfs_crc32c(u32 crc, const void *address, unsigned length)$/;"	f	typeref:typename:u32
btrfs_crc32c_final	ctree.h	/^static inline void btrfs_crc32c_final(u32 crc, u8 *result)$/;"	f	typeref:typename:void
btrfs_create	inode.c	/^static int btrfs_create(struct mnt_idmap *idmap, struct inode *dir,$/;"	f	typeref:typename:int	file:
btrfs_create_block_group_cache	block-group.c	/^static struct btrfs_block_group *btrfs_create_block_group_cache($/;"	f	typeref:struct:btrfs_block_group *	file:
btrfs_create_chunk	volumes.c	/^struct btrfs_block_group *btrfs_create_chunk(struct btrfs_trans_handle *trans,$/;"	f	typeref:struct:btrfs_block_group *
btrfs_create_common	inode.c	/^static int btrfs_create_common(struct inode *dir, struct dentry *dentry,$/;"	f	typeref:typename:int	file:
btrfs_create_dio_extent	inode.c	/^static struct extent_map *btrfs_create_dio_extent(struct btrfs_inode *inode,$/;"	f	typeref:struct:extent_map *	file:
btrfs_create_free_space_tree	free-space-tree.c	/^int btrfs_create_free_space_tree(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_create_new_inode	inode.c	/^int btrfs_create_new_inode(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_create_pending_block_groups	block-group.c	/^void btrfs_create_pending_block_groups(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:void
btrfs_create_qgroup	qgroup.c	/^int btrfs_create_qgroup(struct btrfs_trans_handle *trans, u64 qgroupid)$/;"	f	typeref:typename:int
btrfs_create_tree	disk-io.c	/^struct btrfs_root *btrfs_create_tree(struct btrfs_trans_handle *trans,$/;"	f	typeref:struct:btrfs_root *
btrfs_create_uuid_tree	volumes.c	/^int btrfs_create_uuid_tree(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_crit	messages.h	/^#define btrfs_crit(/;"	d
btrfs_crit_in_rcu	messages.h	/^#define btrfs_crit_in_rcu(/;"	d
btrfs_crit_rl	messages.h	/^#define btrfs_crit_rl(/;"	d
btrfs_crit_rl_in_rcu	messages.h	/^#define btrfs_crit_rl_in_rcu(/;"	d
btrfs_cross_ref_exist	extent-tree.c	/^int btrfs_cross_ref_exist(struct btrfs_root *root, u64 objectid, u64 offset,$/;"	f	typeref:typename:int
btrfs_csum_bytes_to_leaves	fs.h	/^static inline u64 btrfs_csum_bytes_to_leaves($/;"	f	typeref:typename:u64
btrfs_csum_file_blocks	file-item.c	/^int btrfs_csum_file_blocks(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_csum_one_bio	file-item.c	/^blk_status_t btrfs_csum_one_bio(struct btrfs_bio *bbio)$/;"	f	typeref:typename:blk_status_t
btrfs_csum_root	disk-io.c	/^struct btrfs_root *btrfs_csum_root(struct btrfs_fs_info *fs_info, u64 bytenr)$/;"	f	typeref:struct:btrfs_root *
btrfs_csum_type_size	ctree.c	/^u16 btrfs_csum_type_size(u16 type)$/;"	f	typeref:typename:u16
btrfs_csums	ctree.c	/^static const struct btrfs_csums {$/;"	s	file:
btrfs_csums	ctree.c	/^} btrfs_csums[] = {$/;"	v	typeref:typename:const struct btrfs_csums[]
btrfs_ctl_fops	super.c	/^static const struct file_operations btrfs_ctl_fops = {$/;"	v	typeref:typename:const struct file_operations	file:
btrfs_ctree_exit	ctree.c	/^void __cold btrfs_ctree_exit(void)$/;"	f	typeref:typename:void __cold
btrfs_ctree_init	ctree.c	/^int __init btrfs_ctree_init(void)$/;"	f	typeref:typename:int __init
btrfs_data_alloc_profile	block-group.h	/^static inline u64 btrfs_data_alloc_profile(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:u64
btrfs_data_csum_ok	inode.c	/^bool btrfs_data_csum_ok(struct btrfs_bio *bbio, struct btrfs_device *dev,$/;"	f	typeref:typename:bool
btrfs_data_ref	delayed-ref.h	/^struct btrfs_data_ref {$/;"	s
btrfs_debug	messages.h	/^#define btrfs_debug(/;"	d
btrfs_debug_check_extent_io_range	extent-io-tree.c	/^#define btrfs_debug_check_extent_io_range(/;"	d	file:
btrfs_debug_feature_attr_group	sysfs.c	/^static const struct attribute_group btrfs_debug_feature_attr_group = {$/;"	v	typeref:typename:const struct attribute_group	file:
btrfs_debug_feature_attrs	sysfs.c	/^static struct attribute *btrfs_debug_feature_attrs[] = {$/;"	v	typeref:struct:attribute * []	file:
btrfs_debug_in_rcu	messages.h	/^#define btrfs_debug_in_rcu(/;"	d
btrfs_debug_mount_attrs	sysfs.c	/^static const struct attribute *btrfs_debug_mount_attrs[] = {$/;"	v	typeref:typename:const struct attribute * []	file:
btrfs_debug_rl	messages.h	/^#define btrfs_debug_rl(/;"	d
btrfs_debug_rl_in_rcu	messages.h	/^#define btrfs_debug_rl_in_rcu(/;"	d
btrfs_dec_block_group_reservations	block-group.c	/^void btrfs_dec_block_group_reservations(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_dec_block_group_ro	block-group.c	/^void btrfs_dec_block_group_ro(struct btrfs_block_group *cache)$/;"	f	typeref:typename:void
btrfs_dec_block_group_swap_extents	block-group.c	/^void btrfs_dec_block_group_swap_extents(struct btrfs_block_group *bg, int amount)$/;"	f	typeref:typename:void
btrfs_dec_nocow_writers	block-group.c	/^void btrfs_dec_nocow_writers(struct btrfs_block_group *bg)$/;"	f	typeref:typename:void
btrfs_dec_ref	extent-tree.c	/^int btrfs_dec_ref(struct btrfs_trans_handle *trans, struct btrfs_root *root,$/;"	f	typeref:typename:int
btrfs_dec_test_ordered_pending	ordered-data.c	/^bool btrfs_dec_test_ordered_pending(struct btrfs_inode *inode,$/;"	f	typeref:typename:bool
btrfs_decode_error	messages.c	/^const char * __attribute_const__ btrfs_decode_error(int errno)$/;"	f	typeref:typename:const char * __attribute_const__
btrfs_decompress	compression.c	/^int btrfs_decompress(int type, const u8 *data_in, struct page *dest_page,$/;"	f	typeref:typename:int
btrfs_decompress_bio	compression.c	/^static int btrfs_decompress_bio(struct compressed_bio *cb)$/;"	f	typeref:typename:int	file:
btrfs_decompress_buf2page	compression.c	/^int btrfs_decompress_buf2page(const char *buf, u32 buf_len,$/;"	f	typeref:typename:int
btrfs_defrag_cancelled	defrag.h	/^static inline int btrfs_defrag_cancelled(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_defrag_file	defrag.c	/^int btrfs_defrag_file(struct inode *inode, struct file_ra_state *ra,$/;"	f	typeref:typename:int
btrfs_defrag_leaves	defrag.c	/^int btrfs_defrag_leaves(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_defrag_root	transaction.c	/^int btrfs_defrag_root(struct btrfs_root *root)$/;"	f	typeref:typename:int
btrfs_del_csums	file-item.c	/^int btrfs_del_csums(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_del_delalloc_inode	inode.c	/^static void btrfs_del_delalloc_inode(struct btrfs_root *root,$/;"	f	typeref:typename:void	file:
btrfs_del_dir_entries_in_log	tree-log.c	/^void btrfs_del_dir_entries_in_log(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void
btrfs_del_inode_extref	inode-item.c	/^static int btrfs_del_inode_extref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_del_inode_ref	inode-item.c	/^int btrfs_del_inode_ref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_del_inode_ref_in_log	tree-log.c	/^void btrfs_del_inode_ref_in_log(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void
btrfs_del_item	ctree.h	/^static inline int btrfs_del_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_del_items	ctree.c	/^int btrfs_del_items(struct btrfs_trans_handle *trans, struct btrfs_root *root,$/;"	f	typeref:typename:int
btrfs_del_leaf	ctree.c	/^static noinline int btrfs_del_leaf(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
btrfs_del_orphan_item	orphan.c	/^int btrfs_del_orphan_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_del_ptr	ctree.c	/^int btrfs_del_ptr(struct btrfs_trans_handle *trans, struct btrfs_root *root,$/;"	f	typeref:typename:int
btrfs_del_qgroup_relation	qgroup.c	/^int btrfs_del_qgroup_relation(struct btrfs_trans_handle *trans, u64 src,$/;"	f	typeref:typename:int
btrfs_del_root	root-tree.c	/^int btrfs_del_root(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_del_root_ref	root-tree.c	/^int btrfs_del_root_ref(struct btrfs_trans_handle *trans, u64 root_id,$/;"	f	typeref:typename:int
btrfs_del_sys_chunk	volumes.c	/^static int btrfs_del_sys_chunk(struct btrfs_fs_info *fs_info, u64 chunk_offset)$/;"	f	typeref:typename:int	file:
btrfs_delalloc_release_extents	delalloc-space.c	/^void btrfs_delalloc_release_extents(struct btrfs_inode *inode, u64 num_bytes)$/;"	f	typeref:typename:void
btrfs_delalloc_release_metadata	delalloc-space.c	/^void btrfs_delalloc_release_metadata(struct btrfs_inode *inode, u64 num_bytes,$/;"	f	typeref:typename:void
btrfs_delalloc_release_space	delalloc-space.c	/^void btrfs_delalloc_release_space(struct btrfs_inode *inode,$/;"	f	typeref:typename:void
btrfs_delalloc_reserve_metadata	delalloc-space.c	/^int btrfs_delalloc_reserve_metadata(struct btrfs_inode *inode, u64 num_bytes,$/;"	f	typeref:typename:int
btrfs_delalloc_reserve_space	delalloc-space.c	/^int btrfs_delalloc_reserve_space(struct btrfs_inode *inode,$/;"	f	typeref:typename:int
btrfs_delalloc_work	inode.c	/^struct btrfs_delalloc_work {$/;"	s	file:
btrfs_delayed_data_ref	delayed-ref.h	/^struct btrfs_delayed_data_ref {$/;"	s
btrfs_delayed_data_ref_cachep	delayed-ref.c	/^struct kmem_cache *btrfs_delayed_data_ref_cachep;$/;"	v	typeref:struct:kmem_cache *
btrfs_delayed_delete_inode_ref	delayed-inode.c	/^int btrfs_delayed_delete_inode_ref(struct btrfs_inode *inode)$/;"	f	typeref:typename:int
btrfs_delayed_extent_op	delayed-ref.h	/^struct btrfs_delayed_extent_op {$/;"	s
btrfs_delayed_extent_op_cachep	delayed-ref.c	/^struct kmem_cache *btrfs_delayed_extent_op_cachep;$/;"	v	typeref:struct:kmem_cache *
btrfs_delayed_inode_exit	delayed-inode.c	/^void __cold btrfs_delayed_inode_exit(void)$/;"	f	typeref:typename:void __cold
btrfs_delayed_inode_init	delayed-inode.c	/^int __init btrfs_delayed_inode_init(void)$/;"	f	typeref:typename:int __init
btrfs_delayed_inode_release_metadata	delayed-inode.c	/^static void btrfs_delayed_inode_release_metadata(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
btrfs_delayed_inode_reserve_metadata	delayed-inode.c	/^static int btrfs_delayed_inode_reserve_metadata($/;"	f	typeref:typename:int	file:
btrfs_delayed_item	delayed-inode.h	/^struct btrfs_delayed_item {$/;"	s
btrfs_delayed_item_release_leaves	delayed-inode.c	/^static void btrfs_delayed_item_release_leaves(struct btrfs_delayed_node *node,$/;"	f	typeref:typename:void	file:
btrfs_delayed_item_release_metadata	delayed-inode.c	/^static void btrfs_delayed_item_release_metadata(struct btrfs_root *root,$/;"	f	typeref:typename:void	file:
btrfs_delayed_item_reserve_metadata	delayed-inode.c	/^static int btrfs_delayed_item_reserve_metadata(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_delayed_item_type	delayed-inode.h	/^enum btrfs_delayed_item_type {$/;"	g
btrfs_delayed_node	delayed-inode.h	/^struct btrfs_delayed_node {$/;"	s
btrfs_delayed_node_to_data_ref	delayed-ref.h	/^btrfs_delayed_node_to_data_ref(struct btrfs_delayed_ref_node *node)$/;"	f	typeref:struct:btrfs_delayed_data_ref *
btrfs_delayed_node_to_tree_ref	delayed-ref.h	/^btrfs_delayed_node_to_tree_ref(struct btrfs_delayed_ref_node *node)$/;"	f	typeref:struct:btrfs_delayed_tree_ref *
btrfs_delayed_ref_exit	delayed-ref.c	/^void __cold btrfs_delayed_ref_exit(void)$/;"	f	typeref:typename:void __cold
btrfs_delayed_ref_flags	delayed-ref.h	/^enum btrfs_delayed_ref_flags {$/;"	g
btrfs_delayed_ref_head	delayed-ref.h	/^struct btrfs_delayed_ref_head {$/;"	s
btrfs_delayed_ref_head_cachep	delayed-ref.c	/^struct kmem_cache *btrfs_delayed_ref_head_cachep;$/;"	v	typeref:struct:kmem_cache *
btrfs_delayed_ref_init	delayed-ref.c	/^int __init btrfs_delayed_ref_init(void)$/;"	f	typeref:typename:int __init
btrfs_delayed_ref_lock	delayed-ref.c	/^int btrfs_delayed_ref_lock(struct btrfs_delayed_ref_root *delayed_refs,$/;"	f	typeref:typename:int
btrfs_delayed_ref_node	delayed-ref.h	/^struct btrfs_delayed_ref_node {$/;"	s
btrfs_delayed_ref_root	delayed-ref.h	/^struct btrfs_delayed_ref_root {$/;"	s
btrfs_delayed_ref_unlock	delayed-ref.h	/^static inline void btrfs_delayed_ref_unlock(struct btrfs_delayed_ref_head *head)$/;"	f	typeref:typename:void
btrfs_delayed_refs_rsv_refill	delayed-ref.c	/^int btrfs_delayed_refs_rsv_refill(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_delayed_refs_rsv_release	delayed-ref.c	/^void btrfs_delayed_refs_rsv_release(struct btrfs_fs_info *fs_info, int nr)$/;"	f	typeref:typename:void
btrfs_delayed_root	delayed-inode.h	/^struct btrfs_delayed_root {$/;"	s
btrfs_delayed_tree_ref	delayed-ref.h	/^struct btrfs_delayed_tree_ref {$/;"	s
btrfs_delayed_tree_ref_cachep	delayed-ref.c	/^struct kmem_cache *btrfs_delayed_tree_ref_cachep;$/;"	v	typeref:struct:kmem_cache *
btrfs_delayed_update_inode	delayed-inode.c	/^int btrfs_delayed_update_inode(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_delete_delayed_dir_index	delayed-inode.c	/^int btrfs_delete_delayed_dir_index(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_delete_delayed_insertion_item	delayed-inode.c	/^static int btrfs_delete_delayed_insertion_item(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
btrfs_delete_delayed_items	delayed-inode.c	/^static int btrfs_delete_delayed_items(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_delete_free_space_tree	free-space-tree.c	/^int btrfs_delete_free_space_tree(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_delete_one_dir_name	dir-item.c	/^int btrfs_delete_one_dir_name(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_delete_ref_head	delayed-ref.c	/^void btrfs_delete_ref_head(struct btrfs_delayed_ref_root *delayed_refs,$/;"	f	typeref:typename:void
btrfs_delete_subvolume	inode.c	/^int btrfs_delete_subvolume(struct btrfs_inode *dir, struct dentry *dentry)$/;"	f	typeref:typename:int
btrfs_delete_unused_bgs	block-group.c	/^void btrfs_delete_unused_bgs(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_dentry_delete	inode.c	/^static int btrfs_dentry_delete(const struct dentry *dentry)$/;"	f	typeref:typename:int	file:
btrfs_dentry_operations	inode.c	/^const struct dentry_operations btrfs_dentry_operations = {$/;"	v	typeref:typename:const struct dentry_operations
btrfs_dequeue_delayed_node	delayed-inode.c	/^static void btrfs_dequeue_delayed_node(struct btrfs_delayed_root *root,$/;"	f	typeref:typename:void	file:
btrfs_descending_sort_devices	super.c	/^static inline void btrfs_descending_sort_devices($/;"	f	typeref:typename:void	file:
btrfs_describe_block_groups	volumes.c	/^void btrfs_describe_block_groups(u64 bg_flags, char *buf, u32 size_buf)$/;"	f	typeref:typename:void
btrfs_destroy_all_delalloc_inodes	disk-io.c	/^static void btrfs_destroy_all_delalloc_inodes(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
btrfs_destroy_all_ordered_extents	disk-io.c	/^static void btrfs_destroy_all_ordered_extents(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
btrfs_destroy_cachep	inode.c	/^void __cold btrfs_destroy_cachep(void)$/;"	f	typeref:typename:void __cold
btrfs_destroy_delalloc_inodes	disk-io.c	/^static void btrfs_destroy_delalloc_inodes(struct btrfs_root *root)$/;"	f	typeref:typename:void	file:
btrfs_destroy_delayed_inodes	delayed-inode.c	/^void btrfs_destroy_delayed_inodes(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_destroy_delayed_refs	disk-io.c	/^static void btrfs_destroy_delayed_refs(struct btrfs_transaction *trans,$/;"	f	typeref:typename:void	file:
btrfs_destroy_dev_replace_tgtdev	volumes.c	/^void btrfs_destroy_dev_replace_tgtdev(struct btrfs_device *tgtdev)$/;"	f	typeref:typename:void
btrfs_destroy_dev_zone_info	zoned.c	/^void btrfs_destroy_dev_zone_info(struct btrfs_device *device)$/;"	f	typeref:typename:void
btrfs_destroy_dev_zone_info	zoned.h	/^static inline void btrfs_destroy_dev_zone_info(struct btrfs_device *device) { }$/;"	f	typeref:typename:void
btrfs_destroy_inode	inode.c	/^void btrfs_destroy_inode(struct inode *vfs_inode)$/;"	f	typeref:typename:void
btrfs_destroy_marked_extents	disk-io.c	/^static void btrfs_destroy_marked_extents(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
btrfs_destroy_ordered_extents	disk-io.c	/^static void btrfs_destroy_ordered_extents(struct btrfs_root *root)$/;"	f	typeref:typename:void	file:
btrfs_destroy_pinned_extent	disk-io.c	/^static void btrfs_destroy_pinned_extent(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
btrfs_destroy_test_fs	tests/btrfs-tests.c	/^static void btrfs_destroy_test_fs(void)$/;"	f	typeref:typename:void	file:
btrfs_destroy_workqueue	async-thread.c	/^void btrfs_destroy_workqueue(struct btrfs_workqueue *wq)$/;"	f	typeref:typename:void
btrfs_detach_subpage	subpage.c	/^void btrfs_detach_subpage(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_dev_clear_active_zone	zoned.c	/^static void btrfs_dev_clear_active_zone(struct btrfs_device *device, u64 pos)$/;"	f	typeref:typename:void	file:
btrfs_dev_clear_zone_empty	zoned.h	/^static inline void btrfs_dev_clear_zone_empty(struct btrfs_device *device, u64 pos)$/;"	f	typeref:typename:void
btrfs_dev_is_empty_zone	zoned.h	/^static inline bool btrfs_dev_is_empty_zone(struct btrfs_device *device, u64 pos)$/;"	f	typeref:typename:bool
btrfs_dev_is_sequential	zoned.h	/^static inline bool btrfs_dev_is_sequential(struct btrfs_device *device, u64 pos)$/;"	f	typeref:typename:bool
btrfs_dev_lookup_args	volumes.h	/^struct btrfs_dev_lookup_args {$/;"	s
btrfs_dev_name	volumes.h	/^static inline const char *btrfs_dev_name(const struct btrfs_device *device)$/;"	f	typeref:typename:const char *
btrfs_dev_replace	fs.h	/^struct btrfs_dev_replace {$/;"	s
btrfs_dev_replace_by_ioctl	dev-replace.c	/^int btrfs_dev_replace_by_ioctl(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_dev_replace_cancel	dev-replace.c	/^int btrfs_dev_replace_cancel(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_dev_replace_finishing	dev-replace.c	/^static int btrfs_dev_replace_finishing(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
btrfs_dev_replace_is_ongoing	dev-replace.c	/^int __pure btrfs_dev_replace_is_ongoing(struct btrfs_dev_replace *dev_replace)$/;"	f	typeref:typename:int __pure
btrfs_dev_replace_kthread	dev-replace.c	/^static int btrfs_dev_replace_kthread(void *data)$/;"	f	typeref:typename:int	file:
btrfs_dev_replace_progress	dev-replace.c	/^static u64 btrfs_dev_replace_progress(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:u64	file:
btrfs_dev_replace_start	dev-replace.c	/^static int btrfs_dev_replace_start(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
btrfs_dev_replace_status	dev-replace.c	/^void btrfs_dev_replace_status(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_dev_replace_suspend_for_unmount	dev-replace.c	/^void btrfs_dev_replace_suspend_for_unmount(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_dev_replace_update_device_in_mapping_tree	dev-replace.c	/^static void btrfs_dev_replace_update_device_in_mapping_tree($/;"	f	typeref:typename:void	file:
btrfs_dev_set_active_zone	zoned.c	/^static bool btrfs_dev_set_active_zone(struct btrfs_device *device, u64 pos)$/;"	f	typeref:typename:bool	file:
btrfs_dev_set_empty_zone_bit	zoned.h	/^static inline void btrfs_dev_set_empty_zone_bit(struct btrfs_device *device,$/;"	f	typeref:typename:void
btrfs_dev_set_zone_empty	zoned.h	/^static inline void btrfs_dev_set_zone_empty(struct btrfs_device *device, u64 pos)$/;"	f	typeref:typename:void
btrfs_dev_stat_inc	volumes.h	/^static inline void btrfs_dev_stat_inc(struct btrfs_device *dev,$/;"	f	typeref:typename:void
btrfs_dev_stat_inc_and_print	volumes.c	/^void btrfs_dev_stat_inc_and_print(struct btrfs_device *dev, int index)$/;"	f	typeref:typename:void
btrfs_dev_stat_print_on_load	volumes.c	/^static void btrfs_dev_stat_print_on_load(struct btrfs_device *dev)$/;"	f	typeref:typename:void	file:
btrfs_dev_stat_read	volumes.h	/^static inline int btrfs_dev_stat_read(struct btrfs_device *dev,$/;"	f	typeref:typename:int
btrfs_dev_stat_read_and_reset	volumes.h	/^static inline int btrfs_dev_stat_read_and_reset(struct btrfs_device *dev,$/;"	f	typeref:typename:int
btrfs_dev_stat_set	volumes.h	/^static inline void btrfs_dev_stat_set(struct btrfs_device *dev,$/;"	f	typeref:typename:void
btrfs_dev_stats_value	volumes.c	/^static u64 btrfs_dev_stats_value(const struct extent_buffer *eb,$/;"	f	typeref:typename:u64	file:
btrfs_device	volumes.h	/^struct btrfs_device {$/;"	s
btrfs_device_data_ordered_init	volumes.h	/^#define btrfs_device_data_ordered_init(/;"	d
btrfs_device_fsid	accessors.h	/^static inline unsigned long btrfs_device_fsid(struct btrfs_dev_item *d)$/;"	f	typeref:typename:unsigned long
btrfs_device_info	volumes.h	/^struct btrfs_device_info {$/;"	s
btrfs_device_init_dev_stats	volumes.c	/^static int btrfs_device_init_dev_stats(struct btrfs_device *device,$/;"	f	typeref:typename:int	file:
btrfs_device_total_bytes	accessors.h	/^static inline u64 btrfs_device_total_bytes(const struct extent_buffer *eb,$/;"	f
btrfs_device_uuid	accessors.h	/^static inline unsigned long btrfs_device_uuid(struct btrfs_dev_item *d)$/;"	f	typeref:typename:unsigned long
btrfs_devinfo_error_stats_show	sysfs.c	/^static ssize_t btrfs_devinfo_error_stats_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_devinfo_fsid_show	sysfs.c	/^static ssize_t btrfs_devinfo_fsid_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_devinfo_in_fs_metadata_show	sysfs.c	/^static ssize_t btrfs_devinfo_in_fs_metadata_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_devinfo_missing_show	sysfs.c	/^static ssize_t btrfs_devinfo_missing_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_devinfo_replace_target_show	sysfs.c	/^static ssize_t btrfs_devinfo_replace_target_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_devinfo_scrub_speed_max_show	sysfs.c	/^static ssize_t btrfs_devinfo_scrub_speed_max_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_devinfo_scrub_speed_max_store	sysfs.c	/^static ssize_t btrfs_devinfo_scrub_speed_max_store(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_devinfo_writeable_show	sysfs.c	/^static ssize_t btrfs_devinfo_writeable_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_dio_bioset	inode.c	/^static struct bio_set btrfs_dio_bioset;$/;"	v	typeref:struct:bio_set	file:
btrfs_dio_data	inode.c	/^struct btrfs_dio_data {$/;"	s	file:
btrfs_dio_end_io	inode.c	/^static void btrfs_dio_end_io(struct btrfs_bio *bbio)$/;"	f	typeref:typename:void	file:
btrfs_dio_iomap_begin	inode.c	/^static int btrfs_dio_iomap_begin(struct inode *inode, loff_t start,$/;"	f	typeref:typename:int	file:
btrfs_dio_iomap_end	inode.c	/^static int btrfs_dio_iomap_end(struct inode *inode, loff_t pos, loff_t length,$/;"	f	typeref:typename:int	file:
btrfs_dio_iomap_ops	inode.c	/^static const struct iomap_ops btrfs_dio_iomap_ops = {$/;"	v	typeref:typename:const struct iomap_ops	file:
btrfs_dio_ops	inode.c	/^static const struct iomap_dio_ops btrfs_dio_ops = {$/;"	v	typeref:typename:const struct iomap_dio_ops	file:
btrfs_dio_private	inode.c	/^struct btrfs_dio_private {$/;"	s	file:
btrfs_dio_read	inode.c	/^ssize_t btrfs_dio_read(struct kiocb *iocb, struct iov_iter *iter, size_t done_before)$/;"	f	typeref:typename:ssize_t
btrfs_dio_submit_io	inode.c	/^static void btrfs_dio_submit_io(const struct iomap_iter *iter, struct bio *bio,$/;"	f	typeref:typename:void	file:
btrfs_dio_write	inode.c	/^struct iomap_dio *btrfs_dio_write(struct kiocb *iocb, struct iov_iter *iter,$/;"	f	typeref:struct:iomap_dio *
btrfs_dir_file_operations	inode.c	/^static const struct file_operations btrfs_dir_file_operations = {$/;"	v	typeref:typename:const struct file_operations	file:
btrfs_dir_file_operations	inode.c	/^static const struct file_operations btrfs_dir_file_operations;$/;"	v	typeref:typename:const struct file_operations	file:
btrfs_dir_ftype	accessors.h	/^static inline u8 btrfs_dir_ftype(const struct extent_buffer *eb,$/;"	f	typeref:typename:u8
btrfs_dir_inode_operations	inode.c	/^static const struct inode_operations btrfs_dir_inode_operations = {$/;"	v	typeref:typename:const struct inode_operations	file:
btrfs_dir_inode_operations	inode.c	/^static const struct inode_operations btrfs_dir_inode_operations;$/;"	v	typeref:typename:const struct inode_operations	file:
btrfs_dir_item_key	accessors.h	/^static inline void btrfs_dir_item_key(const struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_dir_item_key_to_cpu	accessors.h	/^static inline void btrfs_dir_item_key_to_cpu(const struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_dir_list	tree-log.c	/^struct btrfs_dir_list {$/;"	s	file:
btrfs_dir_llseek	inode.c	/^static loff_t btrfs_dir_llseek(struct file *file, loff_t offset, int whence)$/;"	f	typeref:typename:loff_t	file:
btrfs_direct_read	file.c	/^static ssize_t btrfs_direct_read(struct kiocb *iocb, struct iov_iter *to)$/;"	f	typeref:typename:ssize_t	file:
btrfs_direct_write	file.c	/^static ssize_t btrfs_direct_write(struct kiocb *iocb, struct iov_iter *from)$/;"	f	typeref:typename:ssize_t	file:
btrfs_dirty_inode	inode.c	/^static int btrfs_dirty_inode(struct btrfs_inode *inode)$/;"	f	typeref:typename:int	file:
btrfs_dirty_pages	file.c	/^int btrfs_dirty_pages(struct btrfs_inode *inode, struct page **pages,$/;"	f	typeref:typename:int
btrfs_discard_bitmap_bytes_show	sysfs.c	/^static ssize_t btrfs_discard_bitmap_bytes_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_discard_bytes_saved_show	sysfs.c	/^static ssize_t btrfs_discard_bytes_saved_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_discard_calc_delay	discard.c	/^void btrfs_discard_calc_delay(struct btrfs_discard_ctl *discard_ctl)$/;"	f	typeref:typename:void
btrfs_discard_cancel_work	discard.c	/^void btrfs_discard_cancel_work(struct btrfs_discard_ctl *discard_ctl,$/;"	f	typeref:typename:void
btrfs_discard_check_filter	discard.c	/^void btrfs_discard_check_filter(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:void
btrfs_discard_cleanup	discard.c	/^void btrfs_discard_cleanup(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_discard_ctl	fs.h	/^struct btrfs_discard_ctl {$/;"	s
btrfs_discard_extent	extent-tree.c	/^int btrfs_discard_extent(struct btrfs_fs_info *fs_info, u64 bytenr,$/;"	f	typeref:typename:int
btrfs_discard_extent_bytes_show	sysfs.c	/^static ssize_t btrfs_discard_extent_bytes_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_discard_init	discard.c	/^void btrfs_discard_init(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_discard_iops_limit_show	sysfs.c	/^static ssize_t btrfs_discard_iops_limit_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_discard_iops_limit_store	sysfs.c	/^static ssize_t btrfs_discard_iops_limit_store(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_discard_kbps_limit_show	sysfs.c	/^static ssize_t btrfs_discard_kbps_limit_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_discard_kbps_limit_store	sysfs.c	/^static ssize_t btrfs_discard_kbps_limit_store(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_discard_max_discard_size_show	sysfs.c	/^static ssize_t btrfs_discard_max_discard_size_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_discard_max_discard_size_store	sysfs.c	/^static ssize_t btrfs_discard_max_discard_size_store(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_discard_punt_unused_bgs_list	discard.c	/^void btrfs_discard_punt_unused_bgs_list(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_discard_purge_list	discard.c	/^static void btrfs_discard_purge_list(struct btrfs_discard_ctl *discard_ctl)$/;"	f	typeref:typename:void	file:
btrfs_discard_queue_work	discard.c	/^void btrfs_discard_queue_work(struct btrfs_discard_ctl *discard_ctl,$/;"	f	typeref:typename:void
btrfs_discard_resume	discard.c	/^void btrfs_discard_resume(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_discard_schedule_work	discard.c	/^void btrfs_discard_schedule_work(struct btrfs_discard_ctl *discard_ctl,$/;"	f	typeref:typename:void
btrfs_discard_state	block-group.h	/^enum btrfs_discard_state {$/;"	g
btrfs_discard_stop	discard.c	/^void btrfs_discard_stop(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_discard_stripe	volumes.h	/^struct btrfs_discard_stripe {$/;"	s
btrfs_discard_update_discardable	discard.c	/^void btrfs_discard_update_discardable(struct btrfs_block_group *block_group)$/;"	f	typeref:typename:void
btrfs_discard_workfn	discard.c	/^static void btrfs_discard_workfn(struct work_struct *work)$/;"	f	typeref:typename:void	file:
btrfs_discardable_bytes_show	sysfs.c	/^static ssize_t btrfs_discardable_bytes_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_discardable_extents_show	sysfs.c	/^static ssize_t btrfs_discardable_extents_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_disk_balance_args_to_cpu	accessors.h	/^static inline void btrfs_disk_balance_args_to_cpu(struct btrfs_balance_args *cpu,$/;"	f	typeref:typename:void
btrfs_disk_cache_state	block-group.h	/^enum btrfs_disk_cache_state {$/;"	g
btrfs_disk_key_to_cpu	accessors.h	/^static inline void btrfs_disk_key_to_cpu(struct btrfs_key *cpu,$/;"	f	typeref:typename:void
btrfs_disk_key_to_cpu	accessors.h	/^static inline void btrfs_disk_key_to_cpu(struct btrfs_key *cpu_key,$/;"	f	typeref:typename:void
btrfs_do_encoded_write	inode.c	/^ssize_t btrfs_do_encoded_write(struct kiocb *iocb, struct iov_iter *from,$/;"	f	typeref:typename:ssize_t
btrfs_do_readpage	extent_io.c	/^static int btrfs_do_readpage(struct page *page, struct extent_map **em_cached,$/;"	f	typeref:typename:int	file:
btrfs_do_write_iter	file.c	/^ssize_t btrfs_do_write_iter(struct kiocb *iocb, struct iov_iter *from,$/;"	f	typeref:typename:ssize_t
btrfs_double_extent_lock	reflink.c	/^static void btrfs_double_extent_lock(struct inode *inode1, u64 loff1,$/;"	f	typeref:typename:void	file:
btrfs_double_extent_unlock	reflink.c	/^static void btrfs_double_extent_unlock(struct inode *inode1, u64 loff1,$/;"	f	typeref:typename:void	file:
btrfs_double_mmap_lock	reflink.c	/^static void btrfs_double_mmap_lock(struct inode *inode1, struct inode *inode2)$/;"	f	typeref:typename:void	file:
btrfs_double_mmap_unlock	reflink.c	/^static void btrfs_double_mmap_unlock(struct inode *inode1, struct inode *inode2)$/;"	f	typeref:typename:void	file:
btrfs_drew_lock	locking.h	/^struct btrfs_drew_lock {$/;"	s
btrfs_drew_lock_init	locking.c	/^void btrfs_drew_lock_init(struct btrfs_drew_lock *lock)$/;"	f	typeref:typename:void
btrfs_drew_read_lock	locking.c	/^void btrfs_drew_read_lock(struct btrfs_drew_lock *lock)$/;"	f	typeref:typename:void
btrfs_drew_read_unlock	locking.c	/^void btrfs_drew_read_unlock(struct btrfs_drew_lock *lock)$/;"	f	typeref:typename:void
btrfs_drew_try_write_lock	locking.c	/^bool btrfs_drew_try_write_lock(struct btrfs_drew_lock *lock)$/;"	f	typeref:typename:bool
btrfs_drew_write_lock	locking.c	/^void btrfs_drew_write_lock(struct btrfs_drew_lock *lock)$/;"	f	typeref:typename:void
btrfs_drew_write_unlock	locking.c	/^void btrfs_drew_write_unlock(struct btrfs_drew_lock *lock)$/;"	f	typeref:typename:void
btrfs_drop_all_logs	disk-io.c	/^static void btrfs_drop_all_logs(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
btrfs_drop_and_free_fs_root	disk-io.c	/^void btrfs_drop_and_free_fs_root(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_drop_extent_map_range	extent_map.c	/^void btrfs_drop_extent_map_range(struct btrfs_inode *inode, u64 start, u64 end,$/;"	f	typeref:typename:void
btrfs_drop_extents	file.c	/^int btrfs_drop_extents(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_drop_extents_args	ctree.h	/^struct btrfs_drop_extents_args {$/;"	s
btrfs_drop_inode	inode.c	/^int btrfs_drop_inode(struct inode *inode)$/;"	f	typeref:typename:int
btrfs_drop_pages	file.c	/^static void btrfs_drop_pages(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
btrfs_drop_snapshot	extent-tree.c	/^int btrfs_drop_snapshot(struct btrfs_root *root, int update_ref, int for_reloc)$/;"	f	typeref:typename:int
btrfs_drop_subtree	extent-tree.c	/^int btrfs_drop_subtree(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_drop_verity_items	verity.c	/^int btrfs_drop_verity_items(struct btrfs_inode *inode)$/;"	f	typeref:typename:int
btrfs_drop_verity_items	verity.h	/^static inline int btrfs_drop_verity_items(struct btrfs_inode *inode)$/;"	f	typeref:typename:int
btrfs_dump_free_space	free-space-cache.c	/^void btrfs_dump_free_space(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:void
btrfs_dump_space_info	space-info.c	/^void btrfs_dump_space_info(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_dump_space_info_for_trans_abort	space-info.c	/^__cold void btrfs_dump_space_info_for_trans_abort(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:__cold void
btrfs_duplicate_item	ctree.c	/^int btrfs_duplicate_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_eb_write_context	extent_io.h	/^struct btrfs_eb_write_context {$/;"	s
btrfs_emerg	messages.h	/^#define btrfs_emerg(/;"	d
btrfs_emerg_in_rcu	messages.h	/^#define btrfs_emerg_in_rcu(/;"	d
btrfs_emerg_rl	messages.h	/^#define btrfs_emerg_rl(/;"	d
btrfs_emerg_rl_in_rcu	messages.h	/^#define btrfs_emerg_rl_in_rcu(/;"	d
btrfs_encode_fh	export.c	/^static int btrfs_encode_fh(struct inode *inode, u32 *fh, int *max_len,$/;"	f	typeref:typename:int	file:
btrfs_encoded_io_compression_from_extent	inode.c	/^int btrfs_encoded_io_compression_from_extent(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_encoded_read	inode.c	/^ssize_t btrfs_encoded_read(struct kiocb *iocb, struct iov_iter *iter,$/;"	f	typeref:typename:ssize_t
btrfs_encoded_read_endio	inode.c	/^static void btrfs_encoded_read_endio(struct btrfs_bio *bbio)$/;"	f	typeref:typename:void	file:
btrfs_encoded_read_inline	inode.c	/^static ssize_t btrfs_encoded_read_inline($/;"	f	typeref:typename:ssize_t	file:
btrfs_encoded_read_private	inode.c	/^struct btrfs_encoded_read_private {$/;"	s	file:
btrfs_encoded_read_regular	inode.c	/^static ssize_t btrfs_encoded_read_regular(struct kiocb *iocb,$/;"	f	typeref:typename:ssize_t	file:
btrfs_encoded_read_regular_fill_pages	inode.c	/^int btrfs_encoded_read_regular_fill_pages(struct btrfs_inode *inode,$/;"	f	typeref:typename:int
btrfs_encoded_write	file.c	/^static ssize_t btrfs_encoded_write(struct kiocb *iocb, struct iov_iter *from,$/;"	f	typeref:typename:ssize_t	file:
btrfs_end_bio_work	bio.c	/^static void btrfs_end_bio_work(struct work_struct *work)$/;"	f	typeref:typename:void	file:
btrfs_end_empty_barrier	disk-io.c	/^static void btrfs_end_empty_barrier(struct bio *bio)$/;"	f	typeref:typename:void	file:
btrfs_end_enable_verity	verity.c	/^static int btrfs_end_enable_verity(struct file *filp, const void *desc,$/;"	f	typeref:typename:int	file:
btrfs_end_io_wq	bio.c	/^static struct workqueue_struct *btrfs_end_io_wq(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:workqueue_struct *	file:
btrfs_end_log_trans	tree-log.c	/^void btrfs_end_log_trans(struct btrfs_root *root)$/;"	f	typeref:typename:void
btrfs_end_repair_bio	bio.c	/^static void btrfs_end_repair_bio(struct btrfs_bio *repair_bbio,$/;"	f	typeref:typename:void	file:
btrfs_end_super_write	disk-io.c	/^static void btrfs_end_super_write(struct bio *bio)$/;"	f	typeref:typename:void	file:
btrfs_end_transaction	transaction.c	/^int btrfs_end_transaction(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:int
btrfs_end_transaction_throttle	transaction.c	/^int btrfs_end_transaction_throttle(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:int
btrfs_ensure_empty_zones	zoned.c	/^int btrfs_ensure_empty_zones(struct btrfs_device *device, u64 start, u64 size)$/;"	f	typeref:typename:int
btrfs_ensure_empty_zones	zoned.h	/^static inline int btrfs_ensure_empty_zones(struct btrfs_device *device,$/;"	f	typeref:typename:int
btrfs_err	messages.h	/^#define btrfs_err(/;"	d
btrfs_err_32bit_limit	messages.c	/^void __cold btrfs_err_32bit_limit(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void __cold
btrfs_err_in_rcu	messages.h	/^#define btrfs_err_in_rcu(/;"	d
btrfs_err_rl	messages.h	/^#define btrfs_err_rl(/;"	d
btrfs_err_rl_in_rcu	messages.h	/^#define btrfs_err_rl_in_rcu(/;"	d
btrfs_error_commit_super	disk-io.c	/^static void btrfs_error_commit_super(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
btrfs_error_unpin_extent_range	extent-tree.c	/^int btrfs_error_unpin_extent_range(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_evict_inode	inode.c	/^void btrfs_evict_inode(struct inode *inode)$/;"	f	typeref:typename:void
btrfs_exclop_balance	ioctl.c	/^void btrfs_exclop_balance(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_exclop_finish	ioctl.c	/^void btrfs_exclop_finish(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_exclop_start	ioctl.c	/^bool btrfs_exclop_start(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:bool
btrfs_exclop_start_try_lock	ioctl.c	/^bool btrfs_exclop_start_try_lock(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:bool
btrfs_exclop_start_unlock	ioctl.c	/^void btrfs_exclop_start_unlock(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_exclude_logged_extents	extent-tree.c	/^int btrfs_exclude_logged_extents(struct extent_buffer *eb)$/;"	f	typeref:typename:int
btrfs_exclusive_operation	fs.h	/^enum btrfs_exclusive_operation {$/;"	g
btrfs_exclusive_operation_show	sysfs.c	/^static ssize_t btrfs_exclusive_operation_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_exit_btrfs_fs	super.c	/^static __always_inline void btrfs_exit_btrfs_fs(void)$/;"	f	typeref:typename:__always_inline void	file:
btrfs_exit_compress	compression.c	/^void __cold btrfs_exit_compress(void)$/;"	f	typeref:typename:void __cold
btrfs_exit_sysfs	sysfs.c	/^void __cold btrfs_exit_sysfs(void)$/;"	f	typeref:typename:void __cold
btrfs_export_ops	export.c	/^const struct export_operations btrfs_export_ops = {$/;"	v	typeref:typename:const struct export_operations
btrfs_extend_item	ctree.c	/^void btrfs_extend_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void
btrfs_extent_allocation_policy	extent-tree.h	/^enum btrfs_extent_allocation_policy {$/;"	g
btrfs_extent_buffer_leak_debug_check	extent_io.c	/^void btrfs_extent_buffer_leak_debug_check(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_extent_buffer_leak_debug_check	extent_io.h	/^#define btrfs_extent_buffer_leak_debug_check(/;"	d
btrfs_extent_inline_ref_size	accessors.h	/^static inline u32 btrfs_extent_inline_ref_size(int type)$/;"	f	typeref:typename:u32
btrfs_extent_item_to_extent_map	file-item.c	/^void btrfs_extent_item_to_extent_map(struct btrfs_inode *inode,$/;"	f	typeref:typename:void
btrfs_extent_readonly	inode.c	/^static bool btrfs_extent_readonly(struct btrfs_fs_info *fs_info, u64 bytenr)$/;"	f	typeref:typename:bool	file:
btrfs_extent_root	disk-io.c	/^struct btrfs_root *btrfs_extent_root(struct btrfs_fs_info *fs_info, u64 bytenr)$/;"	f	typeref:struct:btrfs_root *
btrfs_extent_same	reflink.c	/^static int btrfs_extent_same(struct inode *src, u64 loff, u64 olen,$/;"	f	typeref:typename:int	file:
btrfs_extent_same_range	reflink.c	/^static int btrfs_extent_same_range(struct inode *src, u64 loff, u64 len,$/;"	f	typeref:typename:int	file:
btrfs_extent_state_leak_debug_check	extent-io-tree.c	/^#define btrfs_extent_state_leak_debug_check(/;"	d	file:
btrfs_extent_state_leak_debug_check	extent-io-tree.c	/^static inline void btrfs_extent_state_leak_debug_check(void)$/;"	f	typeref:typename:void	file:
btrfs_extract_ordered_extent	inode.c	/^static int btrfs_extract_ordered_extent(struct btrfs_bio *bbio,$/;"	f	typeref:typename:int	file:
btrfs_extref_hash	ctree.h	/^static inline u64 btrfs_extref_hash(u64 parent_objectid, const char *name,$/;"	f	typeref:typename:u64
btrfs_failed_bio	bio.c	/^struct btrfs_failed_bio {$/;"	s	file:
btrfs_failed_bio_pool	bio.c	/^static mempool_t btrfs_failed_bio_pool;$/;"	v	typeref:typename:mempool_t	file:
btrfs_fallocate	file.c	/^static long btrfs_fallocate(struct file *file, int mode,$/;"	f	typeref:typename:long	file:
btrfs_fallocate_update_isize	file.c	/^static int btrfs_fallocate_update_isize(struct inode *inode,$/;"	f	typeref:typename:int	file:
btrfs_fdatawrite_range	file.c	/^int btrfs_fdatawrite_range(struct inode *inode, loff_t start, loff_t end)$/;"	f	typeref:typename:int
btrfs_feature_attr	sysfs.c	/^struct btrfs_feature_attr {$/;"	s	file:
btrfs_feature_attr_group	sysfs.c	/^static const struct attribute_group btrfs_feature_attr_group = {$/;"	v	typeref:typename:const struct attribute_group	file:
btrfs_feature_attr_show	sysfs.c	/^static ssize_t btrfs_feature_attr_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_feature_attr_store	sysfs.c	/^static ssize_t btrfs_feature_attr_store(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_feature_attrs	sysfs.c	/^static struct btrfs_feature_attr btrfs_feature_attrs[FEAT_MAX][NUM_FEATURE_BITS];$/;"	v	typeref:struct:btrfs_feature_attr[][]	file:
btrfs_feature_set	sysfs.h	/^enum btrfs_feature_set {$/;"	g
btrfs_feature_set_name	sysfs.c	/^const char *btrfs_feature_set_name(enum btrfs_feature_set set)$/;"	f	typeref:typename:const char *
btrfs_feature_set_names	sysfs.c	/^static const char * const btrfs_feature_set_names[FEAT_MAX] = {$/;"	v	typeref:typename:const char * const[]	file:
btrfs_feature_visible	sysfs.c	/^static umode_t btrfs_feature_visible(struct kobject *kobj,$/;"	f	typeref:typename:umode_t	file:
btrfs_fh_to_dentry	export.c	/^static struct dentry *btrfs_fh_to_dentry(struct super_block *sb, struct fid *fh,$/;"	f	typeref:struct:dentry *	file:
btrfs_fh_to_parent	export.c	/^static struct dentry *btrfs_fh_to_parent(struct super_block *sb, struct fid *fh,$/;"	f	typeref:struct:dentry *	file:
btrfs_fid	export.h	/^struct btrfs_fid {$/;"	s
btrfs_fiemap	inode.c	/^static int btrfs_fiemap(struct inode *inode, struct fiemap_extent_info *fieinfo,$/;"	f	typeref:typename:int	file:
btrfs_file_extent_calc_inline_size	file-item.h	/^static inline u32 btrfs_file_extent_calc_inline_size(u32 datasize)$/;"	f	typeref:typename:u32
btrfs_file_extent_end	file-item.c	/^u64 btrfs_file_extent_end(const struct btrfs_path *path)$/;"	f	typeref:typename:u64
btrfs_file_extent_inline_item_len	file-item.h	/^static inline u32 btrfs_file_extent_inline_item_len($/;"	f	typeref:typename:u32
btrfs_file_extent_inline_start	file-item.h	/^static inline unsigned long btrfs_file_extent_inline_start($/;"	f	typeref:typename:unsigned long
btrfs_file_inode_operations	inode.c	/^static const struct inode_operations btrfs_file_inode_operations = {$/;"	v	typeref:typename:const struct inode_operations	file:
btrfs_file_inode_operations	inode.c	/^static const struct inode_operations btrfs_file_inode_operations;$/;"	v	typeref:typename:const struct inode_operations	file:
btrfs_file_llseek	file.c	/^static loff_t btrfs_file_llseek(struct file *file, loff_t offset, int whence)$/;"	f	typeref:typename:loff_t	file:
btrfs_file_mmap	file.c	/^static int btrfs_file_mmap(struct file	*filp, struct vm_area_struct *vma)$/;"	f	typeref:typename:int	file:
btrfs_file_open	file.c	/^static int btrfs_file_open(struct inode *inode, struct file *filp)$/;"	f	typeref:typename:int	file:
btrfs_file_operations	file.c	/^const struct file_operations btrfs_file_operations = {$/;"	v	typeref:typename:const struct file_operations
btrfs_file_private	ctree.h	/^struct btrfs_file_private {$/;"	s
btrfs_file_read_iter	file.c	/^static ssize_t btrfs_file_read_iter(struct kiocb *iocb, struct iov_iter *to)$/;"	f	typeref:typename:ssize_t	file:
btrfs_file_vm_ops	file.c	/^static const struct vm_operations_struct btrfs_file_vm_ops = {$/;"	v	typeref:typename:const struct vm_operations_struct	file:
btrfs_file_write_iter	file.c	/^static ssize_t btrfs_file_write_iter(struct kiocb *iocb, struct iov_iter *from)$/;"	f	typeref:typename:ssize_t	file:
btrfs_fileattr_get	ioctl.c	/^int btrfs_fileattr_get(struct dentry *dentry, struct fileattr *fa)$/;"	f	typeref:typename:int
btrfs_fileattr_set	ioctl.c	/^int btrfs_fileattr_set(struct mnt_idmap *idmap,$/;"	f	typeref:typename:int
btrfs_fill_inode	delayed-inode.c	/^int btrfs_fill_inode(struct inode *inode, u32 *rdev)$/;"	f	typeref:typename:int
btrfs_fill_super	super.c	/^static int btrfs_fill_super(struct super_block *sb,$/;"	f	typeref:typename:int	file:
btrfs_fill_super_partition	super.c	/^static int btrfs_fill_super_partition(struct super_block *sb,$/;"	f	typeref:typename:int	file:
btrfs_filldir	inode.c	/^static int btrfs_filldir(void *addr, int entries, struct dir_context *ctx)$/;"	f	typeref:typename:int	file:
btrfs_find_actor	inode.c	/^static int btrfs_find_actor(struct inode *inode, void *opaque)$/;"	f	typeref:typename:int	file:
btrfs_find_all_leafs	backref.c	/^int btrfs_find_all_leafs(struct btrfs_backref_walk_ctx *ctx)$/;"	f	typeref:typename:int
btrfs_find_all_roots	backref.c	/^int btrfs_find_all_roots(struct btrfs_backref_walk_ctx *ctx,$/;"	f	typeref:typename:int
btrfs_find_all_roots_safe	backref.c	/^static int btrfs_find_all_roots_safe(struct btrfs_backref_walk_ctx *ctx)$/;"	f	typeref:typename:int	file:
btrfs_find_allocatable_zones	zoned.c	/^u64 btrfs_find_allocatable_zones(struct btrfs_device *device, u64 hole_start,$/;"	f	typeref:typename:u64
btrfs_find_allocatable_zones	zoned.h	/^static inline u64 btrfs_find_allocatable_zones(struct btrfs_device *device,$/;"	f	typeref:typename:u64
btrfs_find_create_tree_block	disk-io.c	/^struct extent_buffer *btrfs_find_create_tree_block($/;"	f	typeref:struct:extent_buffer *
btrfs_find_delalloc_in_range	file.c	/^bool btrfs_find_delalloc_in_range(struct btrfs_inode *inode, u64 start, u64 end,$/;"	f	typeref:typename:bool
btrfs_find_delalloc_range	extent-io-tree.c	/^bool btrfs_find_delalloc_range(struct extent_io_tree *tree, u64 *start,$/;"	f	typeref:typename:bool
btrfs_find_delayed_ref_head	delayed-ref.c	/^btrfs_find_delayed_ref_head(struct btrfs_delayed_ref_root *delayed_refs, u64 bytenr)$/;"	f	typeref:struct:btrfs_delayed_ref_head *
btrfs_find_device	volumes.c	/^struct btrfs_device *btrfs_find_device(const struct btrfs_fs_devices *fs_devices,$/;"	f	typeref:struct:btrfs_device *
btrfs_find_device_by_devspec	volumes.c	/^struct btrfs_device *btrfs_find_device_by_devspec($/;"	f	typeref:struct:btrfs_device *
btrfs_find_item	ctree.c	/^int btrfs_find_item(struct btrfs_root *fs_root, struct btrfs_path *path,$/;"	f	typeref:typename:int
btrfs_find_name_in_backref	inode-item.c	/^struct btrfs_inode_ref *btrfs_find_name_in_backref(struct extent_buffer *leaf,$/;"	f	typeref:struct:btrfs_inode_ref *
btrfs_find_name_in_ext_backref	inode-item.c	/^struct btrfs_inode_extref *btrfs_find_name_in_ext_backref($/;"	f	typeref:struct:btrfs_inode_extref *
btrfs_find_new_delalloc_bytes	inode.c	/^static int btrfs_find_new_delalloc_bytes(struct btrfs_inode *inode,$/;"	f	typeref:typename:int	file:
btrfs_find_next_active_device	volumes.c	/^static struct btrfs_device * btrfs_find_next_active_device($/;"	f	typeref:struct:btrfs_device *	file:
btrfs_find_next_key	ctree.c	/^int btrfs_find_next_key(struct btrfs_root *root, struct btrfs_path *path,$/;"	f	typeref:typename:int
btrfs_find_one_extref	backref.c	/^int btrfs_find_one_extref(struct btrfs_root *root, u64 inode_objectid,$/;"	f	typeref:typename:int
btrfs_find_orphan_roots	root-tree.c	/^int btrfs_find_orphan_roots(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_find_root	root-tree.c	/^int btrfs_find_root(struct btrfs_root *root, const struct btrfs_key *search_key,$/;"	f	typeref:typename:int
btrfs_find_space_cluster	free-space-cache.c	/^int btrfs_find_space_cluster(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int
btrfs_find_space_for_alloc	free-space-cache.c	/^u64 btrfs_find_space_for_alloc(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:u64
btrfs_find_space_info	space-info.c	/^struct btrfs_space_info *btrfs_find_space_info(struct btrfs_fs_info *info,$/;"	f	typeref:struct:btrfs_space_info *
btrfs_finish_block_group_to_copy	dev-replace.c	/^bool btrfs_finish_block_group_to_copy(struct btrfs_device *srcdev,$/;"	f	typeref:typename:bool
btrfs_finish_compressed_write_work	compression.c	/^static void btrfs_finish_compressed_write_work(struct work_struct *work)$/;"	f	typeref:typename:void	file:
btrfs_finish_discard_pass	discard.c	/^static void btrfs_finish_discard_pass(struct btrfs_discard_ctl *discard_ctl,$/;"	f	typeref:typename:void	file:
btrfs_finish_extent_commit	extent-tree.c	/^int btrfs_finish_extent_commit(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:int
btrfs_finish_one_ordered	inode.c	/^int btrfs_finish_one_ordered(struct btrfs_ordered_extent *ordered_extent)$/;"	f	typeref:typename:int
btrfs_finish_ordered_extent	ordered-data.c	/^bool btrfs_finish_ordered_extent(struct btrfs_ordered_extent *ordered,$/;"	f	typeref:typename:bool
btrfs_finish_ordered_io	inode.c	/^int btrfs_finish_ordered_io(struct btrfs_ordered_extent *ordered)$/;"	f	typeref:typename:int
btrfs_finish_ordered_zoned	zoned.c	/^void btrfs_finish_ordered_zoned(struct btrfs_ordered_extent *ordered)$/;"	f	typeref:typename:void
btrfs_finish_sprout	volumes.c	/^static int btrfs_finish_sprout(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:int	file:
btrfs_first_delayed_node	delayed-inode.c	/^static struct btrfs_delayed_node *btrfs_first_delayed_node($/;"	f	typeref:struct:btrfs_delayed_node *	file:
btrfs_first_prepared_delayed_node	delayed-inode.c	/^static struct btrfs_delayed_node *btrfs_first_prepared_delayed_node($/;"	f	typeref:struct:btrfs_delayed_node *	file:
btrfs_flush_state	space-info.h	/^enum btrfs_flush_state {$/;"	g
btrfs_flush_workqueue	async-thread.c	/^void btrfs_flush_workqueue(struct btrfs_workqueue *wq)$/;"	f	typeref:typename:void
btrfs_for_each_slot	ctree.h	/^#define btrfs_for_each_slot(/;"	d
btrfs_force_chunk_alloc	block-group.c	/^int btrfs_force_chunk_alloc(struct btrfs_trans_handle *trans, u64 type)$/;"	f	typeref:typename:int
btrfs_force_chunk_alloc_store	sysfs.c	/^static ssize_t btrfs_force_chunk_alloc_store(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_forget_devices	volumes.c	/^int btrfs_forget_devices(dev_t devt)$/;"	f	typeref:typename:int
btrfs_free_backref_share_ctx	backref.c	/^void btrfs_free_backref_share_ctx(struct btrfs_backref_share_check_ctx *ctx)$/;"	f	typeref:typename:void
btrfs_free_block_groups	block-group.c	/^int btrfs_free_block_groups(struct btrfs_fs_info *info)$/;"	f	typeref:typename:int
btrfs_free_block_rsv	block-rsv.c	/^void btrfs_free_block_rsv(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_free_chunk	volumes.c	/^static int btrfs_free_chunk(struct btrfs_trans_handle *trans, u64 chunk_offset)$/;"	f	typeref:typename:int	file:
btrfs_free_cluster	fs.h	/^struct btrfs_free_cluster {$/;"	s
btrfs_free_compressed_pages	compression.c	/^static void btrfs_free_compressed_pages(struct compressed_bio *cb)$/;"	f	typeref:typename:void	file:
btrfs_free_csum_hash	disk-io.c	/^static void btrfs_free_csum_hash(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
btrfs_free_delayed_extent_op	delayed-ref.h	/^btrfs_free_delayed_extent_op(struct btrfs_delayed_extent_op *op)$/;"	f	typeref:typename:void
btrfs_free_dev_extent	volumes.c	/^static int btrfs_free_dev_extent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_free_device	volumes.c	/^static void btrfs_free_device(struct btrfs_device *device)$/;"	f	typeref:typename:void	file:
btrfs_free_dummy_block_group	tests/btrfs-tests.c	/^void btrfs_free_dummy_block_group(struct btrfs_block_group *cache)$/;"	f	typeref:typename:void
btrfs_free_dummy_device	tests/btrfs-tests.c	/^static void btrfs_free_dummy_device(struct btrfs_device *dev)$/;"	f	typeref:typename:void	file:
btrfs_free_dummy_fs_info	tests/btrfs-tests.c	/^void btrfs_free_dummy_fs_info(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_free_dummy_root	tests/btrfs-tests.c	/^void btrfs_free_dummy_root(struct btrfs_root *root)$/;"	f	typeref:typename:void
btrfs_free_excluded_extents	block-group.c	/^static inline void btrfs_free_excluded_extents(const struct btrfs_block_group *bg)$/;"	f	typeref:typename:void	file:
btrfs_free_extent	extent-tree.c	/^int btrfs_free_extent(struct btrfs_trans_handle *trans, struct btrfs_ref *ref)$/;"	f	typeref:typename:int
btrfs_free_extra_devids	volumes.c	/^void btrfs_free_extra_devids(struct btrfs_fs_devices *fs_devices)$/;"	f	typeref:typename:void
btrfs_free_fs_info	disk-io.c	/^void btrfs_free_fs_info(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_free_fs_roots	disk-io.c	/^void btrfs_free_fs_roots(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_free_inode	inode.c	/^void btrfs_free_inode(struct inode *inode)$/;"	f	typeref:typename:void
btrfs_free_log	tree-log.c	/^int btrfs_free_log(struct btrfs_trans_handle *trans, struct btrfs_root *root)$/;"	f	typeref:typename:int
btrfs_free_log_root_tree	tree-log.c	/^int btrfs_free_log_root_tree(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_free_path	ctree.c	/^void btrfs_free_path(struct btrfs_path *p)$/;"	f	typeref:typename:void
btrfs_free_qgroup_config	qgroup.c	/^void btrfs_free_qgroup_config(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_free_ref_cache	ref-verify.c	/^void btrfs_free_ref_cache(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_free_ref_cache	ref-verify.h	/^static inline void btrfs_free_ref_cache(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_free_ref_tree_range	ref-verify.c	/^void btrfs_free_ref_tree_range(struct btrfs_fs_info *fs_info, u64 start,$/;"	f	typeref:typename:void
btrfs_free_ref_tree_range	ref-verify.h	/^static inline void btrfs_free_ref_tree_range(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_free_reserved_bytes	block-group.c	/^void btrfs_free_reserved_bytes(struct btrfs_block_group *cache,$/;"	f	typeref:typename:void
btrfs_free_reserved_data_space	delalloc-space.c	/^void btrfs_free_reserved_data_space(struct btrfs_inode *inode,$/;"	f	typeref:typename:void
btrfs_free_reserved_data_space_noquota	delalloc-space.c	/^void btrfs_free_reserved_data_space_noquota(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_free_reserved_extent	extent-tree.c	/^int btrfs_free_reserved_extent(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_free_space	free-space-cache.h	/^struct btrfs_free_space {$/;"	s
btrfs_free_space_bitmap_cachep	free-space-cache.c	/^static struct kmem_cache *btrfs_free_space_bitmap_cachep;$/;"	v	typeref:struct:kmem_cache *	file:
btrfs_free_space_cache_v1_active	free-space-cache.c	/^bool btrfs_free_space_cache_v1_active(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:bool
btrfs_free_space_cachep	free-space-cache.c	/^static struct kmem_cache *btrfs_free_space_cachep;$/;"	v	typeref:struct:kmem_cache *	file:
btrfs_free_space_ctl	free-space-cache.h	/^struct btrfs_free_space_ctl {$/;"	s
btrfs_free_space_exit	free-space-cache.c	/^void __cold btrfs_free_space_exit(void)$/;"	f	typeref:typename:void __cold
btrfs_free_space_init	free-space-cache.c	/^int __init btrfs_free_space_init(void)$/;"	f	typeref:typename:int __init
btrfs_free_space_inode_key	free-space-cache.c	/^static struct lock_class_key btrfs_free_space_inode_key;$/;"	v	typeref:struct:lock_class_key	file:
btrfs_free_space_key	accessors.h	/^static inline void btrfs_free_space_key(const struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_free_space_op	free-space-cache.h	/^struct btrfs_free_space_op {$/;"	s
btrfs_free_space_root	free-space-tree.c	/^static struct btrfs_root *btrfs_free_space_root($/;"	f	typeref:struct:btrfs_root *	file:
btrfs_free_space_trimmed	free-space-cache.h	/^static inline bool btrfs_free_space_trimmed(struct btrfs_free_space *info)$/;"	f	typeref:typename:bool
btrfs_free_space_trimming_bitmap	free-space-cache.h	/^static inline bool btrfs_free_space_trimming_bitmap($/;"	f	typeref:typename:bool
btrfs_free_stale_devices	volumes.c	/^static int btrfs_free_stale_devices(dev_t devt, struct btrfs_device *skip_device)$/;"	f	typeref:typename:int	file:
btrfs_free_stripe_hash_table	raid56.c	/^void btrfs_free_stripe_hash_table(struct btrfs_fs_info *info)$/;"	f	typeref:typename:void
btrfs_free_subpage	subpage.c	/^void btrfs_free_subpage(struct btrfs_subpage *subpage)$/;"	f	typeref:typename:void
btrfs_free_swapfile_pins	inode.c	/^static void btrfs_free_swapfile_pins(struct inode *inode)$/;"	f	typeref:typename:void	file:
btrfs_free_tree_block	extent-tree.c	/^void btrfs_free_tree_block(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void
btrfs_free_zone_cache	zoned.c	/^void btrfs_free_zone_cache(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_free_zone_cache	zoned.h	/^static inline void btrfs_free_zone_cache(struct btrfs_fs_info *fs_info) { }$/;"	f	typeref:typename:void
btrfs_freeze	super.c	/^static int btrfs_freeze(struct super_block *sb)$/;"	f	typeref:typename:int	file:
btrfs_freeze_block_group	block-group.c	/^void btrfs_freeze_block_group(struct btrfs_block_group *cache)$/;"	f	typeref:typename:void
btrfs_fs_closing	fs.h	/^static inline int btrfs_fs_closing(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_fs_compat_ro	fs.h	/^#define btrfs_fs_compat_ro(/;"	d
btrfs_fs_devices	volumes.h	/^struct btrfs_fs_devices {$/;"	s
btrfs_fs_incompat	fs.h	/^#define btrfs_fs_incompat(/;"	d
btrfs_fs_info	fs.h	/^struct btrfs_fs_info {$/;"	s
btrfs_fs_type	super.c	/^static struct file_system_type btrfs_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
btrfs_fs_type	super.c	/^static struct file_system_type btrfs_fs_type;$/;"	v	typeref:struct:file_system_type	file:
btrfs_full_stripe_len	volumes.c	/^unsigned long btrfs_full_stripe_len(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:unsigned long
btrfs_func_t	async-thread.h	/^typedef void (*btrfs_func_t)(struct btrfs_work *arg);$/;"	t	typeref:typename:void (*)(struct btrfs_work * arg)
btrfs_generation_show	sysfs.c	/^static ssize_t btrfs_generation_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_get_acl	acl.c	/^struct posix_acl *btrfs_get_acl(struct inode *inode, int type, bool rcu)$/;"	f	typeref:struct:posix_acl *
btrfs_get_acl	acl.h	/^#define btrfs_get_acl /;"	d
btrfs_get_alloc_profile	block-group.c	/^u64 btrfs_get_alloc_profile(struct btrfs_fs_info *fs_info, u64 orig_flags)$/;"	f	typeref:typename:u64
btrfs_get_bdev_and_sb	volumes.c	/^static int btrfs_get_bdev_and_sb(const char *device_path, blk_mode_t flags, void *holder,$/;"	f	typeref:typename:int	file:
btrfs_get_bdev_and_sb_partition	volumes.c	/^static int btrfs_get_bdev_and_sb_partition(const char *device_path, blk_mode_t flags, void *hold/;"	f	typeref:typename:int	file:
btrfs_get_bioc	volumes.c	/^void btrfs_get_bioc(struct btrfs_io_context *bioc)$/;"	f	typeref:typename:void
btrfs_get_block_group	block-group.c	/^void btrfs_get_block_group(struct btrfs_block_group *cache)$/;"	f	typeref:typename:void
btrfs_get_blocks_direct_write	inode.c	/^static int btrfs_get_blocks_direct_write(struct extent_map **map,$/;"	f	typeref:typename:int	file:
btrfs_get_caching_control	block-group.c	/^struct btrfs_caching_control *btrfs_get_caching_control($/;"	f	typeref:struct:btrfs_caching_control *
btrfs_get_chunk_map	volumes.c	/^struct extent_map *btrfs_get_chunk_map(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:extent_map *
btrfs_get_delayed_node	delayed-inode.c	/^static struct btrfs_delayed_node *btrfs_get_delayed_node($/;"	f	typeref:struct:btrfs_delayed_node *	file:
btrfs_get_dentry	export.c	/^struct dentry *btrfs_get_dentry(struct super_block *sb, u64 objectid,$/;"	f	typeref:struct:dentry *
btrfs_get_dev_args_from_path	volumes.c	/^int btrfs_get_dev_args_from_path(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_get_dev_stats	volumes.c	/^int btrfs_get_dev_stats(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_get_dev_zone	zoned.c	/^int btrfs_get_dev_zone(struct btrfs_device *device, u64 pos,$/;"	f	typeref:typename:int
btrfs_get_dev_zone	zoned.h	/^static inline int btrfs_get_dev_zone(struct btrfs_device *device, u64 pos,$/;"	f	typeref:typename:int
btrfs_get_dev_zone_info	zoned.c	/^int btrfs_get_dev_zone_info(struct btrfs_device *device, bool populate_cache)$/;"	f	typeref:typename:int
btrfs_get_dev_zone_info	zoned.h	/^static inline int btrfs_get_dev_zone_info(struct btrfs_device *device,$/;"	f	typeref:typename:int
btrfs_get_dev_zone_info_all_devices	zoned.c	/^int btrfs_get_dev_zone_info_all_devices(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_get_dev_zone_info_all_devices	zoned.h	/^static inline int btrfs_get_dev_zone_info_all_devices(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_get_dev_zones	zoned.c	/^static int btrfs_get_dev_zones(struct btrfs_device *device, u64 pos,$/;"	f	typeref:typename:int	file:
btrfs_get_dir_last_index	inode.c	/^static int btrfs_get_dir_last_index(struct btrfs_inode *dir, u64 *index)$/;"	f	typeref:typename:int	file:
btrfs_get_extent	inode.c	/^struct extent_map *btrfs_get_extent(struct btrfs_inode *inode,$/;"	f	typeref:struct:extent_map *
btrfs_get_extent_inline_ref_type	extent-tree.c	/^int btrfs_get_extent_inline_ref_type(const struct extent_buffer *eb,$/;"	f	typeref:typename:int
btrfs_get_first_dir_index_to_log	btrfs_inode.h	/^static inline u64 btrfs_get_first_dir_index_to_log(const struct btrfs_inode *inode)$/;"	f	typeref:typename:u64
btrfs_get_free_objectid	disk-io.c	/^int btrfs_get_free_objectid(struct btrfs_root *root, u64 *objectid)$/;"	f	typeref:typename:int
btrfs_get_fs_root	disk-io.c	/^struct btrfs_root *btrfs_get_fs_root(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_root *
btrfs_get_fs_root_commit_root	disk-io.c	/^struct btrfs_root *btrfs_get_fs_root_commit_root(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_root *
btrfs_get_fs_uuids	volumes.c	/^struct list_head * __attribute_const__ btrfs_get_fs_uuids(void)$/;"	f	typeref:struct:list_head * __attribute_const__
btrfs_get_global_root	disk-io.c	/^static struct btrfs_root *btrfs_get_global_root(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_root *	file:
btrfs_get_last_root_drop_gen	fs.h	/^static inline u64 btrfs_get_last_root_drop_gen(const struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:u64
btrfs_get_name	export.c	/^static int btrfs_get_name(struct dentry *parent, char *name,$/;"	f	typeref:typename:int	file:
btrfs_get_new_fs_root	disk-io.c	/^struct btrfs_root *btrfs_get_new_fs_root(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_root *
btrfs_get_next_valid_item	ctree.c	/^int btrfs_get_next_valid_item(struct btrfs_root *root, struct btrfs_key *key,$/;"	f	typeref:typename:int
btrfs_get_num_csums	ctree.c	/^size_t __attribute_const__ btrfs_get_num_csums(void)$/;"	f	typeref:typename:size_t __attribute_const__
btrfs_get_num_tolerated_disk_barrier_failures	disk-io.c	/^int btrfs_get_num_tolerated_disk_barrier_failures(u64 flags)$/;"	f	typeref:typename:int
btrfs_get_old_root	tree-mod-log.c	/^struct extent_buffer *btrfs_get_old_root(struct btrfs_root *root, u64 time_seq)$/;"	f	typeref:struct:extent_buffer *
btrfs_get_or_create_delayed_node	delayed-inode.c	/^static struct btrfs_delayed_node *btrfs_get_or_create_delayed_node($/;"	f	typeref:struct:btrfs_delayed_node *	file:
btrfs_get_ordered_extents_for_logging	ordered-data.c	/^void btrfs_get_ordered_extents_for_logging(struct btrfs_inode *inode,$/;"	f	typeref:typename:void
btrfs_get_parent	export.c	/^struct dentry *btrfs_get_parent(struct dentry *child)$/;"	f	typeref:struct:dentry *
btrfs_get_reloc_bg_bytenr	relocation.c	/^u64 btrfs_get_reloc_bg_bytenr(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:u64
btrfs_get_root_ref	disk-io.c	/^static struct btrfs_root *btrfs_get_root_ref(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_root *	file:
btrfs_get_subvol_name_from_objectid	super.c	/^char *btrfs_get_subvol_name_from_objectid(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:char *
btrfs_get_tree_mod_seq	tree-mod-log.c	/^u64 btrfs_get_tree_mod_seq(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:u64
btrfs_get_verity_descriptor	verity.c	/^int btrfs_get_verity_descriptor(struct inode *inode, void *buf, size_t buf_size)$/;"	f	typeref:typename:int
btrfs_get_verity_descriptor	verity.h	/^static inline int btrfs_get_verity_descriptor(struct inode *inode, void *buf,$/;"	f	typeref:typename:int
btrfs_get_workspace	compression.c	/^struct list_head *btrfs_get_workspace(int type, unsigned int level)$/;"	f	typeref:struct:list_head *
btrfs_getattr	inode.c	/^static int btrfs_getattr(struct mnt_idmap *idmap,$/;"	f	typeref:typename:int	file:
btrfs_getxattr	xattr.c	/^int btrfs_getxattr(struct inode *inode, const char *name,$/;"	f	typeref:typename:int
btrfs_global_root	disk-io.c	/^struct btrfs_root *btrfs_global_root(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_root *
btrfs_global_root_delete	disk-io.c	/^void btrfs_global_root_delete(struct btrfs_root *root)$/;"	f	typeref:typename:void
btrfs_global_root_id	disk-io.c	/^static u64 btrfs_global_root_id(struct btrfs_fs_info *fs_info, u64 bytenr)$/;"	f	typeref:typename:u64	file:
btrfs_global_root_insert	disk-io.c	/^int btrfs_global_root_insert(struct btrfs_root *root)$/;"	f	typeref:typename:int
btrfs_grab_block_group	extent-tree.c	/^static inline void btrfs_grab_block_group(struct btrfs_block_group *cache,$/;"	f	typeref:typename:void	file:
btrfs_grab_root	disk-io.h	/^static inline struct btrfs_root *btrfs_grab_root(struct btrfs_root *root)$/;"	f	typeref:struct:btrfs_root *
btrfs_grow_device	volumes.c	/^int btrfs_grow_device(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_handle_fs_error	messages.h	/^#define btrfs_handle_fs_error(/;"	d
btrfs_header_backref_rev	accessors.h	/^static inline int btrfs_header_backref_rev(const struct extent_buffer *eb)$/;"	f	typeref:typename:int
btrfs_header_flag	accessors.h	/^static inline int btrfs_header_flag(const struct extent_buffer *eb, u64 flag)$/;"	f	typeref:typename:int
btrfs_heuristic_compress	compression.c	/^const struct btrfs_compress_op btrfs_heuristic_compress = {$/;"	v	typeref:typename:const struct btrfs_compress_op
btrfs_i_size_write	btrfs_inode.h	/^static inline void btrfs_i_size_write(struct btrfs_inode *inode, u64 size)$/;"	f	typeref:typename:void
btrfs_iget	inode.c	/^struct inode *btrfs_iget(struct super_block *s, u64 ino, struct btrfs_root *root)$/;"	f	typeref:struct:inode *
btrfs_iget_args	inode.c	/^struct btrfs_iget_args {$/;"	s	file:
btrfs_iget_locked	inode.c	/^static struct inode *btrfs_iget_locked(struct super_block *s, u64 ino,$/;"	f	typeref:struct:inode *	file:
btrfs_iget_path	inode.c	/^struct inode *btrfs_iget_path(struct super_block *s, u64 ino,$/;"	f	typeref:struct:inode *
btrfs_ignore_prop	props.c	/^bool btrfs_ignore_prop(const struct btrfs_inode *inode, const char *name)$/;"	f	typeref:typename:bool
btrfs_ilock_type	btrfs_inode.h	/^enum btrfs_ilock_type {$/;"	g
btrfs_inc_block_group_reservations	extent-tree.c	/^btrfs_inc_block_group_reservations(struct btrfs_block_group *bg)$/;"	f	typeref:typename:void	file:
btrfs_inc_block_group_ro	block-group.c	/^int btrfs_inc_block_group_ro(struct btrfs_block_group *cache,$/;"	f	typeref:typename:int
btrfs_inc_block_group_swap_extents	block-group.c	/^bool btrfs_inc_block_group_swap_extents(struct btrfs_block_group *bg)$/;"	f	typeref:typename:bool
btrfs_inc_extent_ref	extent-tree.c	/^int btrfs_inc_extent_ref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_inc_nocow_writers	block-group.c	/^struct btrfs_block_group *btrfs_inc_nocow_writers(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_block_group *
btrfs_inc_ref	extent-tree.c	/^int btrfs_inc_ref(struct btrfs_trans_handle *trans, struct btrfs_root *root,$/;"	f	typeref:typename:int
btrfs_inc_tree_mod_seq	tree-mod-log.c	/^static inline u64 btrfs_inc_tree_mod_seq(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:u64	file:
btrfs_info	messages.h	/^#define btrfs_info(/;"	d
btrfs_info_in_rcu	messages.h	/^#define btrfs_info_in_rcu(/;"	d
btrfs_info_rl	messages.h	/^#define btrfs_info_rl(/;"	d
btrfs_info_rl_in_rcu	messages.h	/^#define btrfs_info_rl_in_rcu(/;"	d
btrfs_inherit_iflags	inode.c	/^static void btrfs_inherit_iflags(struct btrfs_inode *inode, struct btrfs_inode *dir)$/;"	f	typeref:typename:void	file:
btrfs_init_async_reclaim_work	space-info.c	/^void btrfs_init_async_reclaim_work(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_init_balance	disk-io.c	/^static void btrfs_init_balance(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
btrfs_init_block_rsv	block-rsv.c	/^void btrfs_init_block_rsv(struct btrfs_block_rsv *rsv, enum btrfs_rsv_type type)$/;"	f	typeref:typename:void
btrfs_init_btree_inode	disk-io.c	/^static int btrfs_init_btree_inode(struct super_block *sb)$/;"	f	typeref:typename:int	file:
btrfs_init_cachep	inode.c	/^int __init btrfs_init_cachep(void)$/;"	f	typeref:typename:int __init
btrfs_init_compress	compression.c	/^int __init btrfs_init_compress(void)$/;"	f	typeref:typename:int __init
btrfs_init_csum_hash	disk-io.c	/^static int btrfs_init_csum_hash(struct btrfs_fs_info *fs_info, u16 csum_type)$/;"	f	typeref:typename:int	file:
btrfs_init_data_ref	delayed-ref.h	/^static inline void btrfs_init_data_ref(struct btrfs_ref *generic_ref,$/;"	f	typeref:typename:void
btrfs_init_delayed_node	delayed-inode.c	/^static inline void btrfs_init_delayed_node($/;"	f	typeref:typename:void	file:
btrfs_init_delayed_root	delayed-inode.h	/^static inline void btrfs_init_delayed_root($/;"	f	typeref:typename:void
btrfs_init_dev_replace	dev-replace.c	/^int btrfs_init_dev_replace(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_init_dev_replace_locks	disk-io.c	/^static void btrfs_init_dev_replace_locks(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
btrfs_init_dev_replace_tgtdev	dev-replace.c	/^static int btrfs_init_dev_replace_tgtdev(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
btrfs_init_dev_stats	volumes.c	/^int btrfs_init_dev_stats(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_init_devices_late	volumes.c	/^int btrfs_init_devices_late(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_init_dummy_trans	tests/btrfs-tests.c	/^void btrfs_init_dummy_trans(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void
btrfs_init_free_cluster	free-space-cache.c	/^void btrfs_init_free_cluster(struct btrfs_free_cluster *cluster)$/;"	f	typeref:typename:void
btrfs_init_free_space_ctl	free-space-cache.c	/^void btrfs_init_free_space_ctl(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:void
btrfs_init_fs_info	disk-io.c	/^void btrfs_init_fs_info(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_init_fs_root	disk-io.c	/^static int btrfs_init_fs_root(struct btrfs_root *root, dev_t anon_dev)$/;"	f	typeref:typename:int	file:
btrfs_init_generic_ref	delayed-ref.h	/^static inline void btrfs_init_generic_ref(struct btrfs_ref *generic_ref,$/;"	f	typeref:typename:void
btrfs_init_global_block_rsv	block-rsv.c	/^void btrfs_init_global_block_rsv(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_init_inode_security	inode.c	/^static int btrfs_init_inode_security(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_init_locked_inode	inode.c	/^static int btrfs_init_locked_inode(struct inode *inode, void *p)$/;"	f	typeref:typename:int	file:
btrfs_init_log_ctx	tree-log.h	/^static inline void btrfs_init_log_ctx(struct btrfs_log_ctx *ctx,$/;"	f	typeref:typename:void
btrfs_init_log_root_tree	disk-io.c	/^int btrfs_init_log_root_tree(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_init_map_token	accessors.c	/^void btrfs_init_map_token(struct btrfs_map_token *token, struct extent_buffer *eb)$/;"	f	typeref:typename:void
btrfs_init_metadata_block_rsv	block-rsv.c	/^void btrfs_init_metadata_block_rsv(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_init_new_buffer	extent-tree.c	/^btrfs_init_new_buffer(struct btrfs_trans_handle *trans, struct btrfs_root *root,$/;"	f	typeref:struct:extent_buffer *	file:
btrfs_init_new_device	volumes.c	/^int btrfs_init_new_device(struct btrfs_fs_info *fs_info, const char *device_path)$/;"	f	typeref:typename:int
btrfs_init_qgroup	disk-io.c	/^static void btrfs_init_qgroup(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
btrfs_init_ref_verify	ref-verify.h	/^static inline void btrfs_init_ref_verify(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_init_reloc_root	relocation.c	/^int btrfs_init_reloc_root(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_init_root_block_rsv	block-rsv.c	/^void btrfs_init_root_block_rsv(struct btrfs_root *root)$/;"	f	typeref:typename:void
btrfs_init_root_free_objectid	disk-io.c	/^int btrfs_init_root_free_objectid(struct btrfs_root *root)$/;"	f	typeref:typename:int
btrfs_init_scrub	disk-io.c	/^static void btrfs_init_scrub(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
btrfs_init_space_info	space-info.c	/^int btrfs_init_space_info(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_init_sprout	volumes.c	/^static struct btrfs_fs_devices *btrfs_init_sprout(struct btrfs_fs_info *fs_info)$/;"	f	typeref:struct:btrfs_fs_devices *	file:
btrfs_init_subpage_info	subpage.c	/^void btrfs_init_subpage_info(struct btrfs_subpage_info *subpage_info, u32 sectorsize)$/;"	f	typeref:typename:void
btrfs_init_sysfs	sysfs.c	/^int __init btrfs_init_sysfs(void)$/;"	f	typeref:typename:int __init
btrfs_init_test_fs	tests/btrfs-tests.c	/^static int btrfs_init_test_fs(void)$/;"	f	typeref:typename:int	file:
btrfs_init_tree_ref	delayed-ref.h	/^static inline void btrfs_init_tree_ref(struct btrfs_ref *generic_ref,$/;"	f	typeref:typename:void
btrfs_init_work	async-thread.c	/^void btrfs_init_work(struct btrfs_work *work, btrfs_func_t func,$/;"	f	typeref:typename:void
btrfs_init_workqueue	async-thread.c	/^static void btrfs_init_workqueue(struct btrfs_workqueue *wq,$/;"	f	typeref:typename:void	file:
btrfs_init_workqueues	disk-io.c	/^static int btrfs_init_workqueues(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int	file:
btrfs_init_workspace_manager	compression.c	/^static void btrfs_init_workspace_manager(int type)$/;"	f	typeref:typename:void	file:
btrfs_initxattrs	xattr.c	/^static int btrfs_initxattrs(struct inode *inode,$/;"	f	typeref:typename:int	file:
btrfs_inline_ref_type	extent-tree.h	/^enum btrfs_inline_ref_type {$/;"	g
btrfs_ino	btrfs_inode.h	/^static inline u64 btrfs_ino(const struct btrfs_inode *inode)$/;"	f	typeref:typename:u64
btrfs_ino_list	tree-log.c	/^struct btrfs_ino_list {$/;"	s	file:
btrfs_inode	btrfs_inode.h	/^struct btrfs_inode {$/;"	s
btrfs_inode_by_name	inode.c	/^static int btrfs_inode_by_name(struct btrfs_inode *dir, struct dentry *dentry,$/;"	f	typeref:typename:int	file:
btrfs_inode_cachep	inode.c	/^static struct kmem_cache *btrfs_inode_cachep;$/;"	v	typeref:struct:kmem_cache *	file:
btrfs_inode_can_compress	btrfs_inode.h	/^static inline bool btrfs_inode_can_compress(const struct btrfs_inode *inode)$/;"	f	typeref:typename:bool
btrfs_inode_clear_file_extent_range	file-item.c	/^int btrfs_inode_clear_file_extent_range(struct btrfs_inode *inode, u64 start,$/;"	f	typeref:typename:int
btrfs_inode_combine_flags	inode-item.h	/^static inline u64 btrfs_inode_combine_flags(u32 flags, u32 ro_flags)$/;"	f	typeref:typename:u64
btrfs_inode_defrag_cachep	defrag.c	/^static struct kmem_cache *btrfs_inode_defrag_cachep;$/;"	v	typeref:struct:kmem_cache *	file:
btrfs_inode_delayed_dir_index_count	delayed-inode.c	/^int btrfs_inode_delayed_dir_index_count(struct btrfs_inode *inode)$/;"	f	typeref:typename:int
btrfs_inode_flags_to_fsflags	ioctl.c	/^static unsigned int btrfs_inode_flags_to_fsflags(struct btrfs_inode *binode)$/;"	f	typeref:typename:unsigned int	file:
btrfs_inode_hash	btrfs_inode.h	/^static inline unsigned long btrfs_inode_hash(u64 objectid,$/;"	f	typeref:typename:unsigned long
btrfs_inode_in_log	btrfs_inode.h	/^static inline bool btrfs_inode_in_log(struct btrfs_inode *inode, u64 generation)$/;"	f	typeref:typename:bool
btrfs_inode_info	send.c	/^struct btrfs_inode_info {$/;"	s	file:
btrfs_inode_inherit_props	props.c	/^int btrfs_inode_inherit_props(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_inode_lock	inode.c	/^int btrfs_inode_lock(struct btrfs_inode *inode, unsigned int ilock_flags)$/;"	f	typeref:typename:int
btrfs_inode_rsv_release	delalloc-space.c	/^static void btrfs_inode_rsv_release(struct btrfs_inode *inode, bool qgroup_free)$/;"	f	typeref:typename:void	file:
btrfs_inode_safe_disk_i_size_write	file-item.c	/^void btrfs_inode_safe_disk_i_size_write(struct btrfs_inode *inode, u64 new_i_size)$/;"	f	typeref:typename:void
btrfs_inode_set_file_extent_range	file-item.c	/^int btrfs_inode_set_file_extent_range(struct btrfs_inode *inode, u64 start,$/;"	f	typeref:typename:int
btrfs_inode_split_flags	inode-item.h	/^static inline void btrfs_inode_split_flags(u64 inode_item_flags,$/;"	f	typeref:typename:void
btrfs_inode_type	inode.c	/^static inline u8 btrfs_inode_type(struct inode *inode)$/;"	f	typeref:typename:u8	file:
btrfs_inode_unlock	inode.c	/^void btrfs_inode_unlock(struct btrfs_inode *inode, unsigned int ilock_flags)$/;"	f	typeref:typename:void
btrfs_insert_delayed_dir_index	delayed-inode.c	/^int btrfs_insert_delayed_dir_index(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_insert_delayed_item	delayed-inode.c	/^static int btrfs_insert_delayed_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_insert_delayed_items	delayed-inode.c	/^static int btrfs_insert_delayed_items(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_insert_dir_item	dir-item.c	/^int btrfs_insert_dir_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_insert_empty_inode	inode-item.c	/^int btrfs_insert_empty_inode(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_insert_empty_item	ctree.h	/^static inline int btrfs_insert_empty_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_insert_empty_items	ctree.c	/^int btrfs_insert_empty_items(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_insert_fs_root	disk-io.c	/^int btrfs_insert_fs_root(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_insert_hole_extent	file-item.c	/^int btrfs_insert_hole_extent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_insert_inode_extref	inode-item.c	/^static int btrfs_insert_inode_extref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_insert_inode_locked	inode.c	/^static int btrfs_insert_inode_locked(struct inode *inode)$/;"	f	typeref:typename:int	file:
btrfs_insert_inode_ref	inode-item.c	/^int btrfs_insert_inode_ref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_insert_item	ctree.c	/^int btrfs_insert_item(struct btrfs_trans_handle *trans, struct btrfs_root *root,$/;"	f	typeref:typename:int
btrfs_insert_orphan_item	orphan.c	/^int btrfs_insert_orphan_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_insert_replace_extent	file.c	/^static int btrfs_insert_replace_extent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_insert_root	root-tree.c	/^int btrfs_insert_root(struct btrfs_trans_handle *trans, struct btrfs_root *root,$/;"	f	typeref:typename:int
btrfs_insert_xattr_item	dir-item.c	/^int btrfs_insert_xattr_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_interface_exit	super.c	/^static __cold void btrfs_interface_exit(void)$/;"	f	typeref:typename:__cold void	file:
btrfs_interface_init	super.c	/^static int __init btrfs_interface_init(void)$/;"	f	typeref:typename:int __init	file:
btrfs_invalidate_folio	inode.c	/^static void btrfs_invalidate_folio(struct folio *folio, size_t offset,$/;"	f	typeref:typename:void	file:
btrfs_io_context	volumes.h	/^struct btrfs_io_context {$/;"	s
btrfs_io_ctl	free-space-cache.h	/^struct btrfs_io_ctl {$/;"	s
btrfs_io_stripe	volumes.h	/^struct btrfs_io_stripe {$/;"	s
btrfs_ioctl	ioctl.c	/^long btrfs_ioctl(struct file *file, unsigned int$/;"	f	typeref:typename:long
btrfs_ioctl_add_dev	ioctl.c	/^static long btrfs_ioctl_add_dev(struct btrfs_fs_info *fs_info, void __user *arg)$/;"	f	typeref:typename:long	file:
btrfs_ioctl_balance	ioctl.c	/^static long btrfs_ioctl_balance(struct file *file, void __user *arg)$/;"	f	typeref:typename:long	file:
btrfs_ioctl_balance_ctl	ioctl.c	/^static long btrfs_ioctl_balance_ctl(struct btrfs_fs_info *fs_info, int cmd)$/;"	f	typeref:typename:long	file:
btrfs_ioctl_balance_progress	ioctl.c	/^static long btrfs_ioctl_balance_progress(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:long	file:
btrfs_ioctl_default_subvol	ioctl.c	/^static long btrfs_ioctl_default_subvol(struct file *file, void __user *argp)$/;"	f	typeref:typename:long	file:
btrfs_ioctl_defrag	ioctl.c	/^static int btrfs_ioctl_defrag(struct file *file, void __user *argp)$/;"	f	typeref:typename:int	file:
btrfs_ioctl_dev_info	ioctl.c	/^static long btrfs_ioctl_dev_info(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:long	file:
btrfs_ioctl_dev_replace	ioctl.c	/^static long btrfs_ioctl_dev_replace(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:long	file:
btrfs_ioctl_encoded_io_args_32	ioctl.c	/^struct btrfs_ioctl_encoded_io_args_32 {$/;"	s	file:
btrfs_ioctl_encoded_read	ioctl.c	/^static int btrfs_ioctl_encoded_read(struct file *file, void __user *argp,$/;"	f	typeref:typename:int	file:
btrfs_ioctl_encoded_write	ioctl.c	/^static int btrfs_ioctl_encoded_write(struct file *file, void __user *argp, bool compat)$/;"	f	typeref:typename:int	file:
btrfs_ioctl_fitrim	ioctl.c	/^static noinline int btrfs_ioctl_fitrim(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:noinline int	file:
btrfs_ioctl_fs_info	ioctl.c	/^static long btrfs_ioctl_fs_info(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:long	file:
btrfs_ioctl_get_dev_stats	ioctl.c	/^static long btrfs_ioctl_get_dev_stats(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:long	file:
btrfs_ioctl_get_features	ioctl.c	/^static int btrfs_ioctl_get_features(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
btrfs_ioctl_get_fslabel	ioctl.c	/^static int btrfs_ioctl_get_fslabel(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
btrfs_ioctl_get_subvol_info	ioctl.c	/^static int btrfs_ioctl_get_subvol_info(struct inode *inode, void __user *argp)$/;"	f	typeref:typename:int	file:
btrfs_ioctl_get_subvol_rootref	ioctl.c	/^static int btrfs_ioctl_get_subvol_rootref(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
btrfs_ioctl_get_supported_features	ioctl.c	/^int btrfs_ioctl_get_supported_features(void __user *arg)$/;"	f	typeref:typename:int
btrfs_ioctl_getversion	ioctl.c	/^static int btrfs_ioctl_getversion(struct inode *inode, int __user *arg)$/;"	f	typeref:typename:int	file:
btrfs_ioctl_ino_lookup	ioctl.c	/^static noinline int btrfs_ioctl_ino_lookup(struct btrfs_root *root,$/;"	f	typeref:typename:noinline int	file:
btrfs_ioctl_ino_lookup_user	ioctl.c	/^static int btrfs_ioctl_ino_lookup_user(struct file *file, void __user *argp)$/;"	f	typeref:typename:int	file:
btrfs_ioctl_ino_to_path	ioctl.c	/^static long btrfs_ioctl_ino_to_path(struct btrfs_root *root, void __user *arg)$/;"	f	typeref:typename:long	file:
btrfs_ioctl_logical_to_ino	ioctl.c	/^static long btrfs_ioctl_logical_to_ino(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:long	file:
btrfs_ioctl_qgroup_assign	ioctl.c	/^static long btrfs_ioctl_qgroup_assign(struct file *file, void __user *arg)$/;"	f	typeref:typename:long	file:
btrfs_ioctl_qgroup_create	ioctl.c	/^static long btrfs_ioctl_qgroup_create(struct file *file, void __user *arg)$/;"	f	typeref:typename:long	file:
btrfs_ioctl_qgroup_limit	ioctl.c	/^static long btrfs_ioctl_qgroup_limit(struct file *file, void __user *arg)$/;"	f	typeref:typename:long	file:
btrfs_ioctl_quota_ctl	ioctl.c	/^static long btrfs_ioctl_quota_ctl(struct file *file, void __user *arg)$/;"	f	typeref:typename:long	file:
btrfs_ioctl_quota_rescan	ioctl.c	/^static long btrfs_ioctl_quota_rescan(struct file *file, void __user *arg)$/;"	f	typeref:typename:long	file:
btrfs_ioctl_quota_rescan_status	ioctl.c	/^static long btrfs_ioctl_quota_rescan_status(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:long	file:
btrfs_ioctl_quota_rescan_wait	ioctl.c	/^static long btrfs_ioctl_quota_rescan_wait(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:long	file:
btrfs_ioctl_received_subvol_args_32	ioctl.c	/^struct btrfs_ioctl_received_subvol_args_32 {$/;"	s	file:
btrfs_ioctl_resize	ioctl.c	/^static noinline int btrfs_ioctl_resize(struct file *file,$/;"	f	typeref:typename:noinline int	file:
btrfs_ioctl_rm_dev	ioctl.c	/^static long btrfs_ioctl_rm_dev(struct file *file, void __user *arg)$/;"	f	typeref:typename:long	file:
btrfs_ioctl_rm_dev_v2	ioctl.c	/^static long btrfs_ioctl_rm_dev_v2(struct file *file, void __user *arg)$/;"	f	typeref:typename:long	file:
btrfs_ioctl_scrub	ioctl.c	/^static long btrfs_ioctl_scrub(struct file *file, void __user *arg)$/;"	f	typeref:typename:long	file:
btrfs_ioctl_scrub_cancel	ioctl.c	/^static long btrfs_ioctl_scrub_cancel(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:long	file:
btrfs_ioctl_scrub_progress	ioctl.c	/^static long btrfs_ioctl_scrub_progress(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:long	file:
btrfs_ioctl_send	send.c	/^long btrfs_ioctl_send(struct inode *inode, struct btrfs_ioctl_send_args *arg)$/;"	f	typeref:typename:long
btrfs_ioctl_send_args_32	ioctl.c	/^struct btrfs_ioctl_send_args_32 {$/;"	s	file:
btrfs_ioctl_set_features	ioctl.c	/^static int btrfs_ioctl_set_features(struct file *file, void __user *arg)$/;"	f	typeref:typename:int	file:
btrfs_ioctl_set_fslabel	ioctl.c	/^static int btrfs_ioctl_set_fslabel(struct file *file, void __user *arg)$/;"	f	typeref:typename:int	file:
btrfs_ioctl_set_received_subvol	ioctl.c	/^static long btrfs_ioctl_set_received_subvol(struct file *file,$/;"	f	typeref:typename:long	file:
btrfs_ioctl_set_received_subvol_32	ioctl.c	/^static long btrfs_ioctl_set_received_subvol_32(struct file *file,$/;"	f	typeref:typename:long	file:
btrfs_ioctl_snap_create	ioctl.c	/^static noinline int btrfs_ioctl_snap_create(struct file *file,$/;"	f	typeref:typename:noinline int	file:
btrfs_ioctl_snap_create_v2	ioctl.c	/^static noinline int btrfs_ioctl_snap_create_v2(struct file *file,$/;"	f	typeref:typename:noinline int	file:
btrfs_ioctl_snap_destroy	ioctl.c	/^static noinline int btrfs_ioctl_snap_destroy(struct file *file,$/;"	f	typeref:typename:noinline int	file:
btrfs_ioctl_space_info	ioctl.c	/^static long btrfs_ioctl_space_info(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:long	file:
btrfs_ioctl_start_sync	ioctl.c	/^static noinline long btrfs_ioctl_start_sync(struct btrfs_root *root,$/;"	f	typeref:typename:noinline long	file:
btrfs_ioctl_subvol_getflags	ioctl.c	/^static noinline int btrfs_ioctl_subvol_getflags(struct inode *inode,$/;"	f	typeref:typename:noinline int	file:
btrfs_ioctl_subvol_setflags	ioctl.c	/^static noinline int btrfs_ioctl_subvol_setflags(struct file *file,$/;"	f	typeref:typename:noinline int	file:
btrfs_ioctl_timespec_32	ioctl.c	/^struct btrfs_ioctl_timespec_32 {$/;"	s	file:
btrfs_ioctl_tree_search	ioctl.c	/^static noinline int btrfs_ioctl_tree_search(struct inode *inode,$/;"	f	typeref:typename:noinline int	file:
btrfs_ioctl_tree_search_v2	ioctl.c	/^static noinline int btrfs_ioctl_tree_search_v2(struct inode *inode,$/;"	f	typeref:typename:noinline int	file:
btrfs_ioctl_wait_sync	ioctl.c	/^static noinline long btrfs_ioctl_wait_sync(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:noinline long	file:
btrfs_is_block_group_data_only	block-group.h	/^static inline bool btrfs_is_block_group_data_only($/;"	f	typeref:typename:bool
btrfs_is_data_extent_shared	backref.c	/^int btrfs_is_data_extent_shared(struct btrfs_inode *inode, u64 bytenr,$/;"	f	typeref:typename:int
btrfs_is_data_reloc_root	ctree.h	/^static inline bool btrfs_is_data_reloc_root(const struct btrfs_root *root)$/;"	f	typeref:typename:bool
btrfs_is_empty_uuid	ioctl.c	/^int __pure btrfs_is_empty_uuid(u8 *uuid)$/;"	f	typeref:typename:int __pure
btrfs_is_free_space_inode	btrfs_inode.h	/^static inline bool btrfs_is_free_space_inode(struct btrfs_inode *inode)$/;"	f	typeref:typename:bool
btrfs_is_free_space_trimmed	free-space-cache.c	/^bool btrfs_is_free_space_trimmed(struct btrfs_block_group *block_group)$/;"	f	typeref:typename:bool
btrfs_is_leaf	accessors.h	/^static inline int btrfs_is_leaf(const struct extent_buffer *eb)$/;"	f	typeref:typename:int
btrfs_is_parity_mirror	volumes.c	/^int btrfs_is_parity_mirror(struct btrfs_fs_info *fs_info, u64 logical, u64 len)$/;"	f	typeref:typename:int
btrfs_is_subpage	subpage.c	/^bool btrfs_is_subpage(const struct btrfs_fs_info *fs_info, struct page *page)$/;"	f	typeref:typename:bool
btrfs_is_testing	fs.h	/^static inline int btrfs_is_testing(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_is_zoned	fs.h	/^static inline bool btrfs_is_zoned(const struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:bool
btrfs_issue_discard	extent-tree.c	/^static int btrfs_issue_discard(struct block_device *bdev, u64 start, u64 len,$/;"	f	typeref:typename:int	file:
btrfs_item_batch	ctree.h	/^struct btrfs_item_batch {$/;"	s
btrfs_item_data_end	accessors.h	/^static inline u32 btrfs_item_data_end(const struct extent_buffer *eb, int nr)$/;"	f	typeref:typename:u32
btrfs_item_key	accessors.h	/^static inline void btrfs_item_key(const struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_item_key_to_cpu	accessors.h	/^static inline void btrfs_item_key_to_cpu(const struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_item_nr	accessors.h	/^static inline struct btrfs_item *btrfs_item_nr(const struct extent_buffer *eb, int nr)$/;"	f	typeref:struct:btrfs_item *
btrfs_item_nr_offset	accessors.h	/^static inline unsigned long btrfs_item_nr_offset(const struct extent_buffer *eb, int nr)$/;"	f	typeref:typename:unsigned long
btrfs_item_ptr	accessors.h	/^#define btrfs_item_ptr(/;"	d
btrfs_item_ptr_offset	accessors.h	/^#define btrfs_item_ptr_offset(/;"	d
btrfs_join_transaction	transaction.c	/^struct btrfs_trans_handle *btrfs_join_transaction(struct btrfs_root *root)$/;"	f	typeref:struct:btrfs_trans_handle *
btrfs_join_transaction_nostart	transaction.c	/^struct btrfs_trans_handle *btrfs_join_transaction_nostart(struct btrfs_root *root)$/;"	f	typeref:struct:btrfs_trans_handle *
btrfs_join_transaction_spacecache	transaction.c	/^struct btrfs_trans_handle *btrfs_join_transaction_spacecache(struct btrfs_root *root)$/;"	f	typeref:struct:btrfs_trans_handle *
btrfs_kill_all_delayed_nodes	delayed-inode.c	/^void btrfs_kill_all_delayed_nodes(struct btrfs_root *root)$/;"	f	typeref:typename:void
btrfs_kill_delayed_inode_items	delayed-inode.c	/^void btrfs_kill_delayed_inode_items(struct btrfs_inode *inode)$/;"	f	typeref:typename:void
btrfs_kill_super	super.c	/^static void btrfs_kill_super(struct super_block *sb)$/;"	f	typeref:typename:void	file:
btrfs_kobject_uevent	sysfs.c	/^void btrfs_kobject_uevent(struct block_device *bdev, enum kobject_action action)$/;"	f	typeref:typename:void
btrfs_kset	sysfs.c	/^static struct kset *btrfs_kset;$/;"	v	typeref:struct:kset *	file:
btrfs_ktype	sysfs.c	/^static const struct kobj_type btrfs_ktype = {$/;"	v	typeref:typename:const struct kobj_type	file:
btrfs_label_show	sysfs.c	/^static ssize_t btrfs_label_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_label_store	sysfs.c	/^static ssize_t btrfs_label_store(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_leaf_free_space	ctree.c	/^int btrfs_leaf_free_space(const struct extent_buffer *leaf)$/;"	f	typeref:typename:int
btrfs_leak_debug_add_eb	extent_io.c	/^#define btrfs_leak_debug_add_eb(/;"	d	file:
btrfs_leak_debug_add_eb	extent_io.c	/^static inline void btrfs_leak_debug_add_eb(struct extent_buffer *eb)$/;"	f	typeref:typename:void	file:
btrfs_leak_debug_add_state	extent-io-tree.c	/^#define btrfs_leak_debug_add_state(/;"	d	file:
btrfs_leak_debug_add_state	extent-io-tree.c	/^static inline void btrfs_leak_debug_add_state(struct extent_state *state)$/;"	f	typeref:typename:void	file:
btrfs_leak_debug_del_eb	extent_io.c	/^#define btrfs_leak_debug_del_eb(/;"	d	file:
btrfs_leak_debug_del_eb	extent_io.c	/^static inline void btrfs_leak_debug_del_eb(struct extent_buffer *eb)$/;"	f	typeref:typename:void	file:
btrfs_leak_debug_del_state	extent-io-tree.c	/^#define btrfs_leak_debug_del_state(/;"	d	file:
btrfs_leak_debug_del_state	extent-io-tree.c	/^static inline void btrfs_leak_debug_del_state(struct extent_state *state)$/;"	f	typeref:typename:void	file:
btrfs_limit_qgroup	qgroup.c	/^int btrfs_limit_qgroup(struct btrfs_trans_handle *trans, u64 qgroupid,$/;"	f	typeref:typename:int
btrfs_link	inode.c	/^static int btrfs_link(struct dentry *old_dentry, struct inode *dir,$/;"	f	typeref:typename:int	file:
btrfs_listxattr	xattr.c	/^ssize_t btrfs_listxattr(struct dentry *dentry, char *buffer, size_t size)$/;"	f	typeref:typename:ssize_t
btrfs_load_block_group_zone_info	zoned.c	/^int btrfs_load_block_group_zone_info(struct btrfs_block_group *cache, bool new)$/;"	f	typeref:typename:int
btrfs_load_block_group_zone_info	zoned.h	/^static inline int btrfs_load_block_group_zone_info($/;"	f	typeref:typename:int
btrfs_load_inode_props	props.c	/^int btrfs_load_inode_props(struct inode *inode, struct btrfs_path *path)$/;"	f	typeref:typename:int
btrfs_lock_and_flush_ordered_range	ordered-data.c	/^void btrfs_lock_and_flush_ordered_range(struct btrfs_inode *inode, u64 start,$/;"	f	typeref:typename:void
btrfs_lock_block_group	extent-tree.c	/^btrfs_lock_block_group(struct btrfs_block_group *cache,$/;"	f	typeref:typename:void	file:
btrfs_lock_cluster	extent-tree.c	/^static struct btrfs_block_group *btrfs_lock_cluster($/;"	f	typeref:struct:btrfs_block_group *	file:
btrfs_lock_nesting	locking.h	/^enum btrfs_lock_nesting {$/;"	g
btrfs_lock_root_node	locking.c	/^struct extent_buffer *btrfs_lock_root_node(struct btrfs_root *root)$/;"	f	typeref:struct:extent_buffer *
btrfs_lockdep_acquire	locking.h	/^#define btrfs_lockdep_acquire(/;"	d
btrfs_lockdep_init_map	locking.h	/^#define btrfs_lockdep_init_map(/;"	d
btrfs_lockdep_keyset	locking.c	/^static struct btrfs_lockdep_keyset {$/;"	s	file:
btrfs_lockdep_keysets	locking.c	/^} btrfs_lockdep_keysets[] = {$/;"	v	typeref:struct:btrfs_lockdep_keyset[]
btrfs_lockdep_release	locking.h	/^#define btrfs_lockdep_release(/;"	d
btrfs_lockdep_trans_states	locking.h	/^enum btrfs_lockdep_trans_states {$/;"	g
btrfs_log_all_parents	tree-log.c	/^static int btrfs_log_all_parents(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_log_all_xattrs	tree-log.c	/^static int btrfs_log_all_xattrs(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_log_changed_extents	tree-log.c	/^static int btrfs_log_changed_extents(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_log_ctx	tree-log.h	/^struct btrfs_log_ctx {$/;"	s
btrfs_log_dentry_safe	tree-log.c	/^int btrfs_log_dentry_safe(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_log_dev_io_error	bio.c	/^static void btrfs_log_dev_io_error(struct bio *bio, struct btrfs_device *dev)$/;"	f	typeref:typename:void	file:
btrfs_log_get_delayed_items	delayed-inode.c	/^void btrfs_log_get_delayed_items(struct btrfs_inode *inode,$/;"	f	typeref:typename:void
btrfs_log_holes	tree-log.c	/^static int btrfs_log_holes(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_log_inode	tree-log.c	/^static int btrfs_log_inode(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_log_inode_parent	tree-log.c	/^static int btrfs_log_inode_parent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_log_new_name	tree-log.c	/^void btrfs_log_new_name(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void
btrfs_log_prealloc_extents	tree-log.c	/^static int btrfs_log_prealloc_extents(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_log_put_delayed_items	delayed-inode.c	/^void btrfs_log_put_delayed_items(struct btrfs_inode *inode,$/;"	f	typeref:typename:void
btrfs_lookup	inode.c	/^static struct dentry *btrfs_lookup(struct inode *dir, struct dentry *dentry,$/;"	f	typeref:struct:dentry *	file:
btrfs_lookup_bio_sums	file-item.c	/^blk_status_t btrfs_lookup_bio_sums(struct btrfs_bio *bbio)$/;"	f	typeref:typename:blk_status_t
btrfs_lookup_block_group	block-group.c	/^struct btrfs_block_group *btrfs_lookup_block_group($/;"	f	typeref:struct:btrfs_block_group *
btrfs_lookup_csum	file-item.c	/^btrfs_lookup_csum(struct btrfs_trans_handle *trans,$/;"	f	typeref:struct:btrfs_csum_item *	file:
btrfs_lookup_csums_bitmap	file-item.c	/^int btrfs_lookup_csums_bitmap(struct btrfs_root *root, struct btrfs_path *path,$/;"	f	typeref:typename:int
btrfs_lookup_csums_list	file-item.c	/^int btrfs_lookup_csums_list(struct btrfs_root *root, u64 start, u64 end,$/;"	f	typeref:typename:int
btrfs_lookup_data_extent	extent-tree.c	/^int btrfs_lookup_data_extent(struct btrfs_fs_info *fs_info, u64 start, u64 len)$/;"	f	typeref:typename:int
btrfs_lookup_dentry	inode.c	/^struct inode *btrfs_lookup_dentry(struct inode *dir, struct dentry *dentry)$/;"	f	typeref:struct:inode *
btrfs_lookup_dir_index_item	dir-item.c	/^btrfs_lookup_dir_index_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:struct:btrfs_dir_item *
btrfs_lookup_dir_item	dir-item.c	/^struct btrfs_dir_item *btrfs_lookup_dir_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:struct:btrfs_dir_item *
btrfs_lookup_extent_info	extent-tree.c	/^int btrfs_lookup_extent_info(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_lookup_file_extent	file-item.c	/^int btrfs_lookup_file_extent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_lookup_first_block_group	block-group.c	/^struct btrfs_block_group *btrfs_lookup_first_block_group($/;"	f	typeref:struct:btrfs_block_group *
btrfs_lookup_first_ordered_extent	ordered-data.c	/^btrfs_lookup_first_ordered_extent(struct btrfs_inode *inode, u64 file_offset)$/;"	f	typeref:struct:btrfs_ordered_extent *
btrfs_lookup_first_ordered_range	ordered-data.c	/^struct btrfs_ordered_extent *btrfs_lookup_first_ordered_range($/;"	f	typeref:struct:btrfs_ordered_extent *
btrfs_lookup_fs_root	disk-io.c	/^static struct btrfs_root *btrfs_lookup_fs_root(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_root *	file:
btrfs_lookup_inode	inode-item.c	/^int btrfs_lookup_inode(struct btrfs_trans_handle *trans, struct btrfs_root$/;"	f	typeref:typename:int
btrfs_lookup_inode_extref	inode-item.c	/^btrfs_lookup_inode_extref(struct btrfs_trans_handle *trans,$/;"	f	typeref:struct:btrfs_inode_extref *
btrfs_lookup_match_dir	dir-item.c	/^static struct btrfs_dir_item *btrfs_lookup_match_dir($/;"	f	typeref:struct:btrfs_dir_item *	file:
btrfs_lookup_ordered_extent	ordered-data.c	/^struct btrfs_ordered_extent *btrfs_lookup_ordered_extent(struct btrfs_inode *inode,$/;"	f	typeref:struct:btrfs_ordered_extent *
btrfs_lookup_ordered_range	ordered-data.c	/^struct btrfs_ordered_extent *btrfs_lookup_ordered_range($/;"	f	typeref:struct:btrfs_ordered_extent *
btrfs_lookup_xattr	dir-item.c	/^struct btrfs_dir_item *btrfs_lookup_xattr(struct btrfs_trans_handle *trans,$/;"	f	typeref:struct:btrfs_dir_item *
btrfs_loop_type	extent-tree.c	/^enum btrfs_loop_type {$/;"	g	file:
btrfs_lru_cache	lru_cache.h	/^struct btrfs_lru_cache {$/;"	s
btrfs_lru_cache_clear	lru_cache.c	/^void btrfs_lru_cache_clear(struct btrfs_lru_cache *cache)$/;"	f	typeref:typename:void
btrfs_lru_cache_entry	lru_cache.h	/^struct btrfs_lru_cache_entry {$/;"	s
btrfs_lru_cache_for_each_entry_safe	lru_cache.h	/^#define btrfs_lru_cache_for_each_entry_safe(/;"	d
btrfs_lru_cache_init	lru_cache.c	/^void btrfs_lru_cache_init(struct btrfs_lru_cache *cache, unsigned int max_size)$/;"	f	typeref:typename:void
btrfs_lru_cache_lookup	lru_cache.c	/^struct btrfs_lru_cache_entry *btrfs_lru_cache_lookup(struct btrfs_lru_cache *cache,$/;"	f	typeref:struct:btrfs_lru_cache_entry *
btrfs_lru_cache_lru_entry	lru_cache.h	/^static inline struct btrfs_lru_cache_entry *btrfs_lru_cache_lru_entry($/;"	f	typeref:struct:btrfs_lru_cache_entry *
btrfs_lru_cache_remove	lru_cache.c	/^void btrfs_lru_cache_remove(struct btrfs_lru_cache *cache,$/;"	f	typeref:typename:void
btrfs_lru_cache_size	lru_cache.h	/^static inline unsigned int btrfs_lru_cache_size(const struct btrfs_lru_cache *cache)$/;"	f	typeref:typename:unsigned int
btrfs_lru_cache_store	lru_cache.c	/^int btrfs_lru_cache_store(struct btrfs_lru_cache *cache,$/;"	f	typeref:typename:int
btrfs_lzo_compress	lzo.c	/^const struct btrfs_compress_op btrfs_lzo_compress = {$/;"	v	typeref:typename:const struct btrfs_compress_op
btrfs_make_block_group	block-group.c	/^struct btrfs_block_group *btrfs_make_block_group(struct btrfs_trans_handle *trans,$/;"	f	typeref:struct:btrfs_block_group *
btrfs_map_block	volumes.c	/^int btrfs_map_block(struct btrfs_fs_info *fs_info, enum btrfs_map_op op,$/;"	f	typeref:typename:int
btrfs_map_discard	volumes.c	/^struct btrfs_discard_stripe *btrfs_map_discard(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_discard_stripe *
btrfs_map_op	volumes.h	/^enum btrfs_map_op {$/;"	g
btrfs_map_repair_block	volumes.c	/^int btrfs_map_repair_block(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_map_token	accessors.h	/^struct btrfs_map_token {$/;"	s
btrfs_mapping_tree_free	volumes.c	/^void btrfs_mapping_tree_free(struct extent_map_tree *tree)$/;"	f	typeref:typename:void
btrfs_mark_bg_to_reclaim	block-group.c	/^void btrfs_mark_bg_to_reclaim(struct btrfs_block_group *bg)$/;"	f	typeref:typename:void
btrfs_mark_bg_unused	block-group.c	/^void btrfs_mark_bg_unused(struct btrfs_block_group *bg)$/;"	f	typeref:typename:void
btrfs_mark_buffer_dirty	disk-io.c	/^void btrfs_mark_buffer_dirty(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void
btrfs_mark_extent_written	file.c	/^int btrfs_mark_extent_written(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_mark_ordered_io_finished	ordered-data.c	/^void btrfs_mark_ordered_io_finished(struct btrfs_inode *inode,$/;"	f	typeref:typename:void
btrfs_mask_fsflags_for_type	ioctl.c	/^static unsigned int btrfs_mask_fsflags_for_type(struct inode *inode,$/;"	f	typeref:typename:unsigned int	file:
btrfs_match_dir_item_name	dir-item.c	/^struct btrfs_dir_item *btrfs_match_dir_item_name(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_dir_item *
btrfs_max_io_len	volumes.c	/^static u64 btrfs_max_io_len(struct map_lookup *map, enum btrfs_map_op op,$/;"	f	typeref:typename:u64	file:
btrfs_may_alloc_data_chunk	volumes.c	/^static int btrfs_may_alloc_data_chunk(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
btrfs_may_create	ioctl.c	/^static inline int btrfs_may_create(struct mnt_idmap *idmap,$/;"	f	typeref:typename:int	file:
btrfs_may_delete	ioctl.c	/^static int btrfs_may_delete(struct mnt_idmap *idmap,$/;"	f	typeref:typename:int	file:
btrfs_maybe_reset_lockdep_class	locking.c	/^void btrfs_maybe_reset_lockdep_class(struct btrfs_root *root, struct extent_buffer *eb)$/;"	f	typeref:typename:void
btrfs_maybe_reset_lockdep_class	locking.h	/^static inline void btrfs_maybe_reset_lockdep_class(struct btrfs_root *root,$/;"	f	typeref:typename:void
btrfs_maybe_wake_unfinished_drop	transaction.c	/^void btrfs_maybe_wake_unfinished_drop(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_merge_delalloc_extent	inode.c	/^void btrfs_merge_delalloc_extent(struct btrfs_inode *inode, struct extent_state *new,$/;"	f	typeref:typename:void
btrfs_merge_delayed_refs	delayed-ref.c	/^void btrfs_merge_delayed_refs(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_metadata_alloc_profile	block-group.h	/^static inline u64 btrfs_metadata_alloc_profile(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:u64
btrfs_metadata_uuid_show	sysfs.c	/^static ssize_t btrfs_metadata_uuid_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_might_wait_for_event	locking.h	/^#define btrfs_might_wait_for_event(/;"	d
btrfs_might_wait_for_state	locking.h	/^#define btrfs_might_wait_for_state(/;"	d
btrfs_migrate_folio	inode.c	/^#define btrfs_migrate_folio /;"	d	file:
btrfs_migrate_folio	inode.c	/^static int btrfs_migrate_folio(struct address_space *mapping,$/;"	f	typeref:typename:int	file:
btrfs_migrate_to_delayed_refs_rsv	delayed-ref.c	/^void btrfs_migrate_to_delayed_refs_rsv(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_misc	super.c	/^static struct miscdevice btrfs_misc = {$/;"	v	typeref:struct:miscdevice	file:
btrfs_mixed_space_info	space-info.h	/^static inline bool btrfs_mixed_space_info(struct btrfs_space_info *space_info)$/;"	f	typeref:typename:bool
btrfs_mkdir	inode.c	/^static int btrfs_mkdir(struct mnt_idmap *idmap, struct inode *dir,$/;"	f	typeref:typename:int	file:
btrfs_mknod	inode.c	/^static int btrfs_mknod(struct mnt_idmap *idmap, struct inode *dir,$/;"	f	typeref:typename:int	file:
btrfs_mksnapshot	ioctl.c	/^static noinline int btrfs_mksnapshot(const struct path *parent,$/;"	f	typeref:typename:noinline int	file:
btrfs_mksubvol	ioctl.c	/^static noinline int btrfs_mksubvol(const struct path *parent,$/;"	f	typeref:typename:noinline int	file:
btrfs_mod_log_op	tree-mod-log.h	/^enum btrfs_mod_log_op {$/;"	g
btrfs_mod_outstanding_extents	btrfs_inode.h	/^static inline void btrfs_mod_outstanding_extents(struct btrfs_inode *inode,$/;"	f	typeref:typename:void
btrfs_mount	super.c	/^static struct dentry *btrfs_mount(struct file_system_type *fs_type, int flags,$/;"	f	typeref:struct:dentry *	file:
btrfs_mount_root	super.c	/^static struct dentry *btrfs_mount_root(struct file_system_type *fs_type,$/;"	f	typeref:struct:dentry *	file:
btrfs_mount_root_iter	super.c	/^static struct btrfs_fs_info *btrfs_mount_root_iter(struct file_system_type *fs_type,$/;"	f	typeref:struct:btrfs_fs_info *	file:
btrfs_mount_root_mp	super.c	/^static struct dentry *btrfs_mount_root_mp(struct file_system_type *fs_type,$/;"	f	typeref:struct:dentry *	file:
btrfs_name_hash	ctree.h	/^static inline u64 btrfs_name_hash(const char *name, int len)$/;"	f	typeref:typename:u64
btrfs_need_cleaner_sleep	fs.h	/^static inline int btrfs_need_cleaner_sleep(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_need_log_full_commit	tree-log.h	/^static inline int btrfs_need_log_full_commit(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:int
btrfs_new_extent_direct	inode.c	/^static struct extent_map *btrfs_new_extent_direct(struct btrfs_inode *inode,$/;"	f	typeref:struct:extent_map *	file:
btrfs_new_inode_args	btrfs_inode.h	/^struct btrfs_new_inode_args {$/;"	s
btrfs_new_inode_args_destroy	inode.c	/^void btrfs_new_inode_args_destroy(struct btrfs_new_inode_args *args)$/;"	f	typeref:typename:void
btrfs_new_inode_prepare	inode.c	/^int btrfs_new_inode_prepare(struct btrfs_new_inode_args *args,$/;"	f	typeref:typename:int
btrfs_new_subvol_inode	inode.c	/^struct inode *btrfs_new_subvol_inode(struct mnt_idmap *idmap,$/;"	f	typeref:struct:inode *
btrfs_new_test_inode	tests/btrfs-tests.c	/^struct inode *btrfs_new_test_inode(void)$/;"	f	typeref:struct:inode *
btrfs_next_block_group	block-group.c	/^struct btrfs_block_group *btrfs_next_block_group($/;"	f	typeref:struct:btrfs_block_group *
btrfs_next_delayed_node	delayed-inode.c	/^static struct btrfs_delayed_node *btrfs_next_delayed_node($/;"	f	typeref:struct:btrfs_delayed_node *	file:
btrfs_next_item	ctree.h	/^static inline int btrfs_next_item(struct btrfs_root *root, struct btrfs_path *p)$/;"	f	typeref:typename:int
btrfs_next_leaf	ctree.h	/^static inline int btrfs_next_leaf(struct btrfs_root *root, struct btrfs_path *path)$/;"	f	typeref:typename:int
btrfs_next_old_item	ctree.c	/^int btrfs_next_old_item(struct btrfs_root *root, struct btrfs_path *path, u64 time_seq)$/;"	f	typeref:typename:int
btrfs_next_old_leaf	ctree.c	/^int btrfs_next_old_leaf(struct btrfs_root *root, struct btrfs_path *path,$/;"	f	typeref:typename:int
btrfs_no_printk	messages.h	/^void btrfs_no_printk(const struct btrfs_fs_info *fs_info, const char *fmt, ...)$/;"	f
btrfs_no_printk_in_rcu	messages.h	/^#define btrfs_no_printk_in_rcu(/;"	d
btrfs_node_blockptr	accessors.h	/^static inline u64 btrfs_node_blockptr(const struct extent_buffer *eb, int nr)$/;"	f	typeref:typename:u64
btrfs_node_key	accessors.c	/^void btrfs_node_key(const struct extent_buffer *eb,$/;"	f
btrfs_node_key_ptr_offset	accessors.h	/^static inline unsigned long btrfs_node_key_ptr_offset(const struct extent_buffer *eb, int nr)$/;"	f	typeref:typename:unsigned long
btrfs_node_key_to_cpu	accessors.h	/^static inline void btrfs_node_key_to_cpu(const struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_node_ptr_generation	accessors.h	/^static inline u64 btrfs_node_ptr_generation(const struct extent_buffer *eb, int nr)$/;"	f	typeref:typename:u64
btrfs_nodesize_show	sysfs.c	/^static ssize_t btrfs_nodesize_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_notice	messages.h	/^#define btrfs_notice(/;"	d
btrfs_notice_in_rcu	messages.h	/^#define btrfs_notice_in_rcu(/;"	d
btrfs_notice_rl	messages.h	/^#define btrfs_notice_rl(/;"	d
btrfs_notice_rl_in_rcu	messages.h	/^#define btrfs_notice_rl_in_rcu(/;"	d
btrfs_nr_parity_stripes	volumes.c	/^int btrfs_nr_parity_stripes(u64 type)$/;"	f	typeref:typename:int
btrfs_num_copies	volumes.c	/^int btrfs_num_copies(struct btrfs_fs_info *fs_info, u64 logical, u64 len)$/;"	f	typeref:typename:int
btrfs_num_devices	volumes.c	/^static u64 btrfs_num_devices(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:u64	file:
btrfs_obtain_ref_head	extent-tree.c	/^static struct btrfs_delayed_ref_head *btrfs_obtain_ref_head($/;"	f	typeref:struct:btrfs_delayed_ref_head *	file:
btrfs_old_root_level	tree-mod-log.c	/^int btrfs_old_root_level(struct btrfs_root *root, u64 time_seq)$/;"	f	typeref:typename:int
btrfs_op	volumes.h	/^static inline enum btrfs_map_op btrfs_op(struct bio *bio)$/;"	f	typeref:enum:btrfs_map_op
btrfs_open_devices	volumes.c	/^int btrfs_open_devices(struct btrfs_fs_devices *fs_devices,$/;"	f	typeref:typename:int
btrfs_open_devices_partition	volumes.c	/^int btrfs_open_devices_partition(struct btrfs_fs_devices *fs_devices,$/;"	f	typeref:typename:int
btrfs_open_one_device	volumes.c	/^static int btrfs_open_one_device(struct btrfs_fs_devices *fs_devices,$/;"	f	typeref:typename:int	file:
btrfs_open_one_device_partition	volumes.c	/^static int btrfs_open_one_device_partition(struct btrfs_fs_devices *fs_devices,$/;"	f	typeref:typename:int	file:
btrfs_opendir	inode.c	/^static int btrfs_opendir(struct inode *inode, struct file *file)$/;"	f	typeref:typename:int	file:
btrfs_ordered_extent	ordered-data.h	/^struct btrfs_ordered_extent {$/;"	s
btrfs_ordered_extent_cache	ordered-data.c	/^static struct kmem_cache *btrfs_ordered_extent_cache;$/;"	v	typeref:struct:kmem_cache *	file:
btrfs_ordered_extent_map	fs.h	/^	struct lockdep_map btrfs_ordered_extent_map;$/;"	m	struct:btrfs_fs_info	typeref:struct:lockdep_map
btrfs_ordered_inode_tree	ordered-data.h	/^struct btrfs_ordered_inode_tree {$/;"	s
btrfs_ordered_inode_tree_init	ordered-data.h	/^btrfs_ordered_inode_tree_init(struct btrfs_ordered_inode_tree *t)$/;"	f	typeref:typename:void
btrfs_ordered_sum	ordered-data.h	/^struct btrfs_ordered_sum {$/;"	s
btrfs_ordered_sum_size	file-item.c	/^static int btrfs_ordered_sum_size(struct btrfs_fs_info *fs_info, unsigned long bytes)$/;"	f	typeref:typename:int	file:
btrfs_orig_bbio_end_io	bio.c	/^static void btrfs_orig_bbio_end_io(struct btrfs_bio *bbio)$/;"	f	typeref:typename:void	file:
btrfs_orig_write_end_io	bio.c	/^static void btrfs_orig_write_end_io(struct bio *bio)$/;"	f	typeref:typename:void	file:
btrfs_orphan_add	inode.c	/^int btrfs_orphan_add(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_orphan_cleanup	inode.c	/^int btrfs_orphan_cleanup(struct btrfs_root *root)$/;"	f	typeref:typename:int
btrfs_orphan_del	inode.c	/^static int btrfs_orphan_del(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_page_assert_not_dirty	subpage.c	/^void btrfs_page_assert_not_dirty(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_page_dec_eb_refs	subpage.c	/^void btrfs_page_dec_eb_refs(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_page_end_writer_lock	subpage.c	/^void btrfs_page_end_writer_lock(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_page_inc_eb_refs	subpage.c	/^void btrfs_page_inc_eb_refs(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_page_mkwrite	inode.c	/^vm_fault_t btrfs_page_mkwrite(struct vm_fault *vmf)$/;"	f	typeref:typename:vm_fault_t
btrfs_page_start_writer_lock	subpage.c	/^int btrfs_page_start_writer_lock(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_page_unlock_writer	subpage.c	/^void btrfs_page_unlock_writer(struct btrfs_fs_info *fs_info, struct page *page,$/;"	f	typeref:typename:void
btrfs_panic	messages.h	/^#define btrfs_panic(/;"	d
btrfs_parse_device_options	super.c	/^static int btrfs_parse_device_options(const char *options, blk_mode_t flags)$/;"	f	typeref:typename:int	file:
btrfs_parse_options	super.c	/^int btrfs_parse_options(struct btrfs_fs_info *info, char *options,$/;"	f	typeref:typename:int
btrfs_parse_subvol_options	super.c	/^static int btrfs_parse_subvol_options(const char *options, char **subvol_name,$/;"	f	typeref:typename:int	file:
btrfs_path	backref.h	/^	struct btrfs_path		*btrfs_path;$/;"	m	struct:inode_fs_paths	typeref:struct:btrfs_path *
btrfs_path	ctree.h	/^struct btrfs_path {$/;"	s
btrfs_path_cachep	ctree.c	/^static struct kmem_cache *btrfs_path_cachep;$/;"	v	typeref:struct:kmem_cache *	file:
btrfs_pause_balance	volumes.c	/^int btrfs_pause_balance(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_pending_snapshot	transaction.h	/^struct btrfs_pending_snapshot {$/;"	s
btrfs_permission	inode.c	/^static int btrfs_permission(struct mnt_idmap *idmap,$/;"	f	typeref:typename:int	file:
btrfs_pick_defrag_inode	defrag.c	/^static struct inode_defrag *btrfs_pick_defrag_inode($/;"	f	typeref:struct:inode_defrag *	file:
btrfs_pin_extent	extent-tree.c	/^int btrfs_pin_extent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_pin_extent_for_log_replay	extent-tree.c	/^int btrfs_pin_extent_for_log_replay(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_pin_log_trans	tree-log.c	/^void btrfs_pin_log_trans(struct btrfs_root *root)$/;"	f	typeref:typename:void
btrfs_pin_reserved_extent	extent-tree.c	/^int btrfs_pin_reserved_extent(struct btrfs_trans_handle *trans, u64 start,$/;"	f	typeref:typename:int
btrfs_pinned_by_swapfile	volumes.c	/^bool btrfs_pinned_by_swapfile(struct btrfs_fs_info *fs_info, void *ptr)$/;"	f	typeref:typename:bool
btrfs_plug_cb	raid56.c	/^struct btrfs_plug_cb {$/;"	s	file:
btrfs_prealloc_file_range	inode.c	/^int btrfs_prealloc_file_range(struct inode *inode, int mode,$/;"	f	typeref:typename:int
btrfs_prealloc_file_range_trans	inode.c	/^int btrfs_prealloc_file_range_trans(struct inode *inode,$/;"	f	typeref:typename:int
btrfs_preempt_reclaim_metadata_space	space-info.c	/^static void btrfs_preempt_reclaim_metadata_space(struct work_struct *work)$/;"	f	typeref:typename:void	file:
btrfs_prelim_ref_cache	backref.c	/^static struct kmem_cache *btrfs_prelim_ref_cache;$/;"	v	typeref:struct:kmem_cache *	file:
btrfs_prelim_ref_exit	backref.c	/^void __cold btrfs_prelim_ref_exit(void)$/;"	f	typeref:typename:void __cold
btrfs_prelim_ref_init	backref.c	/^int __init btrfs_prelim_ref_init(void)$/;"	f	typeref:typename:int __init
btrfs_prev_leaf	ctree.c	/^static int btrfs_prev_leaf(struct btrfs_root *root, struct btrfs_path *path)$/;"	f	typeref:typename:int	file:
btrfs_previous_extent_item	ctree.c	/^int btrfs_previous_extent_item(struct btrfs_root *root,$/;"	f	typeref:typename:int
btrfs_previous_item	ctree.c	/^int btrfs_previous_item(struct btrfs_root *root,$/;"	f	typeref:typename:int
btrfs_print_data_csum_error	inode.c	/^static void __cold btrfs_print_data_csum_error(struct btrfs_inode *inode,$/;"	f	typeref:typename:void __cold	file:
btrfs_print_leaf	print-tree.c	/^void btrfs_print_leaf(const struct extent_buffer *l)$/;"	f	typeref:typename:void
btrfs_print_mod_info	super.c	/^static int __init btrfs_print_mod_info(void)$/;"	f	typeref:typename:int __init	file:
btrfs_print_tree	print-tree.c	/^void btrfs_print_tree(const struct extent_buffer *c, bool follow)$/;"	f	typeref:typename:void
btrfs_printable_features	sysfs.c	/^char *btrfs_printable_features(enum btrfs_feature_set set, u64 flags)$/;"	f	typeref:typename:char *
btrfs_printk	messages.h	/^#define btrfs_printk(/;"	d
btrfs_printk_in_rcu	messages.h	/^#define btrfs_printk_in_rcu(/;"	d
btrfs_printk_ratelimited	messages.h	/^#define btrfs_printk_ratelimited(/;"	d
btrfs_printk_rl_in_rcu	messages.h	/^#define btrfs_printk_rl_in_rcu(/;"	d
btrfs_props_init	props.c	/^int __init btrfs_props_init(void)$/;"	f	typeref:typename:int __init
btrfs_prune_dentries	inode.c	/^static void btrfs_prune_dentries(struct btrfs_root *root)$/;"	f	typeref:typename:void	file:
btrfs_punch_hole	file.c	/^static int btrfs_punch_hole(struct file *file, loff_t offset, loff_t len)$/;"	f	typeref:typename:int	file:
btrfs_punch_hole_lock_range	file.c	/^static void btrfs_punch_hole_lock_range(struct inode *inode,$/;"	f	typeref:typename:void	file:
btrfs_put_bioc	volumes.c	/^void btrfs_put_bioc(struct btrfs_io_context *bioc)$/;"	f	typeref:typename:void
btrfs_put_block_group	block-group.c	/^void btrfs_put_block_group(struct btrfs_block_group *cache)$/;"	f	typeref:typename:void
btrfs_put_block_group_cache	block-group.c	/^void btrfs_put_block_group_cache(struct btrfs_fs_info *info)$/;"	f	typeref:typename:void
btrfs_put_caching_control	block-group.c	/^void btrfs_put_caching_control(struct btrfs_caching_control *ctl)$/;"	f	typeref:typename:void
btrfs_put_delayed_ref	delayed-ref.h	/^static inline void btrfs_put_delayed_ref(struct btrfs_delayed_ref_node *ref)$/;"	f	typeref:typename:void
btrfs_put_delayed_ref_head	delayed-ref.h	/^static inline void btrfs_put_delayed_ref_head(struct btrfs_delayed_ref_head *head)$/;"	f	typeref:typename:void
btrfs_put_dev_args_from_path	volumes.c	/^void btrfs_put_dev_args_from_path(struct btrfs_dev_lookup_args *args)$/;"	f	typeref:typename:void
btrfs_put_ordered_extent	ordered-data.c	/^void btrfs_put_ordered_extent(struct btrfs_ordered_extent *entry)$/;"	f	typeref:typename:void
btrfs_put_root	disk-io.c	/^void btrfs_put_root(struct btrfs_root *root)$/;"	f	typeref:typename:void
btrfs_put_super	super.c	/^static void btrfs_put_super(struct super_block *sb)$/;"	f	typeref:typename:void	file:
btrfs_put_transaction	transaction.c	/^void btrfs_put_transaction(struct btrfs_transaction *transaction)$/;"	f	typeref:typename:void
btrfs_put_tree_mod_seq	tree-mod-log.c	/^void btrfs_put_tree_mod_seq(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_put_workspace	compression.c	/^void btrfs_put_workspace(int type, struct list_head *ws)$/;"	f	typeref:typename:void
btrfs_qgroup	qgroup.h	/^struct btrfs_qgroup {$/;"	s
btrfs_qgroup_account_extent	qgroup.c	/^int btrfs_qgroup_account_extent(struct btrfs_trans_handle *trans, u64 bytenr,$/;"	f	typeref:typename:int
btrfs_qgroup_account_extents	qgroup.c	/^int btrfs_qgroup_account_extents(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:int
btrfs_qgroup_add_swapped_blocks	qgroup.c	/^int btrfs_qgroup_add_swapped_blocks(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_qgroup_check_reserved_leak	qgroup.c	/^void btrfs_qgroup_check_reserved_leak(struct btrfs_inode *inode)$/;"	f	typeref:typename:void
btrfs_qgroup_clean_swapped_blocks	qgroup.c	/^void btrfs_qgroup_clean_swapped_blocks(struct btrfs_root *root)$/;"	f	typeref:typename:void
btrfs_qgroup_convert_reserved_meta	qgroup.c	/^void btrfs_qgroup_convert_reserved_meta(struct btrfs_root *root, int num_bytes)$/;"	f	typeref:typename:void
btrfs_qgroup_destroy_extent_records	qgroup.c	/^void btrfs_qgroup_destroy_extent_records(struct btrfs_transaction *trans)$/;"	f	typeref:typename:void
btrfs_qgroup_extent_record	qgroup.h	/^struct btrfs_qgroup_extent_record {$/;"	s
btrfs_qgroup_free_data	qgroup.c	/^int btrfs_qgroup_free_data(struct btrfs_inode *inode,$/;"	f	typeref:typename:int
btrfs_qgroup_free_meta_all_pertrans	qgroup.c	/^void btrfs_qgroup_free_meta_all_pertrans(struct btrfs_root *root)$/;"	f	typeref:typename:void
btrfs_qgroup_free_meta_pertrans	qgroup.h	/^static inline void btrfs_qgroup_free_meta_pertrans(struct btrfs_root *root,$/;"	f	typeref:typename:void
btrfs_qgroup_free_meta_prealloc	qgroup.h	/^static inline void btrfs_qgroup_free_meta_prealloc(struct btrfs_root *root,$/;"	f	typeref:typename:void
btrfs_qgroup_free_refroot	qgroup.c	/^void btrfs_qgroup_free_refroot(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_qgroup_get_new_refcnt	qgroup.c	/^static inline u64 btrfs_qgroup_get_new_refcnt(struct btrfs_qgroup *qg, u64 seq)$/;"	f	typeref:typename:u64	file:
btrfs_qgroup_get_old_refcnt	qgroup.c	/^static inline u64 btrfs_qgroup_get_old_refcnt(struct btrfs_qgroup *qg, u64 seq)$/;"	f	typeref:typename:u64	file:
btrfs_qgroup_inherit	qgroup.c	/^int btrfs_qgroup_inherit(struct btrfs_trans_handle *trans, u64 srcid,$/;"	f	typeref:typename:int
btrfs_qgroup_init_swapped_blocks	qgroup.c	/^void btrfs_qgroup_init_swapped_blocks($/;"	f	typeref:typename:void
btrfs_qgroup_list	qgroup.c	/^struct btrfs_qgroup_list {$/;"	s	file:
btrfs_qgroup_release_data	qgroup.c	/^int btrfs_qgroup_release_data(struct btrfs_inode *inode, u64 start, u64 len, u64 *released)$/;"	f	typeref:typename:int
btrfs_qgroup_rescan	qgroup.c	/^btrfs_qgroup_rescan(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_qgroup_rescan_resume	qgroup.c	/^btrfs_qgroup_rescan_resume(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_qgroup_rescan_worker	qgroup.c	/^static void btrfs_qgroup_rescan_worker(struct btrfs_work *work)$/;"	f	typeref:typename:void	file:
btrfs_qgroup_reserve_data	qgroup.c	/^int btrfs_qgroup_reserve_data(struct btrfs_inode *inode,$/;"	f	typeref:typename:int
btrfs_qgroup_reserve_meta	qgroup.c	/^int btrfs_qgroup_reserve_meta(struct btrfs_root *root, int num_bytes,$/;"	f	typeref:typename:int
btrfs_qgroup_reserve_meta_pertrans	qgroup.h	/^static inline int btrfs_qgroup_reserve_meta_pertrans(struct btrfs_root *root,$/;"	f	typeref:typename:int
btrfs_qgroup_reserve_meta_prealloc	qgroup.h	/^static inline int btrfs_qgroup_reserve_meta_prealloc(struct btrfs_root *root,$/;"	f	typeref:typename:int
btrfs_qgroup_rsv	qgroup.h	/^struct btrfs_qgroup_rsv {$/;"	s
btrfs_qgroup_rsv_type	qgroup.h	/^enum btrfs_qgroup_rsv_type {$/;"	g
btrfs_qgroup_subvolid	qgroup.h	/^static inline u64 btrfs_qgroup_subvolid(u64 qgroupid)$/;"	f	typeref:typename:u64
btrfs_qgroup_swapped_block	qgroup.h	/^struct btrfs_qgroup_swapped_block {$/;"	s
btrfs_qgroup_swapped_blocks	ctree.h	/^struct btrfs_qgroup_swapped_blocks {$/;"	s
btrfs_qgroup_trace_extent	qgroup.c	/^int btrfs_qgroup_trace_extent(struct btrfs_trans_handle *trans, u64 bytenr,$/;"	f	typeref:typename:int
btrfs_qgroup_trace_extent_nolock	qgroup.c	/^int btrfs_qgroup_trace_extent_nolock(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_qgroup_trace_extent_post	qgroup.c	/^int btrfs_qgroup_trace_extent_post(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_qgroup_trace_leaf_items	qgroup.c	/^int btrfs_qgroup_trace_leaf_items(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_qgroup_trace_subtree	qgroup.c	/^int btrfs_qgroup_trace_subtree(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_qgroup_trace_subtree_after_cow	qgroup.c	/^int btrfs_qgroup_trace_subtree_after_cow(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_qgroup_update_new_refcnt	qgroup.c	/^static void btrfs_qgroup_update_new_refcnt(struct btrfs_qgroup *qg, u64 seq,$/;"	f	typeref:typename:void	file:
btrfs_qgroup_update_old_refcnt	qgroup.c	/^static void btrfs_qgroup_update_old_refcnt(struct btrfs_qgroup *qg, u64 seq,$/;"	f	typeref:typename:void	file:
btrfs_qgroup_wait_for_completion	qgroup.c	/^int btrfs_qgroup_wait_for_completion(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_queue_delayed_node	delayed-inode.c	/^static void btrfs_queue_delayed_node(struct btrfs_delayed_root *root,$/;"	f	typeref:typename:void	file:
btrfs_queue_ordered_fn	ordered-data.c	/^static void btrfs_queue_ordered_fn(struct btrfs_ordered_extent *ordered)$/;"	f	typeref:typename:void	file:
btrfs_queue_work	async-thread.c	/^void btrfs_queue_work(struct btrfs_workqueue *wq, struct btrfs_work *work)$/;"	f	typeref:typename:void
btrfs_quota_disable	qgroup.c	/^int btrfs_quota_disable(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_quota_enable	qgroup.c	/^int btrfs_quota_enable(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_raid56_end_io	bio.c	/^static void btrfs_raid56_end_io(struct bio *bio)$/;"	f	typeref:typename:void	file:
btrfs_raid_array	volumes.c	/^const struct btrfs_raid_attr btrfs_raid_array[BTRFS_NR_RAID_TYPES] = {$/;"	v	typeref:typename:const struct btrfs_raid_attr[]
btrfs_raid_attr	volumes.h	/^struct btrfs_raid_attr {$/;"	s
btrfs_raid_bio	raid56.h	/^struct btrfs_raid_bio {$/;"	s
btrfs_raid_ktype	sysfs.c	/^static const struct kobj_type btrfs_raid_ktype = {$/;"	v	typeref:typename:const struct kobj_type	file:
btrfs_raid_types	volumes.h	/^enum btrfs_raid_types {$/;"	g
btrfs_raw_test_opt	fs.h	/^#define btrfs_raw_test_opt(/;"	d
btrfs_rbio_ops	raid56.h	/^enum btrfs_rbio_ops {$/;"	g
btrfs_read_block_groups	block-group.c	/^int btrfs_read_block_groups(struct btrfs_fs_info *info)$/;"	f	typeref:typename:int
btrfs_read_chunk_tree	volumes.c	/^int btrfs_read_chunk_tree(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_read_chunk_tree_partition	volumes.c	/^int btrfs_read_chunk_tree_partition(struct btrfs_fs_info *fs_info, int partition_order)$/;"	f	typeref:typename:int
btrfs_read_dev_one_super	disk-io.c	/^struct btrfs_super_block *btrfs_read_dev_one_super(struct block_device *bdev,$/;"	f	typeref:struct:btrfs_super_block *
btrfs_read_dev_one_super_partition	disk-io.c	/^struct btrfs_super_block *btrfs_read_dev_one_super_partition(struct block_device *bdev,$/;"	f	typeref:struct:btrfs_super_block *
btrfs_read_dev_super	disk-io.c	/^struct btrfs_super_block *btrfs_read_dev_super(struct block_device *bdev)$/;"	f	typeref:struct:btrfs_super_block *
btrfs_read_dev_super_partition	disk-io.c	/^struct btrfs_super_block *btrfs_read_dev_super_partition(struct block_device *bdev, int partitio/;"	f	typeref:struct:btrfs_super_block *
btrfs_read_disk_super	volumes.c	/^static struct btrfs_super_block *btrfs_read_disk_super(struct block_device *bdev,$/;"	f	typeref:struct:btrfs_super_block *	file:
btrfs_read_extent_buffer	disk-io.c	/^int btrfs_read_extent_buffer(struct extent_buffer *eb,$/;"	f	typeref:typename:int
btrfs_read_folio	extent_io.c	/^int btrfs_read_folio(struct file *file, struct folio *folio)$/;"	f	typeref:typename:int
btrfs_read_lock_root_node	locking.c	/^struct extent_buffer *btrfs_read_lock_root_node(struct btrfs_root *root)$/;"	f	typeref:struct:extent_buffer *
btrfs_read_locked_inode	inode.c	/^static int btrfs_read_locked_inode(struct inode *inode,$/;"	f	typeref:typename:int	file:
btrfs_read_merkle_tree_page	verity.c	/^static struct page *btrfs_read_merkle_tree_page(struct inode *inode,$/;"	f	typeref:struct:page *	file:
btrfs_read_node_slot	ctree.c	/^struct extent_buffer *btrfs_read_node_slot(struct extent_buffer *parent,$/;"	f	typeref:struct:extent_buffer *
btrfs_read_policy	volumes.h	/^enum btrfs_read_policy {$/;"	g
btrfs_read_policy_name	sysfs.c	/^static const char * const btrfs_read_policy_name[] = { "pid" };$/;"	v	typeref:typename:const char * const[]	file:
btrfs_read_policy_show	sysfs.c	/^static ssize_t btrfs_read_policy_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_read_policy_store	sysfs.c	/^static ssize_t btrfs_read_policy_store(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_read_qgroup_config	qgroup.c	/^int btrfs_read_qgroup_config(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_read_root_item	root-tree.c	/^static void btrfs_read_root_item(struct extent_buffer *eb, int slot,$/;"	f	typeref:typename:void	file:
btrfs_read_roots	disk-io.c	/^static int btrfs_read_roots(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int	file:
btrfs_read_sys_array	volumes.c	/^int btrfs_read_sys_array(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_read_tree_root	disk-io.c	/^struct btrfs_root *btrfs_read_tree_root(struct btrfs_root *tree_root,$/;"	f	typeref:struct:btrfs_root *
btrfs_readahead	inode.c	/^static void btrfs_readahead(struct readahead_control *rac)$/;"	f	typeref:typename:void	file:
btrfs_readahead_node_child	extent_io.c	/^void btrfs_readahead_node_child(struct extent_buffer *node, int slot)$/;"	f	typeref:typename:void
btrfs_readahead_tree_block	extent_io.c	/^void btrfs_readahead_tree_block(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_readdir_delayed_dir_index	delayed-inode.c	/^int btrfs_readdir_delayed_dir_index(struct dir_context *ctx,$/;"	f	typeref:typename:int
btrfs_readdir_get_delayed_items	delayed-inode.c	/^bool btrfs_readdir_get_delayed_items(struct inode *inode,$/;"	f	typeref:typename:bool
btrfs_readdir_put_delayed_items	delayed-inode.c	/^void btrfs_readdir_put_delayed_items(struct inode *inode,$/;"	f	typeref:typename:void
btrfs_real_readdir	inode.c	/^static int btrfs_real_readdir(struct file *file, struct dir_context *ctx)$/;"	f	typeref:typename:int	file:
btrfs_realloc_node	ctree.c	/^int btrfs_realloc_node(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_rebuild_free_space_tree	free-space-tree.c	/^int btrfs_rebuild_free_space_tree(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_reclaim_bgs	block-group.c	/^void btrfs_reclaim_bgs(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_reclaim_bgs_work	block-group.c	/^void btrfs_reclaim_bgs_work(struct work_struct *work)$/;"	f	typeref:typename:void
btrfs_record_physical_zoned	zoned.c	/^void btrfs_record_physical_zoned(struct btrfs_bio *bbio)$/;"	f	typeref:typename:void
btrfs_record_physical_zoned	zoned.h	/^static inline void btrfs_record_physical_zoned(struct btrfs_bio *bbio)$/;"	f	typeref:typename:void
btrfs_record_root_in_trans	transaction.c	/^int btrfs_record_root_in_trans(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_record_snapshot_destroy	tree-log.c	/^void btrfs_record_snapshot_destroy(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void
btrfs_record_unlink_dir	tree-log.c	/^void btrfs_record_unlink_dir(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void
btrfs_recover_balance	volumes.c	/^int btrfs_recover_balance(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_recover_log_trees	tree-log.c	/^int btrfs_recover_log_trees(struct btrfs_root *log_root_tree)$/;"	f	typeref:typename:int
btrfs_recover_relocation	relocation.c	/^int btrfs_recover_relocation(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_redirty_list_add	zoned.c	/^void btrfs_redirty_list_add(struct btrfs_transaction *trans,$/;"	f	typeref:typename:void
btrfs_redirty_list_add	zoned.h	/^static inline void btrfs_redirty_list_add(struct btrfs_transaction *trans,$/;"	f	typeref:typename:void
btrfs_reduce_alloc_profile	block-group.c	/^static u64 btrfs_reduce_alloc_profile(struct btrfs_fs_info *fs_info, u64 flags)$/;"	f	typeref:typename:u64	file:
btrfs_ref	delayed-ref.h	/^struct btrfs_ref {$/;"	s
btrfs_ref_head_to_space_flags	delayed-ref.h	/^static inline u64 btrfs_ref_head_to_space_flags($/;"	f	typeref:typename:u64
btrfs_ref_to_path	backref.c	/^char *btrfs_ref_to_path(struct btrfs_root *fs_root, struct btrfs_path *path,$/;"	f	typeref:typename:char *
btrfs_ref_tree_mod	ref-verify.c	/^int btrfs_ref_tree_mod(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_ref_tree_mod	ref-verify.h	/^static inline int btrfs_ref_tree_mod(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_ref_type	delayed-ref.h	/^enum btrfs_ref_type {$/;"	g
btrfs_release_block_group	extent-tree.c	/^btrfs_release_block_group(struct btrfs_block_group *cache,$/;"	f	typeref:typename:void	file:
btrfs_release_delalloc_bytes	inode.c	/^static void btrfs_release_delalloc_bytes(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
btrfs_release_delayed_inode	delayed-inode.c	/^static void btrfs_release_delayed_inode(struct btrfs_delayed_node *delayed_node)$/;"	f	typeref:typename:void	file:
btrfs_release_delayed_iref	delayed-inode.c	/^static void btrfs_release_delayed_iref(struct btrfs_delayed_node *delayed_node)$/;"	f	typeref:typename:void	file:
btrfs_release_delayed_item	delayed-inode.c	/^static void btrfs_release_delayed_item(struct btrfs_delayed_item *item)$/;"	f	typeref:typename:void	file:
btrfs_release_delayed_node	delayed-inode.c	/^static inline void btrfs_release_delayed_node(struct btrfs_delayed_node *node)$/;"	f	typeref:typename:void	file:
btrfs_release_devid_kobj	sysfs.c	/^static void btrfs_release_devid_kobj(struct kobject *kobj)$/;"	f	typeref:typename:void	file:
btrfs_release_dir_index_item_space	delayed-inode.c	/^static void btrfs_release_dir_index_item_space(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:void	file:
btrfs_release_disk_super	volumes.c	/^void btrfs_release_disk_super(struct btrfs_super_block *super)$/;"	f	typeref:typename:void
btrfs_release_extent_buffer	extent_io.c	/^static inline void btrfs_release_extent_buffer(struct extent_buffer *eb)$/;"	f	typeref:typename:void	file:
btrfs_release_extent_buffer_pages	extent_io.c	/^static void btrfs_release_extent_buffer_pages(struct extent_buffer *eb)$/;"	f	typeref:typename:void	file:
btrfs_release_extent_buffer_rcu	extent_io.c	/^static inline void btrfs_release_extent_buffer_rcu(struct rcu_head *head)$/;"	f	typeref:typename:void	file:
btrfs_release_file	file.c	/^int btrfs_release_file(struct inode *inode, struct file *filp)$/;"	f	typeref:typename:int
btrfs_release_folio	inode.c	/^static bool btrfs_release_folio(struct folio *folio, gfp_t gfp_flags)$/;"	f	typeref:typename:bool	file:
btrfs_release_fsid_kobj	sysfs.c	/^static void btrfs_release_fsid_kobj(struct kobject *kobj)$/;"	f	typeref:typename:void	file:
btrfs_release_global_block_rsv	block-rsv.c	/^void btrfs_release_global_block_rsv(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_release_log_ctx_extents	tree-log.h	/^static inline void btrfs_release_log_ctx_extents(struct btrfs_log_ctx *ctx)$/;"	f	typeref:typename:void
btrfs_release_path	ctree.c	/^noinline void btrfs_release_path(struct btrfs_path *p)$/;"	f	typeref:typename:noinline void
btrfs_release_prepared_delayed_node	delayed-inode.c	/^static inline void btrfs_release_prepared_delayed_node($/;"	f	typeref:typename:void	file:
btrfs_reloc_clone_csums	relocation.c	/^int btrfs_reloc_clone_csums(struct btrfs_ordered_extent *ordered)$/;"	f	typeref:typename:int
btrfs_reloc_cow_block	relocation.c	/^int btrfs_reloc_cow_block(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_reloc_post_snapshot	relocation.c	/^int btrfs_reloc_post_snapshot(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_reloc_pre_snapshot	relocation.c	/^void btrfs_reloc_pre_snapshot(struct btrfs_pending_snapshot *pending,$/;"	f	typeref:typename:void
btrfs_relocate_block_group	relocation.c	/^int btrfs_relocate_block_group(struct btrfs_fs_info *fs_info, u64 group_start)$/;"	f	typeref:typename:int
btrfs_relocate_chunk	volumes.c	/^int btrfs_relocate_chunk(struct btrfs_fs_info *fs_info, u64 chunk_offset)$/;"	f	typeref:typename:int
btrfs_relocate_sys_chunks	volumes.c	/^static int btrfs_relocate_sys_chunks(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int	file:
btrfs_remap_file_range	reflink.c	/^loff_t btrfs_remap_file_range(struct file *src_file, loff_t off,$/;"	f	typeref:typename:loff_t
btrfs_remap_file_range_prep	reflink.c	/^static int btrfs_remap_file_range_prep(struct file *file_in, loff_t pos_in,$/;"	f	typeref:typename:int	file:
btrfs_remount	super.c	/^static int btrfs_remount(struct super_block *sb, int *flags, char *data)$/;"	f	typeref:typename:int	file:
btrfs_remount_begin	super.c	/^static inline void btrfs_remount_begin(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
btrfs_remount_cleanup	super.c	/^static inline void btrfs_remount_cleanup(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
btrfs_remove_all_log_ctxs	tree-log.c	/^static inline void btrfs_remove_all_log_ctxs(struct btrfs_root *root,$/;"	f	typeref:typename:void	file:
btrfs_remove_block_group	block-group.c	/^int btrfs_remove_block_group(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_remove_chunk	volumes.c	/^int btrfs_remove_chunk(struct btrfs_trans_handle *trans, u64 chunk_offset)$/;"	f	typeref:typename:int
btrfs_remove_delayed_node	delayed-inode.c	/^void btrfs_remove_delayed_node(struct btrfs_inode *inode)$/;"	f	typeref:typename:void
btrfs_remove_free_space	free-space-cache.c	/^int btrfs_remove_free_space(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int
btrfs_remove_free_space_cache	free-space-cache.c	/^void btrfs_remove_free_space_cache(struct btrfs_block_group *block_group)$/;"	f	typeref:typename:void
btrfs_remove_free_space_inode	free-space-cache.c	/^int btrfs_remove_free_space_inode(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_remove_log_ctx	tree-log.c	/^static inline void btrfs_remove_log_ctx(struct btrfs_root *root,$/;"	f	typeref:typename:void	file:
btrfs_remove_ordered_extent	ordered-data.c	/^void btrfs_remove_ordered_extent(struct btrfs_inode *btrfs_inode,$/;"	f	typeref:typename:void
btrfs_remove_qgroup	qgroup.c	/^int btrfs_remove_qgroup(struct btrfs_trans_handle *trans, u64 qgroupid)$/;"	f	typeref:typename:int
btrfs_rename	inode.c	/^static int btrfs_rename(struct mnt_idmap *idmap,$/;"	f	typeref:typename:int	file:
btrfs_rename2	inode.c	/^static int btrfs_rename2(struct mnt_idmap *idmap, struct inode *old_dir,$/;"	f	typeref:typename:int	file:
btrfs_rename_ctx	inode.c	/^struct btrfs_rename_ctx {$/;"	s	file:
btrfs_rename_exchange	inode.c	/^static int btrfs_rename_exchange(struct inode *old_dir,$/;"	f	typeref:typename:int	file:
btrfs_repair_bioset	bio.c	/^static struct bio_set btrfs_repair_bioset;$/;"	v	typeref:struct:bio_set	file:
btrfs_repair_done	bio.c	/^static void btrfs_repair_done(struct btrfs_failed_bio *fbio)$/;"	f	typeref:typename:void	file:
btrfs_repair_eb_io_failure	disk-io.c	/^static int btrfs_repair_eb_io_failure(const struct extent_buffer *eb,$/;"	f	typeref:typename:int	file:
btrfs_repair_io_failure	bio.c	/^int btrfs_repair_io_failure(struct btrfs_fs_info *fs_info, u64 ino, u64 start,$/;"	f	typeref:typename:int
btrfs_repair_one_zone	volumes.c	/^bool btrfs_repair_one_zone(struct btrfs_fs_info *fs_info, u64 logical)$/;"	f	typeref:typename:bool
btrfs_replace_extent_info	ctree.h	/^struct btrfs_replace_extent_info {$/;"	s
btrfs_replace_extent_map_range	extent_map.c	/^int btrfs_replace_extent_map_range(struct btrfs_inode *inode,$/;"	f	typeref:typename:int
btrfs_replace_file_extents	file.c	/^int btrfs_replace_file_extents(struct btrfs_inode *inode,$/;"	f	typeref:typename:int
btrfs_replay_log	disk-io.c	/^static int btrfs_replay_log(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
btrfs_report_missing_device	volumes.c	/^static void btrfs_report_missing_device(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
btrfs_reserve_chunk_metadata	block-group.c	/^void btrfs_reserve_chunk_metadata(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void
btrfs_reserve_data_bytes	space-info.c	/^int btrfs_reserve_data_bytes(struct btrfs_fs_info *fs_info, u64 bytes,$/;"	f	typeref:typename:int
btrfs_reserve_extent	extent-tree.c	/^int btrfs_reserve_extent(struct btrfs_root *root, u64 ram_bytes,$/;"	f	typeref:typename:int
btrfs_reserve_flush_enum	space-info.h	/^enum btrfs_reserve_flush_enum {$/;"	g
btrfs_reserve_metadata_bytes	space-info.c	/^int btrfs_reserve_metadata_bytes(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_reset_device_zone	zoned.c	/^int btrfs_reset_device_zone(struct btrfs_device *device, u64 physical,$/;"	f	typeref:typename:int
btrfs_reset_device_zone	zoned.h	/^static inline int btrfs_reset_device_zone(struct btrfs_device *device,$/;"	f	typeref:typename:int
btrfs_reset_sb_log_zones	zoned.c	/^int btrfs_reset_sb_log_zones(struct block_device *bdev, int mirror)$/;"	f	typeref:typename:int
btrfs_reset_sb_log_zones	zoned.h	/^static inline int btrfs_reset_sb_log_zones(struct block_device *bdev, int mirror)$/;"	f	typeref:typename:int
btrfs_resize_thread_pool	super.c	/^static void btrfs_resize_thread_pool(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
btrfs_resume_balance_async	volumes.c	/^int btrfs_resume_balance_async(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_resume_dev_replace_async	dev-replace.c	/^int btrfs_resume_dev_replace_async(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_return_cluster_to_free_space	free-space-cache.c	/^void btrfs_return_cluster_to_free_space($/;"	f	typeref:typename:void
btrfs_rewrite_logical_zoned	zoned.c	/^static void btrfs_rewrite_logical_zoned(struct btrfs_ordered_extent *ordered,$/;"	f	typeref:typename:void	file:
btrfs_rm_dev_item	volumes.c	/^static int btrfs_rm_dev_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_rm_dev_replace_blocked	dev-replace.c	/^static void btrfs_rm_dev_replace_blocked(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
btrfs_rm_dev_replace_free_srcdev	volumes.c	/^void btrfs_rm_dev_replace_free_srcdev(struct btrfs_device *srcdev)$/;"	f	typeref:typename:void
btrfs_rm_dev_replace_remove_srcdev	volumes.c	/^void btrfs_rm_dev_replace_remove_srcdev(struct btrfs_device *srcdev)$/;"	f	typeref:typename:void
btrfs_rm_dev_replace_unblocked	dev-replace.c	/^static void btrfs_rm_dev_replace_unblocked(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
btrfs_rm_device	volumes.c	/^int btrfs_rm_device(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_rmap_block	block-group.c	/^int btrfs_rmap_block(struct btrfs_fs_info *fs_info, u64 chunk_start,$/;"	f	typeref:typename:int
btrfs_rmdir	inode.c	/^static int btrfs_rmdir(struct inode *dir, struct dentry *dentry)$/;"	f	typeref:typename:int	file:
btrfs_root	ctree.h	/^struct btrfs_root {$/;"	s
btrfs_root_dead	ctree.h	/^static inline bool btrfs_root_dead(const struct btrfs_root *root)$/;"	f	typeref:typename:bool
btrfs_root_dec_send_in_progress	send.c	/^static void btrfs_root_dec_send_in_progress(struct btrfs_root* root)$/;"	f	typeref:typename:void	file:
btrfs_root_fs_type	super.c	/^static struct file_system_type btrfs_root_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
btrfs_root_fs_type	super.c	/^static struct file_system_type btrfs_root_fs_type;$/;"	v	typeref:struct:file_system_type	file:
btrfs_root_id	ctree.h	/^static inline u64 btrfs_root_id(const struct btrfs_root *root)$/;"	f	typeref:typename:u64
btrfs_root_name	print-tree.c	/^const char *btrfs_root_name(const struct btrfs_key *key, char *buf)$/;"	f	typeref:typename:const char *
btrfs_root_node	ctree.c	/^struct extent_buffer *btrfs_root_node(struct btrfs_root *root)$/;"	f	typeref:struct:extent_buffer *
btrfs_root_readonly	ctree.h	/^static inline bool btrfs_root_readonly(const struct btrfs_root *root)$/;"	f	typeref:typename:bool
btrfs_rsv_type	block-rsv.h	/^enum btrfs_rsv_type {$/;"	g
btrfs_run_defrag_inodes	defrag.c	/^int btrfs_run_defrag_inodes(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_run_delalloc_range	inode.c	/^int btrfs_run_delalloc_range(struct btrfs_inode *inode, struct page *locked_page,$/;"	f	typeref:typename:int
btrfs_run_delalloc_work	inode.c	/^static void btrfs_run_delalloc_work(struct btrfs_work *work)$/;"	f	typeref:typename:void	file:
btrfs_run_delayed_iput	inode.c	/^static void btrfs_run_delayed_iput(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
btrfs_run_delayed_iputs	inode.c	/^void btrfs_run_delayed_iputs(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_run_delayed_items	delayed-inode.c	/^int btrfs_run_delayed_items(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:int
btrfs_run_delayed_items_nr	delayed-inode.c	/^int btrfs_run_delayed_items_nr(struct btrfs_trans_handle *trans, int nr)$/;"	f	typeref:typename:int
btrfs_run_delayed_refs	extent-tree.c	/^int btrfs_run_delayed_refs(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_run_delayed_refs_for_head	extent-tree.c	/^static int btrfs_run_delayed_refs_for_head(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_run_dev_replace	dev-replace.c	/^int btrfs_run_dev_replace(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:int
btrfs_run_dev_stats	volumes.c	/^int btrfs_run_dev_stats(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:int
btrfs_run_discard_work	discard.c	/^static bool btrfs_run_discard_work(struct btrfs_discard_ctl *discard_ctl)$/;"	f	typeref:typename:bool	file:
btrfs_run_ordered_extent_work	ordered-data.c	/^static void btrfs_run_ordered_extent_work(struct btrfs_work *work)$/;"	f	typeref:typename:void	file:
btrfs_run_qgroups	qgroup.c	/^int btrfs_run_qgroups(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:int
btrfs_run_sanity_tests	tests/btrfs-tests.c	/^int btrfs_run_sanity_tests(void)$/;"	f	typeref:typename:int
btrfs_run_sanity_tests	tests/btrfs-tests.h	/^static inline int btrfs_run_sanity_tests(void)$/;"	f	typeref:typename:int
btrfs_sb	super.h	/^static inline struct btrfs_fs_info *btrfs_sb(struct super_block *sb)$/;"	f	typeref:struct:btrfs_fs_info *
btrfs_sb_fsid_ptr	volumes.c	/^u8 *btrfs_sb_fsid_ptr(struct btrfs_super_block *sb)$/;"	f	typeref:typename:u8 *
btrfs_sb_log_location	zoned.c	/^int btrfs_sb_log_location(struct btrfs_device *device, int mirror, int rw,$/;"	f	typeref:typename:int
btrfs_sb_log_location	zoned.h	/^static inline int btrfs_sb_log_location(struct btrfs_device *device, int mirror,$/;"	f	typeref:typename:int
btrfs_sb_log_location_bdev	zoned.c	/^int btrfs_sb_log_location_bdev(struct block_device *bdev, int mirror, int rw,$/;"	f	typeref:typename:int
btrfs_sb_log_location_bdev	zoned.h	/^static inline int btrfs_sb_log_location_bdev(struct block_device *bdev,$/;"	f	typeref:typename:int
btrfs_sb_log_location_bdev_partition	zoned.c	/^int btrfs_sb_log_location_bdev_partition(struct block_device *bdev,$/;"	f	typeref:typename:int
btrfs_sb_log_location_bdev_partition	zoned.h	/^static inline int btrfs_sb_log_location_bdev_partition(struct block_device *bdev,$/;"	f	typeref:typename:int
btrfs_sb_offset	disk-io.h	/^static inline u64 btrfs_sb_offset(int mirror)$/;"	f	typeref:typename:u64
btrfs_sb_offset_partition	disk-io.h	/^static inline u64 btrfs_sb_offset_partition(int mirror, u64 sb_offset)$/;"	f	typeref:typename:u64
btrfs_scan_one_device	volumes.c	/^struct btrfs_device *btrfs_scan_one_device(const char *path, blk_mode_t flags)$/;"	f	typeref:struct:btrfs_device *
btrfs_scan_one_device_partition	volumes.c	/^struct btrfs_device *btrfs_scan_one_device_partition(const char *path, blk_mode_t flags, int par/;"	f	typeref:struct:btrfs_device *
btrfs_schedule_zone_finish_bg	zoned.c	/^void btrfs_schedule_zone_finish_bg(struct btrfs_block_group *bg,$/;"	f	typeref:typename:void
btrfs_schedule_zone_finish_bg	zoned.h	/^static inline void btrfs_schedule_zone_finish_bg(struct btrfs_block_group *bg,$/;"	f	typeref:typename:void
btrfs_scratch_superblock	volumes.c	/^static void btrfs_scratch_superblock(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
btrfs_scratch_superblocks	volumes.c	/^void btrfs_scratch_superblocks(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_scrub_cancel	scrub.c	/^int btrfs_scrub_cancel(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_scrub_cancel_dev	scrub.c	/^int btrfs_scrub_cancel_dev(struct btrfs_device *dev)$/;"	f	typeref:typename:int
btrfs_scrub_continue	scrub.c	/^void btrfs_scrub_continue(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_scrub_dev	scrub.c	/^int btrfs_scrub_dev(struct btrfs_fs_info *fs_info, u64 devid, u64 start,$/;"	f	typeref:typename:int
btrfs_scrub_pause	scrub.c	/^void btrfs_scrub_pause(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_scrub_progress	scrub.c	/^int btrfs_scrub_progress(struct btrfs_fs_info *fs_info, u64 devid,$/;"	f	typeref:typename:int
btrfs_search_backwards	ctree.c	/^int btrfs_search_backwards(struct btrfs_root *root, struct btrfs_key *key,$/;"	f	typeref:typename:int
btrfs_search_dir_index_item	dir-item.c	/^btrfs_search_dir_index_item(struct btrfs_root *root, struct btrfs_path *path,$/;"	f	typeref:struct:btrfs_dir_item *
btrfs_search_forward	ctree.c	/^int btrfs_search_forward(struct btrfs_root *root, struct btrfs_key *min_key,$/;"	f	typeref:typename:int
btrfs_search_old_slot	ctree.c	/^int btrfs_search_old_slot(struct btrfs_root *root, const struct btrfs_key *key,$/;"	f	typeref:typename:int
btrfs_search_path_in_tree	ioctl.c	/^static noinline int btrfs_search_path_in_tree(struct btrfs_fs_info *info,$/;"	f	typeref:typename:noinline int	file:
btrfs_search_path_in_tree_user	ioctl.c	/^static int btrfs_search_path_in_tree_user(struct mnt_idmap *idmap,$/;"	f	typeref:typename:int	file:
btrfs_search_prev_slot	free-space-tree.c	/^static int btrfs_search_prev_slot(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_search_slot	ctree.c	/^int btrfs_search_slot(struct btrfs_trans_handle *trans, struct btrfs_root *root,$/;"	f	typeref:typename:int
btrfs_search_slot_for_read	ctree.c	/^int btrfs_search_slot_for_read(struct btrfs_root *root,$/;"	f	typeref:typename:int
btrfs_search_slot_get_root	ctree.c	/^static struct extent_buffer *btrfs_search_slot_get_root(struct btrfs_root *root,$/;"	f	typeref:struct:extent_buffer *	file:
btrfs_sectorsize_show	sysfs.c	/^static ssize_t btrfs_sectorsize_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_security_xattr_handler	xattr.c	/^static const struct xattr_handler btrfs_security_xattr_handler = {$/;"	v	typeref:typename:const struct xattr_handler	file:
btrfs_select_ref_head	delayed-ref.c	/^struct btrfs_delayed_ref_head *btrfs_select_ref_head($/;"	f	typeref:struct:btrfs_delayed_ref_head *
btrfs_send_cmd	send.h	/^enum btrfs_send_cmd {$/;"	g
btrfs_seq_list	tree-mod-log.h	/^struct btrfs_seq_list {$/;"	s
btrfs_set_acl	acl.c	/^int btrfs_set_acl(struct mnt_idmap *idmap, struct dentry *dentry,$/;"	f	typeref:typename:int
btrfs_set_acl	acl.h	/^#define btrfs_set_acl /;"	d
btrfs_set_and_info	fs.h	/^#define btrfs_set_and_info(/;"	d
btrfs_set_balance_data	accessors.h	/^static inline void btrfs_set_balance_data(struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_set_balance_meta	accessors.h	/^static inline void btrfs_set_balance_meta(struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_set_balance_sys	accessors.h	/^static inline void btrfs_set_balance_sys(struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_set_buffer_lockdep_class	locking.c	/^void btrfs_set_buffer_lockdep_class(u64 objectid, struct extent_buffer *eb, int level)$/;"	f	typeref:typename:void
btrfs_set_buffer_lockdep_class	locking.h	/^static inline void btrfs_set_buffer_lockdep_class(u64 objectid,$/;"	f	typeref:typename:void
btrfs_set_delalloc_extent	inode.c	/^void btrfs_set_delalloc_extent(struct btrfs_inode *inode, struct extent_state *state,$/;"	f	typeref:typename:void
btrfs_set_dev_stats_value	volumes.c	/^static void btrfs_set_dev_stats_value(struct extent_buffer *eb,$/;"	f	typeref:typename:void	file:
btrfs_set_device_total_bytes	accessors.h	/^static inline void btrfs_set_device_total_bytes(const struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_set_dir_item_key	accessors.h	/^static inline void btrfs_set_dir_item_key(struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_set_disk_extent_flags	extent-tree.c	/^int btrfs_set_disk_extent_flags(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_set_extent_delalloc	inode.c	/^int btrfs_set_extent_delalloc(struct btrfs_inode *inode, u64 start, u64 end,$/;"	f	typeref:typename:int
btrfs_set_first_dir_index_to_log	btrfs_inode.h	/^static inline void btrfs_set_first_dir_index_to_log(struct btrfs_inode *inode,$/;"	f	typeref:typename:void
btrfs_set_free_space_cache_v1_active	free-space-cache.c	/^int btrfs_set_free_space_cache_v1_active(struct btrfs_fs_info *fs_info, bool active)$/;"	f	typeref:typename:int
btrfs_set_free_space_key	accessors.h	/^static inline void btrfs_set_free_space_key(struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_set_fs_compat_ro	fs.h	/^#define btrfs_set_fs_compat_ro(/;"	d
btrfs_set_fs_incompat	fs.h	/^#define btrfs_set_fs_incompat(/;"	d
btrfs_set_header_backref_rev	accessors.h	/^static inline void btrfs_set_header_backref_rev(struct extent_buffer *eb, int rev)$/;"	f	typeref:typename:void
btrfs_set_header_flag	accessors.h	/^static inline void btrfs_set_header_flag(struct extent_buffer *eb, u64 flag)$/;"	f	typeref:typename:void
btrfs_set_inode_full_sync	btrfs_inode.h	/^static inline void btrfs_set_inode_full_sync(struct btrfs_inode *inode)$/;"	f	typeref:typename:void
btrfs_set_inode_index	inode.c	/^int btrfs_set_inode_index(struct btrfs_inode *dir, u64 *index)$/;"	f	typeref:typename:int
btrfs_set_inode_index_count	inode.c	/^static int btrfs_set_inode_index_count(struct btrfs_inode *inode)$/;"	f	typeref:typename:int	file:
btrfs_set_inode_last_sub_trans	btrfs_inode.h	/^static inline void btrfs_set_inode_last_sub_trans(struct btrfs_inode *inode)$/;"	f	typeref:typename:void
btrfs_set_inode_last_trans	transaction.h	/^static inline void btrfs_set_inode_last_trans(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void
btrfs_set_item_key	accessors.h	/^static inline void btrfs_set_item_key(struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_set_item_key_safe	ctree.c	/^void btrfs_set_item_key_safe(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void
btrfs_set_last_root_drop_gen	fs.h	/^static inline void btrfs_set_last_root_drop_gen(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_set_log_full_commit	tree-log.h	/^static inline void btrfs_set_log_full_commit(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:void
btrfs_set_node_blockptr	accessors.h	/^static inline void btrfs_set_node_blockptr(const struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_set_node_key	accessors.h	/^static inline void btrfs_set_node_key(const struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_set_node_ptr_generation	accessors.h	/^static inline void btrfs_set_node_ptr_generation(const struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_set_opt	fs.h	/^#define btrfs_set_opt(/;"	d
btrfs_set_prop	props.c	/^int btrfs_set_prop(struct btrfs_trans_handle *trans, struct inode *inode,$/;"	f	typeref:typename:int
btrfs_set_range_writeback	inode.c	/^void btrfs_set_range_writeback(struct btrfs_inode *inode, u64 start, u64 end)$/;"	f	typeref:typename:void
btrfs_set_root_node	root-tree.c	/^void btrfs_set_root_node(struct btrfs_root_item *item,$/;"	f	typeref:typename:void
btrfs_set_sb_rdonly	super.h	/^static inline void btrfs_set_sb_rdonly(struct super_block *sb)$/;"	f	typeref:typename:void
btrfs_set_skip_qgroup	transaction.h	/^static inline void btrfs_set_skip_qgroup(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void
btrfs_set_stripe_devid_nr	accessors.h	/^static inline void btrfs_set_stripe_devid_nr(struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_set_stripe_offset_nr	accessors.h	/^static inline void btrfs_set_stripe_offset_nr(struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_set_super	super.c	/^static int btrfs_set_super(struct super_block *s, void *data)$/;"	f	typeref:typename:int	file:
btrfs_set_target_alloc_state	dev-replace.c	/^static int btrfs_set_target_alloc_state(struct btrfs_device *srcdev,$/;"	f	typeref:typename:int	file:
btrfs_set_tree_block_key	accessors.h	/^static inline void btrfs_set_tree_block_key(const struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_setattr	inode.c	/^static int btrfs_setattr(struct mnt_idmap *idmap, struct dentry *dentry,$/;"	f	typeref:typename:int	file:
btrfs_setsize	inode.c	/^static int btrfs_setsize(struct inode *inode, struct iattr *attr)$/;"	f	typeref:typename:int	file:
btrfs_setup_item_for_insert	ctree.c	/^void btrfs_setup_item_for_insert(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void
btrfs_setup_space_cache	block-group.c	/^int btrfs_setup_space_cache(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:int
btrfs_setup_sprout	volumes.c	/^static void btrfs_setup_sprout(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
btrfs_setxattr	xattr.c	/^int btrfs_setxattr(struct btrfs_trans_handle *trans, struct inode *inode,$/;"	f	typeref:typename:int
btrfs_setxattr_trans	xattr.c	/^int btrfs_setxattr_trans(struct inode *inode, const char *name,$/;"	f	typeref:typename:int
btrfs_should_cancel_balance	relocation.c	/^noinline int btrfs_should_cancel_balance(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:noinline int
btrfs_should_delete_dir_index	delayed-inode.c	/^int btrfs_should_delete_dir_index(struct list_head *del_list,$/;"	f	typeref:typename:int
btrfs_should_end_transaction	transaction.c	/^bool btrfs_should_end_transaction(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:bool
btrfs_should_fragment_free_space	block-group.c	/^int btrfs_should_fragment_free_space(struct btrfs_block_group *block_group)$/;"	f	typeref:typename:int
btrfs_should_ignore_reloc_root	relocation.c	/^int btrfs_should_ignore_reloc_root(struct btrfs_root *root)$/;"	f	typeref:typename:int
btrfs_should_reclaim	block-group.c	/^static inline bool btrfs_should_reclaim(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:bool	file:
btrfs_show_devname	super.c	/^static int btrfs_show_devname(struct seq_file *m, struct dentry *root)$/;"	f	typeref:typename:int	file:
btrfs_show_options	super.c	/^static int btrfs_show_options(struct seq_file *seq, struct dentry *dentry)$/;"	f	typeref:typename:int	file:
btrfs_show_u64	sysfs.c	/^static ssize_t btrfs_show_u64(u64 *value_ptr, spinlock_t *lock, char *buf)$/;"	f	typeref:typename:ssize_t	file:
btrfs_shrink_device	volumes.c	/^int btrfs_shrink_device(struct btrfs_device *device, u64 new_size)$/;"	f	typeref:typename:int
btrfs_simple_end_io	bio.c	/^static void btrfs_simple_end_io(struct bio *bio)$/;"	f	typeref:typename:void	file:
btrfs_sinfo_bg_reclaim_threshold_show	sysfs.c	/^static ssize_t btrfs_sinfo_bg_reclaim_threshold_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_sinfo_bg_reclaim_threshold_store	sysfs.c	/^static ssize_t btrfs_sinfo_bg_reclaim_threshold_store(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_size_classes_show	sysfs.c	/^static ssize_t btrfs_size_classes_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
btrfs_space_info	space-info.h	/^struct btrfs_space_info {$/;"	s
btrfs_space_info_free_bytes_may_use	space-info.h	/^static inline void btrfs_space_info_free_bytes_may_use($/;"	f	typeref:typename:void
btrfs_space_info_used	space-info.c	/^u64 __pure btrfs_space_info_used(struct btrfs_space_info *s_info,$/;"	f	typeref:typename:u64 __pure
btrfs_special_inode_operations	inode.c	/^static const struct inode_operations btrfs_special_inode_operations = {$/;"	v	typeref:typename:const struct inode_operations	file:
btrfs_special_inode_operations	inode.c	/^static const struct inode_operations btrfs_special_inode_operations;$/;"	v	typeref:typename:const struct inode_operations	file:
btrfs_split_bio	bio.c	/^static struct btrfs_bio *btrfs_split_bio(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_bio *	file:
btrfs_split_delalloc_extent	inode.c	/^void btrfs_split_delalloc_extent(struct btrfs_inode *inode,$/;"	f	typeref:typename:void
btrfs_split_item	ctree.c	/^int btrfs_split_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_split_ordered_extent	ordered-data.c	/^struct btrfs_ordered_extent *btrfs_split_ordered_extent($/;"	f	typeref:struct:btrfs_ordered_extent *
btrfs_stack_dir_ftype	accessors.h	/^static inline u8 btrfs_stack_dir_ftype(const struct btrfs_dir_item *item)$/;"	f	typeref:typename:u8
btrfs_start_delalloc_flush	transaction.c	/^static inline int btrfs_start_delalloc_flush(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int	file:
btrfs_start_delalloc_roots	inode.c	/^int btrfs_start_delalloc_roots(struct btrfs_fs_info *fs_info, long nr,$/;"	f	typeref:typename:int
btrfs_start_delalloc_snapshot	inode.c	/^int btrfs_start_delalloc_snapshot(struct btrfs_root *root, bool in_reclaim_context)$/;"	f	typeref:typename:int
btrfs_start_dirty_block_groups	block-group.c	/^int btrfs_start_dirty_block_groups(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:int
btrfs_start_ordered_extent	ordered-data.c	/^void btrfs_start_ordered_extent(struct btrfs_ordered_extent *entry)$/;"	f	typeref:typename:void
btrfs_start_pre_rw_mount	disk-io.c	/^int btrfs_start_pre_rw_mount(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_start_trans_remove_block_group	block-group.c	/^struct btrfs_trans_handle *btrfs_start_trans_remove_block_group($/;"	f	typeref:struct:btrfs_trans_handle *
btrfs_start_transaction	transaction.c	/^struct btrfs_trans_handle *btrfs_start_transaction(struct btrfs_root *root,$/;"	f	typeref:struct:btrfs_trans_handle *
btrfs_start_transaction_fallback_global_rsv	transaction.c	/^struct btrfs_trans_handle *btrfs_start_transaction_fallback_global_rsv($/;"	f	typeref:struct:btrfs_trans_handle *
btrfs_state_change_map	fs.h	/^	struct lockdep_map btrfs_state_change_map[4];$/;"	m	struct:btrfs_fs_info	typeref:struct:lockdep_map[4]
btrfs_state_lockdep_init_map	locking.h	/^#define btrfs_state_lockdep_init_map(/;"	d
btrfs_state_to_string	messages.c	/^static void btrfs_state_to_string(const struct btrfs_fs_info *info, char *buf)$/;"	f	typeref:typename:void	file:
btrfs_statfs	super.c	/^static int btrfs_statfs(struct dentry *dentry, struct kstatfs *buf)$/;"	f	typeref:typename:int	file:
btrfs_static_feature_attr_group	sysfs.c	/^static const struct attribute_group btrfs_static_feature_attr_group = {$/;"	v	typeref:typename:const struct attribute_group	file:
btrfs_stop_all_workers	disk-io.c	/^static void btrfs_stop_all_workers(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
btrfs_stream_header	send.h	/^struct btrfs_stream_header {$/;"	s
btrfs_stripe_dev_uuid	accessors.h	/^static inline char *btrfs_stripe_dev_uuid(struct btrfs_stripe *s)$/;"	f	typeref:typename:char *
btrfs_stripe_dev_uuid_nr	accessors.h	/^static inline char *btrfs_stripe_dev_uuid_nr(struct btrfs_chunk *c, int nr)$/;"	f	typeref:typename:char *
btrfs_stripe_devid_nr	accessors.h	/^static inline u64 btrfs_stripe_devid_nr(const struct extent_buffer *eb,$/;"	f	typeref:typename:u64
btrfs_stripe_hash	raid56.c	/^struct btrfs_stripe_hash {$/;"	s	file:
btrfs_stripe_hash_table	raid56.c	/^struct btrfs_stripe_hash_table {$/;"	s	file:
btrfs_stripe_nr	accessors.h	/^static inline struct btrfs_stripe *btrfs_stripe_nr(struct btrfs_chunk *c, int nr)$/;"	f	typeref:struct:btrfs_stripe *
btrfs_stripe_nr_to_offset	volumes.h	/^static inline u64 btrfs_stripe_nr_to_offset(u32 stripe_nr)$/;"	f	typeref:typename:u64
btrfs_stripe_offset_nr	accessors.h	/^static inline u64 btrfs_stripe_offset_nr(const struct extent_buffer *eb,$/;"	f	typeref:typename:u64
btrfs_submit_bio	bio.c	/^void btrfs_submit_bio(struct btrfs_bio *bbio, int mirror_num)$/;"	f	typeref:typename:void
btrfs_submit_chunk	bio.c	/^static bool btrfs_submit_chunk(struct btrfs_bio *bbio, int mirror_num)$/;"	f	typeref:typename:bool	file:
btrfs_submit_compressed_read	compression.c	/^void btrfs_submit_compressed_read(struct btrfs_bio *bbio)$/;"	f	typeref:typename:void
btrfs_submit_compressed_write	compression.c	/^void btrfs_submit_compressed_write(struct btrfs_ordered_extent *ordered,$/;"	f	typeref:typename:void
btrfs_submit_dev_bio	bio.c	/^static void btrfs_submit_dev_bio(struct btrfs_device *dev, struct bio *bio)$/;"	f	typeref:typename:void	file:
btrfs_submit_mirrored_bio	bio.c	/^static void btrfs_submit_mirrored_bio(struct btrfs_io_context *bioc, int dev_nr)$/;"	f	typeref:typename:void	file:
btrfs_submit_repair_write	bio.c	/^void btrfs_submit_repair_write(struct btrfs_bio *bbio, int mirror_num, bool dev_replace)$/;"	f	typeref:typename:void
btrfs_subpage	subpage.h	/^struct btrfs_subpage {$/;"	s
btrfs_subpage_assert	subpage.c	/^static void btrfs_subpage_assert(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
btrfs_subpage_clamp_range	subpage.c	/^static void btrfs_subpage_clamp_range(struct page *page, u64 *start, u32 *len)$/;"	f	typeref:typename:void	file:
btrfs_subpage_clear_and_test_dirty	subpage.c	/^bool btrfs_subpage_clear_and_test_dirty(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:bool
btrfs_subpage_clear_checked	subpage.c	/^void btrfs_subpage_clear_checked(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_subpage_clear_dirty	subpage.c	/^void btrfs_subpage_clear_dirty(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_subpage_clear_ordered	subpage.c	/^void btrfs_subpage_clear_ordered(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_subpage_clear_uptodate	subpage.c	/^void btrfs_subpage_clear_uptodate(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_subpage_clear_writeback	subpage.c	/^void btrfs_subpage_clear_writeback(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_subpage_dump_bitmap	subpage.c	/^void __cold btrfs_subpage_dump_bitmap(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void __cold
btrfs_subpage_end_and_test_writer	subpage.c	/^bool btrfs_subpage_end_and_test_writer(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:bool
btrfs_subpage_end_reader	subpage.c	/^void btrfs_subpage_end_reader(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_subpage_info	subpage.h	/^struct btrfs_subpage_info {$/;"	s
btrfs_subpage_set_checked	subpage.c	/^void btrfs_subpage_set_checked(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_subpage_set_dirty	subpage.c	/^void btrfs_subpage_set_dirty(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_subpage_set_ordered	subpage.c	/^void btrfs_subpage_set_ordered(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_subpage_set_uptodate	subpage.c	/^void btrfs_subpage_set_uptodate(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_subpage_set_writeback	subpage.c	/^void btrfs_subpage_set_writeback(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_subpage_start_reader	subpage.c	/^void btrfs_subpage_start_reader(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_subpage_start_writer	subpage.c	/^void btrfs_subpage_start_writer(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_subpage_type	subpage.h	/^enum btrfs_subpage_type {$/;"	g
btrfs_subvolume_release_metadata	root-tree.c	/^void btrfs_subvolume_release_metadata(struct btrfs_root *root,$/;"	f	typeref:typename:void
btrfs_subvolume_reserve_metadata	root-tree.c	/^int btrfs_subvolume_reserve_metadata(struct btrfs_root *root,$/;"	f	typeref:typename:int
btrfs_super_csum_driver	ctree.c	/^const char *btrfs_super_csum_driver(u16 csum_type)$/;"	f	typeref:typename:const char *
btrfs_super_csum_name	ctree.c	/^const char *btrfs_super_csum_name(u16 csum_type)$/;"	f	typeref:typename:const char *
btrfs_super_csum_size	ctree.c	/^int btrfs_super_csum_size(const struct btrfs_super_block *s)$/;"	f	typeref:typename:int
btrfs_super_ops	super.c	/^static const struct super_operations btrfs_super_ops = {$/;"	v	typeref:typename:const struct super_operations	file:
btrfs_super_ops	super.c	/^static const struct super_operations btrfs_super_ops;$/;"	v	typeref:typename:const struct super_operations	file:
btrfs_supported_feature_attrs	sysfs.c	/^static struct attribute *btrfs_supported_feature_attrs[] = {$/;"	v	typeref:struct:attribute * []	file:
btrfs_supported_static_feature_attrs	sysfs.c	/^static struct attribute *btrfs_supported_static_feature_attrs[] = {$/;"	v	typeref:struct:attribute * []	file:
btrfs_supported_super_csum	disk-io.c	/^static bool btrfs_supported_super_csum(u16 csum_type)$/;"	f	typeref:typename:bool	file:
btrfs_swap_activate	inode.c	/^static int btrfs_swap_activate(struct swap_info_struct *sis, struct file *file,$/;"	f	typeref:typename:int	file:
btrfs_swap_deactivate	inode.c	/^static void btrfs_swap_deactivate(struct file *file)$/;"	f	typeref:typename:void	file:
btrfs_swap_info	inode.c	/^struct btrfs_swap_info {$/;"	s	file:
btrfs_swapfile_pin	volumes.h	/^struct btrfs_swapfile_pin {$/;"	s
btrfs_symlink	inode.c	/^static int btrfs_symlink(struct mnt_idmap *idmap, struct inode *dir,$/;"	f	typeref:typename:int	file:
btrfs_symlink_inode_operations	inode.c	/^static const struct inode_operations btrfs_symlink_inode_operations = {$/;"	v	typeref:typename:const struct inode_operations	file:
btrfs_symlink_inode_operations	inode.c	/^static const struct inode_operations btrfs_symlink_inode_operations;$/;"	v	typeref:typename:const struct inode_operations	file:
btrfs_sync_file	file.c	/^int btrfs_sync_file(struct file *file, loff_t start, loff_t end, int datasync)$/;"	f	typeref:typename:int
btrfs_sync_fs	super.c	/^int btrfs_sync_fs(struct super_block *sb, int wait)$/;"	f	typeref:typename:int
btrfs_sync_inode_flags_to_i_flags	ioctl.c	/^void btrfs_sync_inode_flags_to_i_flags(struct inode *inode)$/;"	f	typeref:typename:void
btrfs_sync_log	tree-log.c	/^int btrfs_sync_log(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_sync_zone_write_pointer	zoned.c	/^int btrfs_sync_zone_write_pointer(struct btrfs_device *tgt_dev, u64 logical,$/;"	f	typeref:typename:int
btrfs_sync_zone_write_pointer	zoned.h	/^static inline int btrfs_sync_zone_write_pointer(struct btrfs_device *tgt_dev,$/;"	f	typeref:typename:int
btrfs_sysfs_add_block_group_type	sysfs.c	/^void btrfs_sysfs_add_block_group_type(struct btrfs_block_group *cache)$/;"	f	typeref:typename:void
btrfs_sysfs_add_device	sysfs.c	/^int btrfs_sysfs_add_device(struct btrfs_device *device)$/;"	f	typeref:typename:int
btrfs_sysfs_add_fs_devices	sysfs.c	/^static int btrfs_sysfs_add_fs_devices(struct btrfs_fs_devices *fs_devices)$/;"	f	typeref:typename:int	file:
btrfs_sysfs_add_fsid	sysfs.c	/^int btrfs_sysfs_add_fsid(struct btrfs_fs_devices *fs_devs)$/;"	f	typeref:typename:int
btrfs_sysfs_add_mounted	sysfs.c	/^int btrfs_sysfs_add_mounted(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_sysfs_add_one_qgroup	sysfs.c	/^int btrfs_sysfs_add_one_qgroup(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_sysfs_add_qgroups	sysfs.c	/^int btrfs_sysfs_add_qgroups(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_sysfs_add_space_info_type	sysfs.c	/^int btrfs_sysfs_add_space_info_type(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_sysfs_del_one_qgroup	sysfs.c	/^void btrfs_sysfs_del_one_qgroup(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_sysfs_del_qgroups	sysfs.c	/^void btrfs_sysfs_del_qgroups(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_sysfs_feature_update	sysfs.c	/^void btrfs_sysfs_feature_update(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_sysfs_remove_device	sysfs.c	/^void btrfs_sysfs_remove_device(struct btrfs_device *device)$/;"	f	typeref:typename:void
btrfs_sysfs_remove_fs_devices	sysfs.c	/^static void btrfs_sysfs_remove_fs_devices(struct btrfs_fs_devices *fs_devices)$/;"	f	typeref:typename:void	file:
btrfs_sysfs_remove_fsid	sysfs.c	/^void btrfs_sysfs_remove_fsid(struct btrfs_fs_devices *fs_devs)$/;"	f	typeref:typename:void
btrfs_sysfs_remove_mounted	sysfs.c	/^void btrfs_sysfs_remove_mounted(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_sysfs_remove_space_info	sysfs.c	/^void btrfs_sysfs_remove_space_info(struct btrfs_space_info *space_info)$/;"	f	typeref:typename:void
btrfs_sysfs_update_devid	sysfs.c	/^void btrfs_sysfs_update_devid(struct btrfs_device *device)$/;"	f	typeref:typename:void
btrfs_sysfs_update_sprout_fsid	sysfs.c	/^void btrfs_sysfs_update_sprout_fsid(struct btrfs_fs_devices *fs_devices)$/;"	f	typeref:typename:void
btrfs_system_alloc_profile	block-group.h	/^static inline u64 btrfs_system_alloc_profile(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:u64
btrfs_test_destroy_inode	inode.c	/^void btrfs_test_destroy_inode(struct inode *inode)$/;"	f	typeref:typename:void
btrfs_test_extent_buffer_operations	tests/extent-buffer-tests.c	/^int btrfs_test_extent_buffer_operations(u32 sectorsize, u32 nodesize)$/;"	f	typeref:typename:int
btrfs_test_extent_io	tests/extent-io-tests.c	/^int btrfs_test_extent_io(u32 sectorsize, u32 nodesize)$/;"	f	typeref:typename:int
btrfs_test_extent_map	tests/extent-map-tests.c	/^int btrfs_test_extent_map(void)$/;"	f	typeref:typename:int
btrfs_test_free_space_cache	tests/free-space-tests.c	/^int btrfs_test_free_space_cache(u32 sectorsize, u32 nodesize)$/;"	f	typeref:typename:int
btrfs_test_free_space_tree	tests/free-space-tree-tests.c	/^int btrfs_test_free_space_tree(u32 sectorsize, u32 nodesize)$/;"	f	typeref:typename:int
btrfs_test_init_fs_context	tests/btrfs-tests.c	/^static int btrfs_test_init_fs_context(struct fs_context *fc)$/;"	f	typeref:typename:int	file:
btrfs_test_inodes	tests/inode-tests.c	/^int btrfs_test_inodes(u32 sectorsize, u32 nodesize)$/;"	f	typeref:typename:int
btrfs_test_opt	fs.h	/^#define btrfs_test_opt(/;"	d
btrfs_test_qgroups	tests/qgroup-tests.c	/^int btrfs_test_qgroups(u32 sectorsize, u32 nodesize)$/;"	f	typeref:typename:int
btrfs_test_super	super.c	/^static int btrfs_test_super(struct super_block *s, void *data)$/;"	f	typeref:typename:int	file:
btrfs_test_super_ops	tests/btrfs-tests.c	/^static const struct super_operations btrfs_test_super_ops = {$/;"	v	typeref:typename:const struct super_operations	file:
btrfs_throttle	transaction.c	/^void btrfs_throttle(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_tlv_header	send.h	/^struct btrfs_tlv_header {$/;"	s
btrfs_tlv_type	send.h	/^enum btrfs_tlv_type {$/;"	g
btrfs_tmpfile	inode.c	/^static int btrfs_tmpfile(struct mnt_idmap *idmap, struct inode *dir,$/;"	f	typeref:typename:int	file:
btrfs_trace_truncate	inode-item.c	/^static inline void btrfs_trace_truncate(struct btrfs_inode *inode,$/;"	f	typeref:typename:void	file:
btrfs_trans_handle	transaction.h	/^struct btrfs_trans_handle {$/;"	s
btrfs_trans_handle_cachep	transaction.c	/^static struct kmem_cache *btrfs_trans_handle_cachep;$/;"	v	typeref:struct:kmem_cache *	file:
btrfs_trans_num_extwriters_map	fs.h	/^	struct lockdep_map btrfs_trans_num_extwriters_map;$/;"	m	struct:btrfs_fs_info	typeref:struct:lockdep_map
btrfs_trans_num_writers_map	fs.h	/^	struct lockdep_map btrfs_trans_num_writers_map;$/;"	m	struct:btrfs_fs_info	typeref:struct:lockdep_map
btrfs_trans_pending_ordered_map	fs.h	/^	struct lockdep_map btrfs_trans_pending_ordered_map;$/;"	m	struct:btrfs_fs_info	typeref:struct:lockdep_map
btrfs_trans_release_chunk_metadata	transaction.c	/^void btrfs_trans_release_chunk_metadata(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:void
btrfs_trans_release_metadata	transaction.c	/^static void btrfs_trans_release_metadata(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:void	file:
btrfs_trans_state	transaction.h	/^enum btrfs_trans_state {$/;"	g
btrfs_trans_state_lockdep_acquire	locking.h	/^#define btrfs_trans_state_lockdep_acquire(/;"	d
btrfs_trans_state_lockdep_release	locking.h	/^#define btrfs_trans_state_lockdep_release(/;"	d
btrfs_transaction	transaction.h	/^struct btrfs_transaction {$/;"	s
btrfs_transaction_blocked	transaction.c	/^int btrfs_transaction_blocked(struct btrfs_fs_info *info)$/;"	f	typeref:typename:int
btrfs_transaction_exit	transaction.c	/^void __cold btrfs_transaction_exit(void)$/;"	f	typeref:typename:void __cold
btrfs_transaction_in_commit	transaction.c	/^int btrfs_transaction_in_commit(struct btrfs_fs_info *info)$/;"	f	typeref:typename:int
btrfs_transaction_init	transaction.c	/^int __init btrfs_transaction_init(void)$/;"	f	typeref:typename:int __init
btrfs_tree_block_key	accessors.h	/^static inline void btrfs_tree_block_key(const struct extent_buffer *eb,$/;"	f	typeref:typename:void
btrfs_tree_block_status	tree-checker.h	/^enum btrfs_tree_block_status {$/;"	g
btrfs_tree_lock	locking.c	/^void btrfs_tree_lock(struct extent_buffer *eb)$/;"	f	typeref:typename:void
btrfs_tree_mod_log_eb_copy	tree-mod-log.c	/^int btrfs_tree_mod_log_eb_copy(struct extent_buffer *dst,$/;"	f	typeref:typename:int
btrfs_tree_mod_log_free_eb	tree-mod-log.c	/^int btrfs_tree_mod_log_free_eb(struct extent_buffer *eb)$/;"	f	typeref:typename:int
btrfs_tree_mod_log_insert_key	tree-mod-log.c	/^int btrfs_tree_mod_log_insert_key(struct extent_buffer *eb, int slot,$/;"	f	typeref:typename:int
btrfs_tree_mod_log_insert_move	tree-mod-log.c	/^int btrfs_tree_mod_log_insert_move(struct extent_buffer *eb,$/;"	f	typeref:typename:int
btrfs_tree_mod_log_insert_root	tree-mod-log.c	/^int btrfs_tree_mod_log_insert_root(struct extent_buffer *old_root,$/;"	f	typeref:typename:int
btrfs_tree_mod_log_lowest_seq	tree-mod-log.c	/^u64 btrfs_tree_mod_log_lowest_seq(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:u64
btrfs_tree_mod_log_rewind	tree-mod-log.c	/^struct extent_buffer *btrfs_tree_mod_log_rewind(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:extent_buffer *
btrfs_tree_parent_check	tree-checker.h	/^struct btrfs_tree_parent_check {$/;"	s
btrfs_tree_read_lock	locking.c	/^void btrfs_tree_read_lock(struct extent_buffer *eb)$/;"	f	typeref:typename:void
btrfs_tree_read_unlock	locking.c	/^void btrfs_tree_read_unlock(struct extent_buffer *eb)$/;"	f	typeref:typename:void
btrfs_tree_ref	delayed-ref.h	/^struct btrfs_tree_ref {$/;"	s
btrfs_tree_unlock	locking.c	/^void btrfs_tree_unlock(struct extent_buffer *eb)$/;"	f	typeref:typename:void
btrfs_tree_unlock_rw	locking.h	/^static inline void btrfs_tree_unlock_rw(struct extent_buffer *eb, int rw)$/;"	f	typeref:typename:void
btrfs_trim_block_group	free-space-cache.c	/^int btrfs_trim_block_group(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int
btrfs_trim_block_group_bitmaps	free-space-cache.c	/^int btrfs_trim_block_group_bitmaps(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int
btrfs_trim_block_group_extents	free-space-cache.c	/^int btrfs_trim_block_group_extents(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int
btrfs_trim_free_extents	extent-tree.c	/^static int btrfs_trim_free_extents(struct btrfs_device *device, u64 *trimmed)$/;"	f	typeref:typename:int	file:
btrfs_trim_fs	extent-tree.c	/^int btrfs_trim_fs(struct btrfs_fs_info *fs_info, struct fstrim_range *range)$/;"	f	typeref:typename:int
btrfs_trim_range	free-space-cache.c	/^struct btrfs_trim_range {$/;"	s	file:
btrfs_trim_state	free-space-cache.h	/^enum btrfs_trim_state {$/;"	g
btrfs_truncate	inode.c	/^static int btrfs_truncate(struct btrfs_inode *inode, bool skip_writeback)$/;"	f	typeref:typename:int	file:
btrfs_truncate_block	inode.c	/^int btrfs_truncate_block(struct btrfs_inode *inode, loff_t from, loff_t len,$/;"	f	typeref:typename:int
btrfs_truncate_control	inode-item.h	/^struct btrfs_truncate_control {$/;"	s
btrfs_truncate_free_space_cache	free-space-cache.c	/^int btrfs_truncate_free_space_cache(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_truncate_inode_items	inode-item.c	/^int btrfs_truncate_inode_items(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_truncate_item	ctree.c	/^void btrfs_truncate_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void
btrfs_trusted_xattr_handler	xattr.c	/^static const struct xattr_handler btrfs_trusted_xattr_handler = {$/;"	v	typeref:typename:const struct xattr_handler	file:
btrfs_try_granting_tickets	space-info.c	/^void btrfs_try_granting_tickets(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_try_lock_balance	ioctl.c	/^static int btrfs_try_lock_balance(struct btrfs_fs_info *fs_info, bool *excl_acquired)$/;"	f	typeref:typename:int	file:
btrfs_try_lock_ordered_range	ordered-data.c	/^bool btrfs_try_lock_ordered_range(struct btrfs_inode *inode, u64 start, u64 end,$/;"	f	typeref:typename:bool
btrfs_try_read_lock_root_node	locking.c	/^struct extent_buffer *btrfs_try_read_lock_root_node(struct btrfs_root *root)$/;"	f	typeref:struct:extent_buffer *
btrfs_try_tree_read_lock	locking.c	/^int btrfs_try_tree_read_lock(struct extent_buffer *eb)$/;"	f	typeref:typename:int
btrfs_try_tree_write_lock	locking.c	/^int btrfs_try_tree_write_lock(struct extent_buffer *eb)$/;"	f	typeref:typename:int
btrfs_unfreeze	super.c	/^static int btrfs_unfreeze(struct super_block *sb)$/;"	f	typeref:typename:int	file:
btrfs_unfreeze_block_group	block-group.c	/^void btrfs_unfreeze_block_group(struct btrfs_block_group *block_group)$/;"	f	typeref:typename:void
btrfs_unknown_feature_names	sysfs.c	/^static char btrfs_unknown_feature_names[FEAT_MAX][NUM_FEATURE_BITS][BTRFS_FEATURE_NAME_MAX];$/;"	v	typeref:typename:char[][][]	file:
btrfs_unlink	inode.c	/^static int btrfs_unlink(struct inode *dir, struct dentry *dentry)$/;"	f	typeref:typename:int	file:
btrfs_unlink_inode	inode.c	/^int btrfs_unlink_inode(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_unlink_subvol	inode.c	/^static int btrfs_unlink_subvol(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_unlock_up_safe	locking.c	/^void btrfs_unlock_up_safe(struct btrfs_path *path, int level)$/;"	f	typeref:typename:void
btrfs_unuse_block_rsv	block-rsv.h	/^static inline void btrfs_unuse_block_rsv(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_update_block_group	block-group.c	/^int btrfs_update_block_group(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_update_delayed_inode	delayed-inode.c	/^static inline int btrfs_update_delayed_inode(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
btrfs_update_delayed_refs_rsv	delayed-ref.c	/^void btrfs_update_delayed_refs_rsv(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:void
btrfs_update_device	volumes.c	/^static noinline int btrfs_update_device(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
btrfs_update_discard_index	discard.c	/^static void btrfs_update_discard_index(struct btrfs_discard_ctl *discard_ctl,$/;"	f	typeref:typename:void	file:
btrfs_update_global_block_rsv	block-rsv.c	/^void btrfs_update_global_block_rsv(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_update_inode	inode.c	/^noinline int btrfs_update_inode(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int
btrfs_update_inode_bytes	inode.c	/^void btrfs_update_inode_bytes(struct btrfs_inode *inode,$/;"	f	typeref:typename:void
btrfs_update_inode_fallback	inode.c	/^int btrfs_update_inode_fallback(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_update_inode_item	inode.c	/^static noinline int btrfs_update_inode_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
btrfs_update_ioctl_balance_args	ioctl.c	/^void btrfs_update_ioctl_balance_args(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_update_reloc_root	relocation.c	/^int btrfs_update_reloc_root(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_update_root	root-tree.c	/^int btrfs_update_root(struct btrfs_trans_handle *trans, struct btrfs_root$/;"	f	typeref:typename:int
btrfs_update_root_times	root-tree.c	/^void btrfs_update_root_times(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void
btrfs_update_space_info_chunk_size	space-info.c	/^void btrfs_update_space_info_chunk_size(struct btrfs_space_info *space_info,$/;"	f	typeref:typename:void
btrfs_update_time	inode.c	/^static int btrfs_update_time(struct inode *inode, int flags)$/;"	f	typeref:typename:int	file:
btrfs_use_block_group_size_class	block-group.c	/^int btrfs_use_block_group_size_class(struct btrfs_block_group *bg,$/;"	f	typeref:typename:int
btrfs_use_block_rsv	block-rsv.c	/^struct btrfs_block_rsv *btrfs_use_block_rsv(struct btrfs_trans_handle *trans,$/;"	f	typeref:struct:btrfs_block_rsv *
btrfs_use_zone_append	zoned.c	/^bool btrfs_use_zone_append(struct btrfs_bio *bbio)$/;"	f	typeref:typename:bool
btrfs_use_zone_append	zoned.h	/^static inline bool btrfs_use_zone_append(struct btrfs_bio *bbio)$/;"	f	typeref:typename:bool
btrfs_user_xattr_handler	xattr.c	/^static const struct xattr_handler btrfs_user_xattr_handler = {$/;"	v	typeref:typename:const struct xattr_handler	file:
btrfs_uuid_iter_rem	uuid-tree.c	/^static int btrfs_uuid_iter_rem(struct btrfs_root *uuid_root, u8 *uuid, u8 type,$/;"	f	typeref:typename:int	file:
btrfs_uuid_rescan_kthread	disk-io.c	/^static int btrfs_uuid_rescan_kthread(void *data)$/;"	f	typeref:typename:int	file:
btrfs_uuid_scan_kthread	volumes.c	/^int btrfs_uuid_scan_kthread(void *data)$/;"	f	typeref:typename:int
btrfs_uuid_to_key	uuid-tree.c	/^static void btrfs_uuid_to_key(u8 *uuid, u8 type, struct btrfs_key *key)$/;"	f	typeref:typename:void	file:
btrfs_uuid_tree_add	uuid-tree.c	/^int btrfs_uuid_tree_add(struct btrfs_trans_handle *trans, u8 *uuid, u8 type,$/;"	f	typeref:typename:int
btrfs_uuid_tree_iterate	uuid-tree.c	/^int btrfs_uuid_tree_iterate(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_uuid_tree_lookup	uuid-tree.c	/^static int btrfs_uuid_tree_lookup(struct btrfs_root *uuid_root, u8 *uuid,$/;"	f	typeref:typename:int	file:
btrfs_uuid_tree_remove	uuid-tree.c	/^int btrfs_uuid_tree_remove(struct btrfs_trans_handle *trans, u8 *uuid, u8 type,$/;"	f	typeref:typename:int
btrfs_validate_extent_buffer	disk-io.c	/^int btrfs_validate_extent_buffer(struct extent_buffer *eb,$/;"	f	typeref:typename:int
btrfs_validate_mount_super	disk-io.c	/^static int btrfs_validate_mount_super(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int	file:
btrfs_validate_mount_super_partition	disk-io.c	/^static int btrfs_validate_mount_super_partition(struct btrfs_fs_info *fs_info, int partition_ord/;"	f	typeref:typename:int	file:
btrfs_validate_prop	props.c	/^int btrfs_validate_prop(const struct btrfs_inode *inode, const char *name,$/;"	f	typeref:typename:int
btrfs_validate_super	disk-io.c	/^int btrfs_validate_super(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_validate_super_partition	disk-io.c	/^int btrfs_validate_super_partition(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_validate_write_super	disk-io.c	/^static int btrfs_validate_write_super(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
btrfs_verify_dev_extents	volumes.c	/^int btrfs_verify_dev_extents(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_verify_level_key	tree-checker.c	/^int btrfs_verify_level_key(struct extent_buffer *eb, int level,$/;"	f	typeref:typename:int
btrfs_verify_page	extent_io.c	/^static bool btrfs_verify_page(struct page *page, u64 start)$/;"	f	typeref:typename:bool	file:
btrfs_verify_qgroup_counts	qgroup.c	/^int btrfs_verify_qgroup_counts(struct btrfs_fs_info *fs_info, u64 qgroupid,$/;"	f	typeref:typename:int
btrfs_verityops	verity.c	/^const struct fsverity_operations btrfs_verityops = {$/;"	v	typeref:typename:const struct fsverity_operations
btrfs_wait_block_group_cache_done	block-group.c	/^static int btrfs_wait_block_group_cache_done(struct btrfs_block_group *cache)$/;"	f	typeref:typename:int	file:
btrfs_wait_block_group_cache_progress	block-group.c	/^void btrfs_wait_block_group_cache_progress(struct btrfs_block_group *cache,$/;"	f	typeref:typename:void
btrfs_wait_block_group_reservations	block-group.c	/^void btrfs_wait_block_group_reservations(struct btrfs_block_group *bg)$/;"	f	typeref:typename:void
btrfs_wait_cache_io	free-space-cache.c	/^int btrfs_wait_cache_io(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_wait_delalloc_flush	transaction.c	/^static inline void btrfs_wait_delalloc_flush(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
btrfs_wait_extents	transaction.c	/^static int btrfs_wait_extents(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
btrfs_wait_for_commit	transaction.c	/^int btrfs_wait_for_commit(struct btrfs_fs_info *fs_info, u64 transid)$/;"	f	typeref:typename:int
btrfs_wait_nocow_writers	block-group.c	/^void btrfs_wait_nocow_writers(struct btrfs_block_group *bg)$/;"	f	typeref:typename:void
btrfs_wait_on_delayed_iputs	inode.c	/^int btrfs_wait_on_delayed_iputs(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_wait_ordered_extents	ordered-data.c	/^u64 btrfs_wait_ordered_extents(struct btrfs_root *root, u64 nr,$/;"	f	typeref:typename:u64
btrfs_wait_ordered_range	ordered-data.c	/^int btrfs_wait_ordered_range(struct inode *inode, u64 start, u64 len)$/;"	f	typeref:typename:int
btrfs_wait_ordered_roots	ordered-data.c	/^void btrfs_wait_ordered_roots(struct btrfs_fs_info *fs_info, u64 nr,$/;"	f	typeref:typename:void
btrfs_wait_tree_log_extents	transaction.c	/^int btrfs_wait_tree_log_extents(struct btrfs_root *log_root, int mark)$/;"	f	typeref:typename:int
btrfs_wake_unfinished_drop	fs.h	/^static inline void btrfs_wake_unfinished_drop(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_warn	messages.h	/^#define btrfs_warn(/;"	d
btrfs_warn_32bit_limit	messages.c	/^void __cold btrfs_warn_32bit_limit(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void __cold
btrfs_warn_in_rcu	messages.h	/^#define btrfs_warn_in_rcu(/;"	d
btrfs_warn_rl	messages.h	/^#define btrfs_warn_rl(/;"	d
btrfs_warn_rl_in_rcu	messages.h	/^#define btrfs_warn_rl_in_rcu(/;"	d
btrfs_work	async-thread.h	/^struct btrfs_work {$/;"	s
btrfs_work_helper	async-thread.c	/^static void btrfs_work_helper(struct work_struct *normal_work)$/;"	f	typeref:typename:void	file:
btrfs_work_owner	async-thread.c	/^struct btrfs_fs_info * __pure btrfs_work_owner(const struct btrfs_work *work)$/;"	f	typeref:struct:btrfs_fs_info * __pure
btrfs_workqueue	async-thread.c	/^struct btrfs_workqueue {$/;"	s	file:
btrfs_workqueue_normal_congested	async-thread.c	/^bool btrfs_workqueue_normal_congested(const struct btrfs_workqueue *wq)$/;"	f	typeref:typename:bool
btrfs_workqueue_owner	async-thread.c	/^struct btrfs_fs_info * __pure btrfs_workqueue_owner(const struct btrfs_workqueue *wq)$/;"	f	typeref:struct:btrfs_fs_info * __pure
btrfs_workqueue_set_max	async-thread.c	/^void btrfs_workqueue_set_max(struct btrfs_workqueue *wq, int limit_active)$/;"	f	typeref:typename:void
btrfs_wq_run_delayed_node	delayed-inode.c	/^static int btrfs_wq_run_delayed_node(struct btrfs_delayed_root *delayed_root,$/;"	f	typeref:typename:int	file:
btrfs_wq_submit_bio	bio.c	/^static bool btrfs_wq_submit_bio(struct btrfs_bio *bbio,$/;"	f	typeref:typename:bool	file:
btrfs_write_and_wait_transaction	transaction.c	/^static int btrfs_write_and_wait_transaction(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:int	file:
btrfs_write_check	file.c	/^static int btrfs_write_check(struct kiocb *iocb, struct iov_iter *from,$/;"	f	typeref:typename:int	file:
btrfs_write_dirty_block_groups	block-group.c	/^int btrfs_write_dirty_block_groups(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:int
btrfs_write_marked_extents	transaction.c	/^int btrfs_write_marked_extents(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_write_merkle_tree_block	verity.c	/^static int btrfs_write_merkle_tree_block(struct inode *inode, const void *buf,$/;"	f	typeref:typename:int	file:
btrfs_write_out_cache	free-space-cache.c	/^int btrfs_write_out_cache(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_writepage_cow_fixup	inode.c	/^int btrfs_writepage_cow_fixup(struct page *page)$/;"	f	typeref:typename:int
btrfs_writepage_fixup	inode.c	/^struct btrfs_writepage_fixup {$/;"	s	file:
btrfs_writepage_fixup_worker	inode.c	/^static void btrfs_writepage_fixup_worker(struct btrfs_work *work)$/;"	f	typeref:typename:void	file:
btrfs_writepages	inode.c	/^static int btrfs_writepages(struct address_space *mapping,$/;"	f	typeref:typename:int	file:
btrfs_xattr_handler_get	xattr.c	/^static int btrfs_xattr_handler_get(const struct xattr_handler *handler,$/;"	f	typeref:typename:int	file:
btrfs_xattr_handler_set	xattr.c	/^static int btrfs_xattr_handler_set(const struct xattr_handler *handler,$/;"	f	typeref:typename:int	file:
btrfs_xattr_handler_set_prop	xattr.c	/^static int btrfs_xattr_handler_set_prop(const struct xattr_handler *handler,$/;"	f	typeref:typename:int	file:
btrfs_xattr_handlers	xattr.c	/^const struct xattr_handler *btrfs_xattr_handlers[] = {$/;"	v	typeref:typename:const struct xattr_handler * []
btrfs_xattr_security_init	xattr.c	/^int btrfs_xattr_security_init(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
btrfs_zero_range	file.c	/^static int btrfs_zero_range(struct inode *inode,$/;"	f	typeref:typename:int	file:
btrfs_zero_range_check_range_boundary	file.c	/^static int btrfs_zero_range_check_range_boundary(struct btrfs_inode *inode,$/;"	f	typeref:typename:int	file:
btrfs_zlib_compress	zlib.c	/^const struct btrfs_compress_op btrfs_zlib_compress = {$/;"	v	typeref:typename:const struct btrfs_compress_op
btrfs_zone_activate	zoned.c	/^bool btrfs_zone_activate(struct btrfs_block_group *block_group)$/;"	f	typeref:typename:bool
btrfs_zone_activate	zoned.h	/^static inline bool btrfs_zone_activate(struct btrfs_block_group *block_group)$/;"	f	typeref:typename:bool
btrfs_zone_finish	zoned.c	/^int btrfs_zone_finish(struct btrfs_block_group *block_group)$/;"	f	typeref:typename:int
btrfs_zone_finish	zoned.h	/^static inline int btrfs_zone_finish(struct btrfs_block_group *block_group)$/;"	f	typeref:typename:int
btrfs_zone_finish_endio	zoned.c	/^void btrfs_zone_finish_endio(struct btrfs_fs_info *fs_info, u64 logical, u64 length)$/;"	f	typeref:typename:void
btrfs_zone_finish_endio	zoned.h	/^static inline void btrfs_zone_finish_endio(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_zone_finish_endio_workfn	zoned.c	/^static void btrfs_zone_finish_endio_workfn(struct work_struct *work)$/;"	f	typeref:typename:void	file:
btrfs_zone_finish_one_bg	zoned.c	/^int btrfs_zone_finish_one_bg(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_zone_finish_one_bg	zoned.h	/^static inline int btrfs_zone_finish_one_bg(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int
btrfs_zoned_activate_one_bg	zoned.c	/^int btrfs_zoned_activate_one_bg(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_zoned_activate_one_bg	zoned.h	/^static inline int btrfs_zoned_activate_one_bg(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfs_zoned_bg_is_full	zoned.h	/^static inline bool btrfs_zoned_bg_is_full(const struct btrfs_block_group *bg)$/;"	f	typeref:typename:bool
btrfs_zoned_data_reloc_lock	zoned.h	/^static inline void btrfs_zoned_data_reloc_lock(struct btrfs_inode *inode)$/;"	f	typeref:typename:void
btrfs_zoned_data_reloc_unlock	zoned.h	/^static inline void btrfs_zoned_data_reloc_unlock(struct btrfs_inode *inode)$/;"	f	typeref:typename:void
btrfs_zoned_device_info	zoned.h	/^struct btrfs_zoned_device_info {$/;"	s
btrfs_zoned_issue_zeroout	zoned.c	/^int btrfs_zoned_issue_zeroout(struct btrfs_device *device, u64 physical, u64 length)$/;"	f	typeref:typename:int
btrfs_zoned_issue_zeroout	zoned.h	/^static inline int btrfs_zoned_issue_zeroout(struct btrfs_device *device,$/;"	f	typeref:typename:int
btrfs_zoned_meta_io_lock	zoned.h	/^static inline void btrfs_zoned_meta_io_lock(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_zoned_meta_io_unlock	zoned.h	/^static inline void btrfs_zoned_meta_io_unlock(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void
btrfs_zoned_release_data_reloc_bg	zoned.c	/^void btrfs_zoned_release_data_reloc_bg(struct btrfs_fs_info *fs_info, u64 logical,$/;"	f	typeref:typename:void
btrfs_zoned_release_data_reloc_bg	zoned.h	/^static inline void btrfs_zoned_release_data_reloc_bg(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
btrfs_zoned_should_reclaim	zoned.c	/^bool btrfs_zoned_should_reclaim(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:bool
btrfs_zoned_should_reclaim	zoned.h	/^static inline bool btrfs_zoned_should_reclaim(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:bool
btrfs_zoned_split_ordered	zoned.c	/^static bool btrfs_zoned_split_ordered(struct btrfs_ordered_extent *ordered,$/;"	f	typeref:typename:bool	file:
btrfs_zstd_compress	zstd.c	/^const struct btrfs_compress_op btrfs_zstd_compress = {$/;"	v	typeref:typename:const struct btrfs_compress_op
btrfsic_bio_end_io	check-integrity.c	/^static void btrfsic_bio_end_io(struct bio *bp)$/;"	f	typeref:typename:void	file:
btrfsic_block	check-integrity.c	/^struct btrfsic_block {$/;"	s	file:
btrfsic_block_alloc	check-integrity.c	/^static struct btrfsic_block *btrfsic_block_alloc(void)$/;"	f	typeref:struct:btrfsic_block *	file:
btrfsic_block_data_ctx	check-integrity.c	/^struct btrfsic_block_data_ctx {$/;"	s	file:
btrfsic_block_free	check-integrity.c	/^static void btrfsic_block_free(struct btrfsic_block *b)$/;"	f	typeref:typename:void	file:
btrfsic_block_hashtable	check-integrity.c	/^struct btrfsic_block_hashtable {$/;"	s	file:
btrfsic_block_hashtable_add	check-integrity.c	/^static void btrfsic_block_hashtable_add(struct btrfsic_block *b,$/;"	f	typeref:typename:void	file:
btrfsic_block_hashtable_init	check-integrity.c	/^static void btrfsic_block_hashtable_init(struct btrfsic_block_hashtable *h)$/;"	f	typeref:typename:void	file:
btrfsic_block_hashtable_lookup	check-integrity.c	/^static struct btrfsic_block *btrfsic_block_hashtable_lookup($/;"	f	typeref:struct:btrfsic_block *	file:
btrfsic_block_hashtable_remove	check-integrity.c	/^static void btrfsic_block_hashtable_remove(struct btrfsic_block *b)$/;"	f	typeref:typename:void	file:
btrfsic_block_init	check-integrity.c	/^static void btrfsic_block_init(struct btrfsic_block *b)$/;"	f	typeref:typename:void	file:
btrfsic_block_link	check-integrity.c	/^struct btrfsic_block_link {$/;"	s	file:
btrfsic_block_link_alloc	check-integrity.c	/^static struct btrfsic_block_link *btrfsic_block_link_alloc(void)$/;"	f	typeref:struct:btrfsic_block_link *	file:
btrfsic_block_link_free	check-integrity.c	/^static void btrfsic_block_link_free(struct btrfsic_block_link *l)$/;"	f	typeref:typename:void	file:
btrfsic_block_link_hashtable	check-integrity.c	/^struct btrfsic_block_link_hashtable {$/;"	s	file:
btrfsic_block_link_hashtable_add	check-integrity.c	/^static void btrfsic_block_link_hashtable_add($/;"	f	typeref:typename:void	file:
btrfsic_block_link_hashtable_init	check-integrity.c	/^static void btrfsic_block_link_hashtable_init($/;"	f	typeref:typename:void	file:
btrfsic_block_link_hashtable_lookup	check-integrity.c	/^static struct btrfsic_block_link *btrfsic_block_link_hashtable_lookup($/;"	f	typeref:struct:btrfsic_block_link *	file:
btrfsic_block_link_hashtable_remove	check-integrity.c	/^static void btrfsic_block_link_hashtable_remove(struct btrfsic_block_link *l)$/;"	f	typeref:typename:void	file:
btrfsic_block_link_init	check-integrity.c	/^static void btrfsic_block_link_init(struct btrfsic_block_link *l)$/;"	f	typeref:typename:void	file:
btrfsic_block_link_lookup_or_add	check-integrity.c	/^static struct btrfsic_block_link *btrfsic_block_link_lookup_or_add($/;"	f	typeref:struct:btrfsic_block_link *	file:
btrfsic_block_lookup_or_add	check-integrity.c	/^static struct btrfsic_block *btrfsic_block_lookup_or_add($/;"	f	typeref:struct:btrfsic_block *	file:
btrfsic_check_all_ref_blocks	check-integrity.c	/^static int btrfsic_check_all_ref_blocks(struct btrfsic_state *state,$/;"	f	typeref:typename:int	file:
btrfsic_check_bio	check-integrity.c	/^void btrfsic_check_bio(struct bio *bio)$/;"	f	typeref:typename:void
btrfsic_check_bio	check-integrity.h	/^static inline void btrfsic_check_bio(struct bio *bio) { }$/;"	f	typeref:typename:void
btrfsic_check_flush_bio	check-integrity.c	/^static void btrfsic_check_flush_bio(struct bio *bio, struct btrfsic_dev_state *dev_state)$/;"	f	typeref:typename:void	file:
btrfsic_check_write_bio	check-integrity.c	/^static void btrfsic_check_write_bio(struct bio *bio, struct btrfsic_dev_state *dev_state)$/;"	f	typeref:typename:void	file:
btrfsic_cmp_log_and_dev_bytenr	check-integrity.c	/^static void btrfsic_cmp_log_and_dev_bytenr(struct btrfsic_state *state,$/;"	f	typeref:typename:void	file:
btrfsic_create_link_to_next_block	check-integrity.c	/^static int btrfsic_create_link_to_next_block($/;"	f	typeref:typename:int	file:
btrfsic_dev_state	check-integrity.c	/^struct btrfsic_dev_state {$/;"	s	file:
btrfsic_dev_state_alloc	check-integrity.c	/^static struct btrfsic_dev_state *btrfsic_dev_state_alloc(void)$/;"	f	typeref:struct:btrfsic_dev_state *	file:
btrfsic_dev_state_free	check-integrity.c	/^static void btrfsic_dev_state_free(struct btrfsic_dev_state *ds)$/;"	f	typeref:typename:void	file:
btrfsic_dev_state_hashtable	check-integrity.c	/^static struct btrfsic_dev_state_hashtable btrfsic_dev_state_hashtable;$/;"	v	typeref:struct:btrfsic_dev_state_hashtable	file:
btrfsic_dev_state_hashtable	check-integrity.c	/^struct btrfsic_dev_state_hashtable {$/;"	s	file:
btrfsic_dev_state_hashtable_add	check-integrity.c	/^static void btrfsic_dev_state_hashtable_add($/;"	f	typeref:typename:void	file:
btrfsic_dev_state_hashtable_init	check-integrity.c	/^static void btrfsic_dev_state_hashtable_init($/;"	f	typeref:typename:void	file:
btrfsic_dev_state_hashtable_lookup	check-integrity.c	/^static struct btrfsic_dev_state *btrfsic_dev_state_hashtable_lookup(dev_t dev,$/;"	f	typeref:struct:btrfsic_dev_state *	file:
btrfsic_dev_state_hashtable_remove	check-integrity.c	/^static void btrfsic_dev_state_hashtable_remove(struct btrfsic_dev_state *ds)$/;"	f	typeref:typename:void	file:
btrfsic_dev_state_init	check-integrity.c	/^static void btrfsic_dev_state_init(struct btrfsic_dev_state *ds)$/;"	f	typeref:typename:void	file:
btrfsic_dev_state_lookup	check-integrity.c	/^static struct btrfsic_dev_state *btrfsic_dev_state_lookup(dev_t dev)$/;"	f	typeref:struct:btrfsic_dev_state *	file:
btrfsic_dump_database	check-integrity.c	/^static void btrfsic_dump_database(struct btrfsic_state *state)$/;"	f	typeref:typename:void	file:
btrfsic_dump_tree	check-integrity.c	/^static void btrfsic_dump_tree(const struct btrfsic_state *state)$/;"	f	typeref:typename:void	file:
btrfsic_dump_tree_sub	check-integrity.c	/^static void btrfsic_dump_tree_sub(const struct btrfsic_state *state,$/;"	f	typeref:typename:void	file:
btrfsic_get_block_type	check-integrity.c	/^static char btrfsic_get_block_type(const struct btrfsic_state *state,$/;"	f	typeref:typename:char	file:
btrfsic_handle_extent_data	check-integrity.c	/^static int btrfsic_handle_extent_data($/;"	f	typeref:typename:int	file:
btrfsic_is_block_ref_by_superblock	check-integrity.c	/^static int btrfsic_is_block_ref_by_superblock($/;"	f	typeref:typename:int	file:
btrfsic_is_initialized	check-integrity.c	/^static int btrfsic_is_initialized;$/;"	v	typeref:typename:int	file:
btrfsic_map_block	check-integrity.c	/^static int btrfsic_map_block(struct btrfsic_state *state, u64 bytenr, u32 len,$/;"	f	typeref:typename:int	file:
btrfsic_mount	check-integrity.c	/^int btrfsic_mount(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
btrfsic_mutex	check-integrity.c	/^static struct mutex btrfsic_mutex;$/;"	v	typeref:struct:mutex	file:
btrfsic_print_add_link	check-integrity.c	/^static void btrfsic_print_add_link(const struct btrfsic_state *state,$/;"	f	typeref:typename:void	file:
btrfsic_print_rem_link	check-integrity.c	/^static void btrfsic_print_rem_link(const struct btrfsic_state *state,$/;"	f	typeref:typename:void	file:
btrfsic_process_metablock	check-integrity.c	/^static noinline_for_stack int btrfsic_process_metablock($/;"	f	typeref:typename:noinline_for_stack int	file:
btrfsic_process_superblock	check-integrity.c	/^static int btrfsic_process_superblock(struct btrfsic_state *state,$/;"	f	typeref:typename:int	file:
btrfsic_process_superblock_dev_mirror	check-integrity.c	/^static int btrfsic_process_superblock_dev_mirror($/;"	f	typeref:typename:int	file:
btrfsic_process_written_block	check-integrity.c	/^static void btrfsic_process_written_block(struct btrfsic_dev_state *dev_state,$/;"	f	typeref:typename:void	file:
btrfsic_process_written_superblock	check-integrity.c	/^static int btrfsic_process_written_superblock($/;"	f	typeref:typename:int	file:
btrfsic_read_block	check-integrity.c	/^static int btrfsic_read_block(struct btrfsic_state *state,$/;"	f	typeref:typename:int	file:
btrfsic_read_from_block_data	check-integrity.c	/^static void btrfsic_read_from_block_data($/;"	f	typeref:typename:void	file:
btrfsic_release_block_ctx	check-integrity.c	/^static void btrfsic_release_block_ctx(struct btrfsic_block_data_ctx *block_ctx)$/;"	f	typeref:typename:void	file:
btrfsic_stack_frame	check-integrity.c	/^struct btrfsic_stack_frame {$/;"	s	file:
btrfsic_stack_frame_alloc	check-integrity.c	/^static struct btrfsic_stack_frame *btrfsic_stack_frame_alloc(void)$/;"	f	typeref:struct:btrfsic_stack_frame *	file:
btrfsic_stack_frame_free	check-integrity.c	/^static void btrfsic_stack_frame_free(struct btrfsic_stack_frame *sf)$/;"	f	typeref:typename:void	file:
btrfsic_state	check-integrity.c	/^struct btrfsic_state {$/;"	s	file:
btrfsic_test_for_metadata	check-integrity.c	/^static noinline_for_stack int btrfsic_test_for_metadata($/;"	f	typeref:typename:noinline_for_stack int	file:
btrfsic_unmount	check-integrity.c	/^void btrfsic_unmount(struct btrfs_fs_devices *fs_devices)$/;"	f	typeref:typename:void
bucket	compression.c	/^	struct bucket_item *bucket;$/;"	m	struct:heuristic_ws	typeref:struct:bucket_item *	file:
bucket_b	compression.c	/^	struct bucket_item *bucket_b;$/;"	m	struct:heuristic_ws	typeref:struct:bucket_item *	file:
bucket_item	compression.c	/^struct bucket_item {$/;"	s	file:
buf	lzo.c	/^	void *buf;	\/* where decompressed data goes *\/$/;"	m	struct:workspace	typeref:typename:void *	file:
buf	send.c	/^			char *buf;$/;"	m	struct:fs_path::__anon1b81f160010a::__anon1b81f1600208	typeref:typename:char *	file:
buf	zlib.c	/^	char *buf;$/;"	m	struct:workspace	typeref:typename:char *	file:
buf	zstd.c	/^	char *buf;$/;"	m	struct:workspace	typeref:typename:char *	file:
buf_len	send.c	/^			unsigned short buf_len:15;$/;"	m	struct:fs_path::__anon1b81f160010a::__anon1b81f1600208	typeref:typename:unsigned short:15	file:
buf_size	zlib.c	/^	unsigned int buf_size;$/;"	m	struct:workspace	typeref:typename:unsigned int	file:
buffer_lock	fs.h	/^	spinlock_t buffer_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:spinlock_t
buffer_radix	fs.h	/^	struct radix_tree_root buffer_radix;$/;"	m	struct:btrfs_fs_info	typeref:struct:radix_tree_root
build_backref_tree	relocation.c	/^static noinline_for_stack struct btrfs_backref_node *build_backref_tree($/;"	f	typeref:typename:noinline_for_stack struct btrfs_backref_node *	file:
build_ino_list	backref.c	/^static int build_ino_list(u64 inum, u64 offset, u64 num_bytes, u64 root, void *ctx)$/;"	f	typeref:typename:int	file:
byte_core_set_size	compression.c	/^static int byte_core_set_size(struct heuristic_ws *ws)$/;"	f	typeref:typename:int	file:
byte_set_size	compression.c	/^static u32 byte_set_size(const struct heuristic_ws *ws)$/;"	f	typeref:typename:u32	file:
bytenr	backref.h	/^		u64 bytenr;$/;"	m	struct:btrfs_backref_node::__anond556f4290208	typeref:typename:u64
bytenr	backref.h	/^		u64 bytenr;$/;"	m	struct:btrfs_backref_share_check_ctx::__anond556f4290108	typeref:typename:u64
bytenr	backref.h	/^	u64 bytenr;$/;"	m	struct:btrfs_backref_iter	typeref:typename:u64
bytenr	backref.h	/^	u64 bytenr;$/;"	m	struct:btrfs_backref_shared_cache_entry	typeref:typename:u64
bytenr	backref.h	/^	u64 bytenr;$/;"	m	struct:btrfs_backref_walk_ctx	typeref:typename:u64
bytenr	delayed-ref.h	/^	u64 bytenr;$/;"	m	struct:btrfs_delayed_ref_head	typeref:typename:u64
bytenr	delayed-ref.h	/^	u64 bytenr;$/;"	m	struct:btrfs_delayed_ref_node	typeref:typename:u64
bytenr	delayed-ref.h	/^	u64 bytenr;$/;"	m	struct:btrfs_ref	typeref:typename:u64
bytenr	misc.h	/^	u64 bytenr;$/;"	m	struct:rb_simple_node	typeref:typename:u64
bytenr	qgroup.h	/^	u64 bytenr;$/;"	m	struct:btrfs_qgroup_extent_record	typeref:typename:u64
bytenr	ref-verify.c	/^	u64 bytenr;$/;"	m	struct:block_entry	typeref:typename:u64	file:
bytenr	relocation.c	/^		u64 bytenr;$/;"	m	struct:mapping_node::__anon97879c060108	typeref:typename:u64	file:
bytenr	relocation.c	/^		u64 bytenr;$/;"	m	struct:tree_block::__anon97879c060208	typeref:typename:u64	file:
bytenr	send.c	/^	u64 bytenr;$/;"	m	struct:backref_ctx	typeref:typename:u64	file:
bytes	free-space-cache.c	/^	u64 bytes;$/;"	m	struct:btrfs_trim_range	typeref:typename:u64	file:
bytes	free-space-cache.h	/^	u64 bytes;$/;"	m	struct:btrfs_free_space	typeref:typename:u64
bytes	inode.c	/^	u32 bytes;$/;"	m	struct:btrfs_dio_private	typeref:typename:u32	file:
bytes	space-info.h	/^	u64 bytes;$/;"	m	struct:reserve_ticket	typeref:typename:u64
bytes_changed	extent_io.h	/^	u64 bytes_changed;$/;"	m	struct:extent_changeset	typeref:typename:u64
bytes_found	ctree.h	/^	u64 bytes_found;$/;"	m	struct:btrfs_drop_extents_args	typeref:typename:u64
bytes_index	free-space-cache.h	/^	struct rb_node bytes_index;$/;"	m	struct:btrfs_free_space	typeref:struct:rb_node
bytes_index_use_bitmap	tests/free-space-tests.c	/^static bool bytes_index_use_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:bool	file:
bytes_left	ordered-data.h	/^	u64 bytes_left;$/;"	m	struct:btrfs_ordered_extent	typeref:typename:u64
bytes_may_use	space-info.h	/^	u64 bytes_may_use;	\/* number of bytes that may be used for$/;"	m	struct:btrfs_space_info	typeref:typename:u64
bytes_pinned	space-info.h	/^	u64 bytes_pinned;	\/* total bytes pinned, will be freed when the$/;"	m	struct:btrfs_space_info	typeref:typename:u64
bytes_readonly	space-info.h	/^	u64 bytes_readonly;	\/* total bytes that are read only *\/$/;"	m	struct:btrfs_space_info	typeref:typename:u64
bytes_reserved	delayed-inode.h	/^	u64 bytes_reserved;$/;"	m	struct:btrfs_delayed_item	typeref:typename:u64
bytes_reserved	delayed-inode.h	/^	u64 bytes_reserved;$/;"	m	struct:btrfs_delayed_node	typeref:typename:u64
bytes_reserved	space-info.h	/^	u64 bytes_reserved;	\/* total bytes the allocator has reserved for$/;"	m	struct:btrfs_space_info	typeref:typename:u64
bytes_reserved	transaction.h	/^	u64 bytes_reserved;$/;"	m	struct:btrfs_trans_handle	typeref:typename:u64
bytes_super	block-group.h	/^	u64 bytes_super;$/;"	m	struct:btrfs_block_group	typeref:typename:u64
bytes_to_bits	free-space-cache.c	/^static inline unsigned long bytes_to_bits(u64 bytes, u32 unit)$/;"	f	typeref:typename:unsigned long	file:
bytes_to_csum_size	file-item.c	/^static size_t bytes_to_csum_size(const struct btrfs_fs_info *fs_info, u32 bytes)$/;"	f	typeref:typename:size_t	file:
bytes_used	space-info.h	/^	u64 bytes_used;		\/* total bytes used,$/;"	m	struct:btrfs_space_info	typeref:typename:u64
bytes_used	volumes.h	/^	u64 bytes_used;$/;"	m	struct:btrfs_device	typeref:typename:u64
bytes_zone_unusable	space-info.h	/^	u64 bytes_zone_unusable;	\/* total bytes that are unusable until$/;"	m	struct:btrfs_space_info	typeref:typename:u64
cache_dir_created	send.c	/^static void cache_dir_created(struct send_ctx *sctx, u64 dir)$/;"	f	typeref:typename:void	file:
cache_dir_utimes	send.c	/^static int cache_dir_utimes(struct send_ctx *sctx, u64 dir, u64 gen)$/;"	f	typeref:typename:int	file:
cache_generation	block-group.h	/^	u64 cache_generation;$/;"	m	struct:btrfs_block_group	typeref:typename:u64
cache_lock	raid56.c	/^	spinlock_t cache_lock;$/;"	m	struct:btrfs_stripe_hash_table	typeref:typename:spinlock_t	file:
cache_lookup	backref.h	/^	bool (*cache_lookup)(u64 leaf_bytenr, void *user_ctx,$/;"	m	struct:btrfs_backref_walk_ctx	typeref:typename:bool (*)(u64 leaf_bytenr,void * user_ctx,const u64 ** root_ids_ret,int * root_count_ret)
cache_node	block-group.h	/^	struct rb_node cache_node;$/;"	m	struct:btrfs_block_group	typeref:struct:rb_node
cache_rbio	raid56.c	/^static void cache_rbio(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:void	file:
cache_rbio_pages	raid56.c	/^static void cache_rbio_pages(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:void	file:
cache_save_setup	block-group.c	/^static int cache_save_setup(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int	file:
cache_size	raid56.c	/^	int cache_size;$/;"	m	struct:btrfs_stripe_hash_table	typeref:typename:int	file:
cache_state	extent-io-tree.c	/^static void cache_state(struct extent_state *state,$/;"	f	typeref:typename:void	file:
cache_state_if_flags	extent-io-tree.c	/^static void cache_state_if_flags(struct extent_state *state,$/;"	f	typeref:typename:void	file:
cache_store	backref.h	/^	void (*cache_store)(u64 leaf_bytenr, const struct ulist *root_ids,$/;"	m	struct:btrfs_backref_walk_ctx	typeref:typename:void (*)(u64 leaf_bytenr,const struct ulist * root_ids,void * user_ctx)
cache_write_mutex	transaction.h	/^	struct mutex cache_write_mutex;$/;"	m	struct:btrfs_transaction	typeref:struct:mutex
cache_writeout_mutex	free-space-cache.h	/^	struct mutex cache_writeout_mutex;$/;"	m	struct:btrfs_free_space_ctl	typeref:struct:mutex
cached	block-group.h	/^	int cached;$/;"	m	struct:btrfs_block_group	typeref:typename:int
cached	extent-tree.h	/^	int cached;$/;"	m	struct:find_free_extent_ctl	typeref:typename:int
cached	extent_io.c	/^	bool cached;$/;"	m	struct:fiemap_cache	typeref:typename:bool	file:
caching_block_groups	fs.h	/^	struct list_head caching_block_groups;$/;"	m	struct:btrfs_fs_info	typeref:struct:list_head
caching_ctl	block-group.h	/^	struct btrfs_caching_control *caching_ctl;$/;"	m	struct:btrfs_block_group	typeref:struct:btrfs_caching_control *
caching_thread	block-group.c	/^static noinline void caching_thread(struct btrfs_work *work)$/;"	f	typeref:typename:noinline void	file:
caching_workers	fs.h	/^	struct btrfs_workqueue *caching_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_workqueue *
calc_available_free_space	space-info.c	/^static u64 calc_available_free_space(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:u64	file:
calc_chunk_size	space-info.c	/^static u64 calc_chunk_size(const struct btrfs_fs_info *fs_info, u64 flags)$/;"	f	typeref:typename:u64	file:
calc_data_stripes	volumes.c	/^static u64 calc_data_stripes(u64 type, int num_stripes)$/;"	f	typeref:typename:u64	file:
calc_delayed_refs_nr	space-info.c	/^static inline u64 calc_delayed_refs_nr(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:u64	file:
calc_inode_reservations	delalloc-space.c	/^static void calc_inode_reservations(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
calc_next_mirror	scrub.c	/^static int calc_next_mirror(int mirror, int num_copies)$/;"	f	typeref:typename:int	file:
calc_reclaim_items_nr	space-info.c	/^static inline u64 calc_reclaim_items_nr(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:u64	file:
calc_sector_number	scrub.c	/^static int calc_sector_number(struct scrub_stripe *stripe, struct bio_vec *first_bvec)$/;"	f	typeref:typename:int	file:
calclock	calclock/calclock.h	/^struct calclock {$/;"	s
calcu_metadata_size	relocation.c	/^u64 calcu_metadata_size(struct reloc_control *rc,$/;"	f	typeref:typename:noinline_for_stack u64	file:
calculate_alloc_pointer	zoned.c	/^static int calculate_alloc_pointer(struct btrfs_block_group *cache,$/;"	f	typeref:typename:int	file:
calculate_emulated_zone_size	zoned.c	/^static int calculate_emulated_zone_size(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int	file:
calculate_global_root_id	block-group.c	/^static u64 calculate_global_root_id(struct btrfs_fs_info *fs_info, u64 offset)$/;"	f	typeref:typename:u64	file:
can_allocate_chunk	extent-tree.c	/^static int can_allocate_chunk(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
can_allocate_chunk_zoned	extent-tree.c	/^static int can_allocate_chunk_zoned(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
can_finish_ordered_extent	ordered-data.c	/^static bool can_finish_ordered_extent(struct btrfs_ordered_extent *ordered,$/;"	f	typeref:typename:bool	file:
can_modify_feature	sysfs.c	/^static int can_modify_feature(struct btrfs_feature_attr *fa)$/;"	f	typeref:typename:int	file:
can_nocow_extent	inode.c	/^noinline int can_nocow_extent(struct inode *inode, u64 offset, u64 *len,$/;"	f	typeref:typename:noinline int
can_nocow_file_extent	inode.c	/^static int can_nocow_file_extent(struct btrfs_path *path,$/;"	f	typeref:typename:int	file:
can_nocow_file_extent_args	inode.c	/^struct can_nocow_file_extent_args {$/;"	s	file:
can_rmdir	send.c	/^static int can_rmdir(struct send_ctx *sctx, u64 dir, u64 dir_gen)$/;"	f	typeref:typename:int	file:
can_steal	space-info.c	/^static inline bool can_steal(enum btrfs_reserve_flush_enum flush)$/;"	f	typeref:typename:bool	file:
can_ticket	space-info.c	/^static inline bool can_ticket(enum btrfs_reserve_flush_enum flush)$/;"	f	typeref:typename:bool	file:
cancel_req	scrub.c	/^	atomic_t		cancel_req;$/;"	m	struct:scrub_ctx	typeref:typename:atomic_t	file:
cb	raid56.c	/^	struct blk_plug_cb cb;$/;"	m	struct:btrfs_plug_cb	typeref:struct:blk_plug_cb	file:
cbuf	lzo.c	/^	void *cbuf;	\/* where compressed data goes *\/$/;"	m	struct:workspace	typeref:typename:void *	file:
changed	backref.h	/^	struct list_head changed;$/;"	m	struct:btrfs_backref_cache	typeref:struct:list_head
changed_cb	send.c	/^static int changed_cb(struct btrfs_path *left_path,$/;"	f	typeref:typename:int	file:
changed_extent	send.c	/^static int changed_extent(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
changed_inode	send.c	/^static int changed_inode(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
changed_ref	send.c	/^static int changed_ref(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
changed_verity	send.c	/^static int changed_verity(struct send_ctx *sctx, enum btrfs_compare_tree_result result)$/;"	f	typeref:typename:int	file:
changed_xattr	send.c	/^static int changed_xattr(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
check_32bit_meta_chunk	volumes.c	/^static int check_32bit_meta_chunk(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
check_bg_is_active	zoned.c	/^static bool check_bg_is_active(struct btrfs_eb_write_context *ctx,$/;"	f	typeref:typename:bool	file:
check_block_group_item	tree-checker.c	/^static int check_block_group_item(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
check_buffer_tree_ref	extent_io.c	/^static void check_buffer_tree_ref(struct extent_buffer *eb)$/;"	f	typeref:typename:void	file:
check_cache_empty	tests/free-space-tests.c	/^static int check_cache_empty(struct btrfs_block_group *cache)$/;"	f	typeref:typename:int	file:
check_chunk_block_group_mappings	block-group.c	/^static int check_chunk_block_group_mappings(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int	file:
check_committed_ref	extent-tree.c	/^static noinline int check_committed_ref(struct btrfs_root *root,$/;"	f	typeref:typename:noinline int	file:
check_csum_item	tree-checker.c	/^static int check_csum_item(struct extent_buffer *leaf, struct btrfs_key *key,$/;"	f	typeref:typename:int	file:
check_delayed_ref	extent-tree.c	/^static noinline int check_delayed_ref(struct btrfs_root *root,$/;"	f	typeref:typename:noinline int	file:
check_dev_item	tree-checker.c	/^static int check_dev_item(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
check_dev_super	super.c	/^static int check_dev_super(struct btrfs_device *dev)$/;"	f	typeref:typename:int	file:
check_dir_item	tree-checker.c	/^static int check_dir_item(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
check_direct_IO	file.c	/^static ssize_t check_direct_IO(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:ssize_t	file:
check_direct_read	file.c	/^static int check_direct_read(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
check_eb_alignment	extent_io.c	/^static int check_eb_alignment(struct btrfs_fs_info *fs_info, u64 start)$/;"	f	typeref:typename:int	file:
check_eb_bitmap	tests/extent-io-tests.c	/^static int check_eb_bitmap(unsigned long *bitmap, struct extent_buffer *eb)$/;"	f	typeref:typename:int	file:
check_eb_range	extent_io.c	/^static inline int check_eb_range(const struct extent_buffer *eb,$/;"	f	typeref:typename:int	file:
check_extent_data_item	tree-checker.c	/^static int check_extent_data_item(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
check_extent_data_ref	tree-checker.c	/^static int check_extent_data_ref(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
check_extent_in_eb	backref.c	/^static int check_extent_in_eb(struct btrfs_backref_walk_ctx *ctx,$/;"	f	typeref:typename:int	file:
check_extent_item	backref.h	/^	int (*check_extent_item)(u64 bytenr, const struct btrfs_extent_item *ei,$/;"	m	struct:btrfs_backref_walk_ctx	typeref:typename:int (*)(u64 bytenr,const struct btrfs_extent_item * ei,const struct extent_buffer * leaf,void * user_ctx)
check_extent_item	send.c	/^static int check_extent_item(u64 bytenr, const struct btrfs_extent_item *ei,$/;"	f	typeref:typename:int	file:
check_extent_item	tree-checker.c	/^static int check_extent_item(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
check_feature	ioctl.c	/^#define check_feature(/;"	d	file:
check_feature_bits	ioctl.c	/^static int check_feature_bits(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
check_free_space_extents	tests/free-space-tree-tests.c	/^static int check_free_space_extents(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
check_fsflags	ioctl.c	/^static int check_fsflags(unsigned int old_flags, unsigned int flags)$/;"	f	typeref:typename:int	file:
check_fsflags_compatible	ioctl.c	/^static int check_fsflags_compatible(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
check_fsid_changed	volumes.c	/^static inline bool check_fsid_changed(const struct btrfs_fs_devices *fs_devices,$/;"	f	typeref:typename:bool	file:
check_ino_in_path	send.c	/^static int check_ino_in_path(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
check_inode_item	tree-checker.c	/^static int check_inode_item(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
check_inode_key	tree-checker.c	/^static int check_inode_key(struct extent_buffer *leaf, struct btrfs_key *key,$/;"	f	typeref:typename:int	file:
check_inode_ref	tree-checker.c	/^static int check_inode_ref(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
check_integrity_print_mask	fs.h	/^	u32 check_integrity_print_mask;$/;"	m	struct:btrfs_fs_info	typeref:typename:u32
check_item_in_log	tree-log.c	/^static noinline int check_item_in_log(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
check_leaf_chunk_item	tree-checker.c	/^static int check_leaf_chunk_item(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
check_leaf_item	tree-checker.c	/^static enum btrfs_tree_block_status check_leaf_item(struct extent_buffer *leaf,$/;"	f	typeref:enum:btrfs_tree_block_status	file:
check_num_extents_and_bitmaps	tests/free-space-tests.c	/^check_num_extents_and_bitmaps(const struct btrfs_block_group *cache,$/;"	f	typeref:typename:int	file:
check_prev_ino	tree-checker.c	/^static bool check_prev_ino(struct extent_buffer *leaf,$/;"	f	typeref:typename:bool	file:
check_raid1c34_incompat_flag	volumes.c	/^static void check_raid1c34_incompat_flag(struct btrfs_fs_info *info, u64 type)$/;"	f	typeref:typename:void	file:
check_raid56_incompat_flag	volumes.c	/^static void check_raid56_incompat_flag(struct btrfs_fs_info *info, u64 type)$/;"	f	typeref:typename:void	file:
check_ref_cleanup	extent-tree.c	/^static noinline int check_ref_cleanup(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
check_ref_exists	extent-tree.c	/^static int check_ref_exists(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
check_ro_option	super.c	/^static bool check_ro_option(struct btrfs_fs_info *fs_info, unsigned long opt,$/;"	f	typeref:typename:bool	file:
check_root_item	tree-checker.c	/^static int check_root_item(struct extent_buffer *leaf, struct btrfs_key *key,$/;"	f	typeref:typename:int	file:
check_root_key	tree-checker.c	/^static int check_root_key(struct extent_buffer *leaf, struct btrfs_key *key,$/;"	f	typeref:typename:int	file:
check_setget_bounds	accessors.c	/^static bool check_setget_bounds(const struct extent_buffer *eb,$/;"	f	typeref:typename:bool	file:
check_sibling_keys	ctree.c	/^static bool check_sibling_keys(struct extent_buffer *left,$/;"	f	typeref:typename:bool	file:
check_simple_keyed_refs	tree-checker.c	/^static int check_simple_keyed_refs(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
check_system_chunk	block-group.c	/^void check_system_chunk(struct btrfs_trans_handle *trans, u64 type)$/;"	f	typeref:typename:void
check_tree_block_fsid	disk-io.c	/^static bool check_tree_block_fsid(struct extent_buffer *eb)$/;"	f	typeref:typename:bool	file:
checked	backref.h	/^	unsigned int checked:1;$/;"	m	struct:btrfs_backref_node	typeref:typename:unsigned int:1
checked_offset	subpage.h	/^	unsigned int checked_offset;$/;"	m	struct:btrfs_subpage_info	typeref:typename:unsigned int
chunk_alloc	space-info.h	/^	unsigned int chunk_alloc:1;	\/* set if we are allocating a chunk *\/$/;"	m	struct:btrfs_space_info	typeref:typename:unsigned int:1
chunk_alloc_policy	volumes.h	/^	enum btrfs_chunk_allocation_policy chunk_alloc_policy;$/;"	m	struct:btrfs_fs_devices	typeref:enum:btrfs_chunk_allocation_policy
chunk_block_rsv	fs.h	/^	struct btrfs_block_rsv chunk_block_rsv;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_block_rsv
chunk_bytes_reserved	transaction.h	/^	u64 chunk_bytes_reserved;$/;"	m	struct:btrfs_trans_handle	typeref:typename:u64
chunk_devid_filter	volumes.c	/^static int chunk_devid_filter(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
chunk_drange_filter	volumes.c	/^static int chunk_drange_filter(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
chunk_err	tree-checker.c	/^static void chunk_err(const struct extent_buffer *leaf,$/;"	f	file:
chunk_mutex	fs.h	/^	struct mutex chunk_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:mutex
chunk_profiles_filter	volumes.c	/^static int chunk_profiles_filter(u64 chunk_type,$/;"	f	typeref:typename:int	file:
chunk_root	fs.h	/^	struct btrfs_root *chunk_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_root *
chunk_size	space-info.h	/^	u64 chunk_size;$/;"	m	struct:btrfs_space_info	typeref:typename:u64
chunk_size	volumes.c	/^	u64 chunk_size;$/;"	m	struct:alloc_chunk_ctl	typeref:typename:u64	file:
chunk_soft_convert_filter	volumes.c	/^static int chunk_soft_convert_filter(u64 chunk_type,$/;"	f	typeref:typename:int	file:
chunk_stripes_range_filter	volumes.c	/^static int chunk_stripes_range_filter(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
chunk_tree_uuid	fs.h	/^	u8 chunk_tree_uuid[BTRFS_UUID_SIZE];$/;"	m	struct:btrfs_fs_info	typeref:typename:u8[]
chunk_usage_filter	volumes.c	/^static int chunk_usage_filter(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
chunk_usage_range_filter	volumes.c	/^static int chunk_usage_range_filter(struct btrfs_fs_info *fs_info, u64 chunk_offset,$/;"	f	typeref:typename:int	file:
chunk_vrange_filter	volumes.c	/^static int chunk_vrange_filter(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
chunks	inode.c	/^	struct async_chunk chunks[];$/;"	m	struct:async_cow	typeref:struct:async_chunk[]	file:
clamp	space-info.h	/^	int clamp;		\/* Used to scale our threshold for preemptive$/;"	m	struct:btrfs_space_info	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
clean_dirty_subvols	relocation.c	/^static int clean_dirty_subvols(struct reloc_control *rc)$/;"	f	typeref:typename:int	file:
clean_log_buffer	tree-log.c	/^static int clean_log_buffer(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
clean_page_cache	send.c	/^	bool clean_page_cache;$/;"	m	struct:send_ctx	typeref:typename:bool	file:
clean_pinned_extents	block-group.c	/^static bool clean_pinned_extents(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:bool	file:
cleaner_kthread	disk-io.c	/^static int cleaner_kthread(void *arg)$/;"	f	typeref:typename:int	file:
cleaner_kthread	fs.h	/^	struct task_struct *cleaner_kthread;$/;"	m	struct:btrfs_fs_info	typeref:struct:task_struct *
cleaner_mutex	fs.h	/^	struct mutex cleaner_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:mutex
cleanup_bitmap_list	free-space-cache.c	/^cleanup_bitmap_list(struct list_head *bitmap_list)$/;"	f	typeref:typename:void noinline_for_stack	file:
cleanup_extent_op	extent-tree.c	/^static struct btrfs_delayed_extent_op *cleanup_extent_op($/;"	f	typeref:struct:btrfs_delayed_extent_op *	file:
cleanup_free_space_cache_v1	free-space-cache.c	/^static int cleanup_free_space_cache_v1(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
cleanup_ref_head	extent-tree.c	/^static int cleanup_ref_head(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
cleanup_transaction	transaction.c	/^static void cleanup_transaction(struct btrfs_trans_handle *trans, int err)$/;"	f	typeref:typename:void	file:
cleanup_work_sem	fs.h	/^	struct rw_semaphore cleanup_work_sem;$/;"	m	struct:btrfs_fs_info	typeref:struct:rw_semaphore
cleanup_write_cache_enospc	free-space-cache.c	/^cleanup_write_cache_enospc(struct inode *inode,$/;"	f	typeref:typename:void noinline_for_stack	file:
clear_avail_alloc_bits	block-group.c	/^static void clear_avail_alloc_bits(struct btrfs_fs_info *fs_info, u64 flags)$/;"	f	typeref:typename:void	file:
clear_em_logging	extent_map.c	/^void clear_em_logging(struct extent_map_tree *tree, struct extent_map *em)$/;"	f	typeref:typename:void
clear_extent_bit	extent-io-tree.h	/^static inline int clear_extent_bit(struct extent_io_tree *tree, u64 start,$/;"	f	typeref:typename:int
clear_extent_bits	extent-io-tree.h	/^static inline int clear_extent_bits(struct extent_io_tree *tree, u64 start,$/;"	f	typeref:typename:int
clear_extent_buffer_uptodate	extent_io.c	/^void clear_extent_buffer_uptodate(struct extent_buffer *eb)$/;"	f	typeref:typename:void
clear_extent_dirty	extent-io-tree.h	/^static inline int clear_extent_dirty(struct extent_io_tree *tree, u64 start,$/;"	f	typeref:typename:int
clear_extent_range	inode-item.h	/^	bool clear_extent_range;$/;"	m	struct:btrfs_truncate_control	typeref:typename:bool
clear_extent_uptodate	extent-io-tree.h	/^static inline int clear_extent_uptodate(struct extent_io_tree *tree, u64 start,$/;"	f	typeref:typename:int
clear_free_space_tree	free-space-tree.c	/^static int clear_free_space_tree(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
clear_incompat_bg_bits	block-group.c	/^static void clear_incompat_bg_bits(struct btrfs_fs_info *fs_info, u64 flags)$/;"	f	typeref:typename:void	file:
clear_page_extent_mapped	extent_io.c	/^void clear_page_extent_mapped(struct page *page)$/;"	f	typeref:typename:void
clear_record_extent_bits	extent-io-tree.c	/^int clear_record_extent_bits(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f	typeref:typename:int
clear_state_bit	extent-io-tree.c	/^static struct extent_state *clear_state_bit(struct extent_io_tree *tree,$/;"	f	typeref:struct:extent_state *	file:
clear_subpage_extent_buffer_dirty	extent_io.c	/^static void clear_subpage_extent_buffer_dirty(const struct extent_buffer *eb)$/;"	f	typeref:typename:void	file:
clone_backref_node	relocation.c	/^static int clone_backref_node(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
clone_copy_inline_extent	reflink.c	/^static int clone_copy_inline_extent(struct inode *dst,$/;"	f	typeref:typename:int	file:
clone_finish_inode_update	reflink.c	/^static int clone_finish_inode_update(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
clone_fs_devices	volumes.c	/^static struct btrfs_fs_devices *clone_fs_devices(struct btrfs_fs_devices *orig)$/;"	f	typeref:struct:btrfs_fs_devices *	file:
clone_range	send.c	/^static int clone_range(struct send_ctx *sctx, struct btrfs_path *dst_path,$/;"	f	typeref:typename:int	file:
clone_root	send.c	/^struct clone_root {$/;"	s	file:
clone_roots	send.c	/^	struct clone_root *clone_roots;$/;"	m	struct:send_ctx	typeref:struct:clone_root *	file:
clone_roots_cnt	send.c	/^	int clone_roots_cnt;$/;"	m	struct:send_ctx	typeref:typename:int	file:
clone_sources	ioctl.c	/^	compat_uptr_t clone_sources;	\/* in *\/$/;"	m	struct:btrfs_ioctl_send_args_32	typeref:typename:compat_uptr_t	file:
clone_sources_count	ioctl.c	/^	__u64 clone_sources_count;	\/* in *\/$/;"	m	struct:btrfs_ioctl_send_args_32	typeref:typename:__u64	file:
close_blocks	ctree.c	/^static int close_blocks(u64 blocknr, u64 other, u32 blocksize)$/;"	f	typeref:typename:int	file:
close_ctree	disk-io.c	/^void __cold close_ctree(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void __cold
close_current_inode	send.c	/^static void close_current_inode(struct send_ctx *sctx)$/;"	f	typeref:typename:void	file:
close_fs_devices	volumes.c	/^static void close_fs_devices(struct btrfs_fs_devices *fs_devices)$/;"	f	typeref:typename:void	file:
cluster	relocation.c	/^	struct file_extent_cluster cluster;$/;"	m	struct:reloc_control	typeref:struct:file_extent_cluster	file:
cluster_list	block-group.h	/^	struct list_head cluster_list;$/;"	m	struct:btrfs_block_group	typeref:struct:list_head
cmd	send.h	/^	__le16 cmd;$/;"	m	struct:btrfs_cmd_header	typeref:typename:__le16
cmp_key	send.c	/^	struct btrfs_key *cmp_key;$/;"	m	struct:send_ctx	typeref:struct:btrfs_key *	file:
collision_resolving_node	check-integrity.c	/^	struct list_head collision_resolving_node;	\/* list node *\/$/;"	m	struct:btrfsic_block	typeref:struct:list_head	file:
collision_resolving_node	check-integrity.c	/^	struct list_head collision_resolving_node;	\/* list node *\/$/;"	m	struct:btrfsic_block_link	typeref:struct:list_head	file:
collision_resolving_node	check-integrity.c	/^	struct list_head collision_resolving_node;	\/* list node *\/$/;"	m	struct:btrfsic_dev_state	typeref:struct:list_head	file:
commit_bytes_used	volumes.h	/^	u64 commit_bytes_used;$/;"	m	struct:btrfs_device	typeref:typename:u64
commit_count	fs.h	/^	u64 commit_count;$/;"	m	struct:btrfs_commit_stats	typeref:typename:u64
commit_cowonly_roots	transaction.c	/^static noinline int commit_cowonly_roots(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:noinline int	file:
commit_fs_roots	transaction.c	/^static noinline int commit_fs_roots(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:noinline int	file:
commit_interval	fs.h	/^	u32 commit_interval;$/;"	m	struct:btrfs_fs_info	typeref:typename:u32
commit_root	ctree.h	/^	struct extent_buffer *commit_root;$/;"	m	struct:btrfs_root	typeref:struct:extent_buffer *
commit_root_sem	fs.h	/^	struct rw_semaphore commit_root_sem;$/;"	m	struct:btrfs_fs_info	typeref:struct:rw_semaphore
commit_stats	fs.h	/^	struct btrfs_commit_stats commit_stats;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_commit_stats
commit_total_bytes	volumes.h	/^	u64 commit_total_bytes;$/;"	m	struct:btrfs_device	typeref:typename:u64
commit_used	block-group.h	/^	u64 commit_used;$/;"	m	struct:btrfs_block_group	typeref:typename:u64
commit_wait	transaction.h	/^	wait_queue_head_t commit_wait;$/;"	m	struct:btrfs_transaction	typeref:typename:wait_queue_head_t
committed_cursor_left	fs.h	/^	u64 committed_cursor_left;$/;"	m	struct:btrfs_dev_replace	typeref:typename:u64
comp_data_refs	delayed-ref.c	/^static int comp_data_refs(struct btrfs_delayed_data_ref *ref1,$/;"	f	typeref:typename:int	file:
comp_keys	ctree.c	/^static int comp_keys(const struct btrfs_disk_key *disk,$/;"	f	typeref:typename:int	file:
comp_keys	ctree.c	/^static int comp_keys(const struct btrfs_disk_key *disk_key,$/;"	f	typeref:typename:int	file:
comp_refs	delayed-ref.c	/^static int comp_refs(struct btrfs_delayed_ref_node *ref1,$/;"	f	typeref:typename:int	file:
comp_refs	ref-verify.c	/^static int comp_refs(struct ref_entry *ref1, struct ref_entry *ref2)$/;"	f	typeref:typename:int	file:
comp_tree_refs	delayed-ref.c	/^static int comp_tree_refs(struct btrfs_delayed_tree_ref *ref1,$/;"	f	typeref:typename:int	file:
compare_extent_item_range	scrub.c	/^static int compare_extent_item_range(struct btrfs_path *path,$/;"	f	typeref:typename:int	file:
compare_refs	send.c	/^static int compare_refs(struct send_ctx *sctx, struct btrfs_path *path,$/;"	f	typeref:typename:int	file:
completion	inode.c	/^	struct completion completion;$/;"	m	struct:btrfs_delalloc_work	typeref:struct:completion	file:
completion	ordered-data.h	/^	struct completion completion;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:completion
compress_file_range	inode.c	/^static void compress_file_range(struct btrfs_work *work)$/;"	f	typeref:typename:void	file:
compress_level	fs.h	/^	unsigned int compress_level;$/;"	m	struct:btrfs_fs_info	typeref:typename:unsigned int
compress_type	compression.h	/^	u8 compress_type;$/;"	m	struct:compressed_bio	typeref:typename:u8
compress_type	extent_io.c	/^	enum btrfs_compression_type compress_type;$/;"	m	struct:btrfs_bio_ctrl	typeref:enum:btrfs_compression_type	file:
compress_type	extent_map.h	/^	unsigned int compress_type;$/;"	m	struct:extent_map	typeref:typename:unsigned int
compress_type	fs.h	/^	unsigned long compress_type:4;$/;"	m	struct:btrfs_fs_info	typeref:typename:unsigned long:4
compress_type	inode.c	/^	int compress_type;$/;"	m	struct:async_extent	typeref:typename:int	file:
compress_type	ordered-data.h	/^	int compress_type;$/;"	m	struct:btrfs_ordered_extent	typeref:typename:int
compressed_bio	compression.h	/^struct compressed_bio {$/;"	s
compressed_len	compression.h	/^	unsigned int compressed_len;$/;"	m	struct:compressed_bio	typeref:typename:unsigned int
compressed_only	tests/inode-tests.c	/^static unsigned long compressed_only = 0;$/;"	v	typeref:typename:unsigned long	file:
compressed_pages	compression.h	/^	struct page **compressed_pages;$/;"	m	struct:compressed_bio	typeref:struct:page **
compressed_size	inode.c	/^	u64 compressed_size;$/;"	m	struct:async_extent	typeref:typename:u64	file:
compressed_write_workers	fs.h	/^	struct workqueue_struct *compressed_write_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:workqueue_struct *
compression	ioctl.c	/^	__u32 compression;$/;"	m	struct:btrfs_ioctl_encoded_io_args_32	typeref:typename:__u32	file:
compression_compress_pages	compression.c	/^static int compression_compress_pages(int type, struct list_head *ws,$/;"	f	typeref:typename:int	file:
compression_decompress	compression.c	/^static int compression_decompress(int type, struct list_head *ws,$/;"	f	typeref:typename:int	file:
compression_decompress_bio	compression.c	/^static int compression_decompress_bio(struct list_head *ws,$/;"	f	typeref:typename:int	file:
cond_wake_up	misc.h	/^static inline void cond_wake_up(struct wait_queue_head *wq)$/;"	f	typeref:typename:void
cond_wake_up_nomb	misc.h	/^static inline void cond_wake_up_nomb(struct wait_queue_head *wq)$/;"	f	typeref:typename:void
condflags	Makefile	/^condflags := \\$/;"	m
conflict_inodes	tree-log.h	/^	struct list_head conflict_inodes;$/;"	m	struct:btrfs_log_ctx	typeref:struct:list_head
conflicting_inode_is_dir	tree-log.c	/^static int conflicting_inode_is_dir(struct btrfs_root *root, u64 ino,$/;"	f	typeref:typename:int	file:
const_ffs	volumes.h	/^#define const_ffs(/;"	d
cont_reading_from_srcdev_mode	fs.h	/^	u64 cont_reading_from_srcdev_mode;$/;"	m	struct:btrfs_dev_replace	typeref:typename:u64
contains_pending_extent	volumes.c	/^static bool contains_pending_extent(struct btrfs_device *device, u64 *start,$/;"	f	typeref:typename:bool	file:
contiguous_readpages	extent_io.c	/^static inline void contiguous_readpages(struct page *pages[], int nr_pages,$/;"	f	typeref:typename:void	file:
convert_extent_bit	extent-io-tree.c	/^int convert_extent_bit(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f	typeref:typename:int
convert_free_space_to_bitmaps	free-space-tree.c	/^int convert_free_space_to_bitmaps(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:EXPORT_FOR_TESTS int
convert_free_space_to_extents	free-space-tree.c	/^int convert_free_space_to_extents(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:EXPORT_FOR_TESTS int
copy_compressed_data_to_page	lzo.c	/^static int copy_compressed_data_to_page(char *compressed_data,$/;"	f	typeref:typename:int	file:
copy_compressed_segment	lzo.c	/^static void copy_compressed_segment(struct compressed_bio *cb,$/;"	f	typeref:typename:void	file:
copy_extent_buffer	extent_io.c	/^void copy_extent_buffer(const struct extent_buffer *dst,$/;"	f	typeref:typename:void
copy_extent_buffer_full	extent_io.c	/^void copy_extent_buffer_full(const struct extent_buffer *dst,$/;"	f	typeref:typename:void
copy_for_split	ctree.c	/^static noinline int copy_for_split(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
copy_free_space_cache	free-space-cache.c	/^static int copy_free_space_cache(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int	file:
copy_inline_to_page	reflink.c	/^static int copy_inline_to_page(struct btrfs_inode *inode,$/;"	f	typeref:typename:int	file:
copy_inode_items_to_log	tree-log.c	/^static int copy_inode_items_to_log(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
copy_items	tree-log.c	/^static noinline int copy_items(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
copy_leaf_data	ctree.c	/^static inline void copy_leaf_data(const struct extent_buffer *dst,$/;"	f	typeref:typename:void	file:
copy_leaf_items	ctree.c	/^static inline void copy_leaf_items(const struct extent_buffer *dst,$/;"	f	typeref:typename:void	file:
copy_to_sk	ioctl.c	/^static noinline int copy_to_sk(struct btrfs_path *path,$/;"	f	typeref:typename:noinline int	file:
copy_zone_info_cb	zoned.c	/^static int copy_zone_info_cb(struct blk_zone *zone, unsigned int idx, void *data)$/;"	f	typeref:typename:int	file:
could_end_wait	delayed-inode.c	/^static int could_end_wait(struct btrfs_delayed_root *delayed_root, int seq)$/;"	f	typeref:typename:int	file:
count	async-thread.c	/^	unsigned int count;$/;"	m	struct:btrfs_workqueue	typeref:typename:unsigned int	file:
count	backref.c	/^	unsigned int count;$/;"	m	struct:preftree	typeref:typename:unsigned int	file:
count	backref.h	/^	int count;$/;"	m	struct:prelim_ref	typeref:typename:int
count	block-group.h	/^	refcount_t count;$/;"	m	struct:btrfs_caching_control	typeref:typename:refcount_t
count	calclock/calclock.h	/^	unsigned long long count;$/;"	m	struct:calclock	typeref:typename:unsigned long long
count	compression.c	/^	u32 count;$/;"	m	struct:bucket_item	typeref:typename:u32	file:
count	delayed-inode.h	/^	int count;$/;"	m	struct:btrfs_delayed_node	typeref:typename:int
count_inode_extrefs	tree-log.c	/^static int count_inode_extrefs(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
count_inode_refs	tree-log.c	/^static int count_inode_refs(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
count_max_extents	fs.h	/^static inline u32 count_max_extents(struct btrfs_fs_info *fs_info, u64 size)$/;"	f	typeref:typename:u32
count_range_bits	extent-io-tree.c	/^u64 count_range_bits(struct extent_io_tree *tree,$/;"	f	typeref:typename:u64
cow_file_range	inode.c	/^static noinline int cow_file_range(struct btrfs_inode *inode,$/;"	f	typeref:typename:noinline int	file:
cow_file_range_inline	inode.c	/^static noinline int cow_file_range_inline(struct btrfs_inode *inode, u64 size,$/;"	f	typeref:typename:noinline int	file:
cowonly	backref.h	/^	unsigned int cowonly:1;$/;"	m	struct:btrfs_backref_node	typeref:typename:unsigned int:1
cpu_to_le8	accessors.h	/^#define cpu_to_le8(/;"	d
crc	send.h	/^	__le32 crc;$/;"	m	struct:btrfs_cmd_header	typeref:typename:__le32
create_chunk	volumes.c	/^static struct btrfs_block_group *create_chunk(struct btrfs_trans_handle *trans,$/;"	f	typeref:struct:btrfs_block_group *	file:
create_free_space_inode	free-space-cache.c	/^int create_free_space_inode(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
create_io_em	inode.c	/^static struct extent_map *create_io_em(struct btrfs_inode *inode, u64 start,$/;"	f	typeref:struct:extent_map *	file:
create_pending_snapshot	transaction.c	/^static noinline int create_pending_snapshot(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
create_pending_snapshots	transaction.c	/^static noinline int create_pending_snapshots(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:noinline int	file:
create_reloc_inode	relocation.c	/^struct inode *create_reloc_inode(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:noinline_for_stack struct inode *	file:
create_reloc_root	relocation.c	/^static struct btrfs_root *create_reloc_root(struct btrfs_trans_handle *trans,$/;"	f	typeref:struct:btrfs_root *	file:
create_reloc_tree	relocation.c	/^	unsigned int create_reloc_tree:1;$/;"	m	struct:reloc_control	typeref:typename:unsigned int:1	file:
create_snapshot	ioctl.c	/^static int create_snapshot(struct btrfs_root *root, struct inode *dir,$/;"	f	typeref:typename:int	file:
create_space_info	space-info.c	/^static int create_space_info(struct btrfs_fs_info *info, u64 flags)$/;"	f	typeref:typename:int	file:
create_subvol	ioctl.c	/^static noinline int create_subvol(struct mnt_idmap *idmap,$/;"	f	typeref:typename:noinline int	file:
create_subvol_num_items	ioctl.c	/^static unsigned int create_subvol_num_items(struct btrfs_qgroup_inherit *inherit)$/;"	f	typeref:typename:unsigned int	file:
csum	bio.h	/^			u8 *csum;$/;"	m	struct:btrfs_bio::__anon0f27d3d5010a::__anon0f27d3d50208	typeref:typename:u8 *
csum	scrub.c	/^		u8 *csum;$/;"	m	union:scrub_sector_verification::__anon87685755010a	typeref:typename:u8 *	file:
csum_bitmap	raid56.h	/^	unsigned long *csum_bitmap;$/;"	m	struct:btrfs_raid_bio	typeref:typename:unsigned long *
csum_buf	raid56.h	/^	u8 *csum_buf;$/;"	m	struct:btrfs_raid_bio	typeref:typename:u8 *
csum_bytes	btrfs_inode.h	/^	u64 csum_bytes;$/;"	m	struct:btrfs_inode	typeref:typename:u64
csum_error_bitmap	scrub.c	/^	unsigned long csum_error_bitmap;$/;"	m	struct:scrub_stripe	typeref:typename:unsigned long	file:
csum_exist_in_range	inode.c	/^static noinline int csum_exist_in_range(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:noinline int	file:
csum_inline	bio.h	/^			u8 csum_inline[BTRFS_BIO_INLINE_CSUM_SIZE];$/;"	m	struct:btrfs_bio::__anon0f27d3d5010a::__anon0f27d3d50208	typeref:typename:u8[]
csum_path	scrub.c	/^	struct btrfs_path	csum_path;$/;"	m	struct:scrub_ctx	typeref:struct:btrfs_path	file:
csum_shash	fs.h	/^	struct crypto_shash *csum_shash;$/;"	m	struct:btrfs_fs_info	typeref:struct:crypto_shash *
csum_size	fs.h	/^	u32 csum_size;$/;"	m	struct:btrfs_fs_info	typeref:typename:u32
csum_size_to_bytes	file-item.c	/^static size_t csum_size_to_bytes(const struct btrfs_fs_info *fs_info, u32 csum_size)$/;"	f	typeref:typename:size_t	file:
csum_tree_block	disk-io.c	/^static void csum_tree_block(struct extent_buffer *buf, u8 *result)$/;"	f	typeref:typename:void	file:
csums	scrub.c	/^	u8 *csums;$/;"	m	struct:scrub_stripe	typeref:typename:u8 *	file:
csums_per_leaf	fs.h	/^	u32 csums_per_leaf;$/;"	m	struct:btrfs_fs_info	typeref:typename:u32
ctx	backref.c	/^	struct btrfs_backref_share_check_ctx *ctx;$/;"	m	struct:share_check	typeref:struct:btrfs_backref_share_check_ctx *	file:
cur	free-space-cache.h	/^	void *cur, *orig;$/;"	m	struct:btrfs_io_ctl	typeref:typename:void *
cur_ino	send.c	/^	u64 cur_ino;$/;"	m	struct:send_ctx	typeref:typename:u64	file:
cur_inode	send.c	/^	struct inode *cur_inode;$/;"	m	struct:send_ctx	typeref:struct:inode *	file:
cur_inode_deleted	send.c	/^	bool cur_inode_deleted;$/;"	m	struct:send_ctx	typeref:typename:bool	file:
cur_inode_gen	send.c	/^	u64 cur_inode_gen;$/;"	m	struct:send_ctx	typeref:typename:u64	file:
cur_inode_last_extent	send.c	/^	u64 cur_inode_last_extent;$/;"	m	struct:send_ctx	typeref:typename:u64	file:
cur_inode_mode	send.c	/^	u64 cur_inode_mode;$/;"	m	struct:send_ctx	typeref:typename:u64	file:
cur_inode_needs_verity	send.c	/^	bool cur_inode_needs_verity;$/;"	m	struct:send_ctx	typeref:typename:bool	file:
cur_inode_new	send.c	/^	bool cur_inode_new;$/;"	m	struct:send_ctx	typeref:typename:bool	file:
cur_inode_new_gen	send.c	/^	bool cur_inode_new_gen;$/;"	m	struct:send_ctx	typeref:typename:bool	file:
cur_inode_next_write_offset	send.c	/^	u64 cur_inode_next_write_offset;$/;"	m	struct:send_ctx	typeref:typename:u64	file:
cur_inode_rdev	send.c	/^	u64 cur_inode_rdev;$/;"	m	struct:send_ctx	typeref:typename:u64	file:
cur_inode_size	send.c	/^	u64 cur_inode_size;$/;"	m	struct:send_ctx	typeref:typename:u64	file:
cur_key	backref.h	/^	struct btrfs_key cur_key;$/;"	m	struct:btrfs_backref_iter	typeref:struct:btrfs_key
cur_list	ulist.h	/^	struct list_head *cur_list;  \/* hint to start search *\/$/;"	m	struct:ulist_iterator	typeref:struct:list_head *
cur_objectid	send.c	/^	u64 cur_objectid;$/;"	m	struct:backref_ctx	typeref:typename:u64	file:
cur_offset	send.c	/^	u64 cur_offset;$/;"	m	struct:backref_ctx	typeref:typename:u64	file:
cur_ptr	backref.h	/^	u32 cur_ptr;$/;"	m	struct:btrfs_backref_iter	typeref:typename:u32
cur_stripe	scrub.c	/^	int			cur_stripe;$/;"	m	struct:scrub_ctx	typeref:typename:int	file:
curr_index_batch_size	delayed-inode.h	/^	u32 curr_index_batch_size;$/;"	m	struct:btrfs_delayed_node	typeref:typename:u32
curr_leaf_bytenr	backref.h	/^	u64 curr_leaf_bytenr;$/;"	m	struct:btrfs_backref_share_check_ctx	typeref:typename:u64
current_active	async-thread.c	/^	int current_active;$/;"	m	struct:btrfs_workqueue	typeref:typename:int	file:
cursor_left	fs.h	/^	u64 cursor_left;$/;"	m	struct:btrfs_dev_replace	typeref:typename:u64
cursor_left_last_write_of_item	fs.h	/^	u64 cursor_left_last_write_of_item;$/;"	m	struct:btrfs_dev_replace	typeref:typename:u64
cursor_right	fs.h	/^	u64 cursor_right;$/;"	m	struct:btrfs_dev_replace	typeref:typename:u64
data	relocation.c	/^	void *data;$/;"	m	struct:mapping_node	typeref:typename:void *	file:
data	volumes.h	/^	struct btrfs_balance_args data;$/;"	m	struct:btrfs_balance_control	typeref:struct:btrfs_balance_args
data_alloc_cluster	fs.h	/^	struct btrfs_free_cluster data_alloc_cluster;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_free_cluster
data_bytenr	backref.c	/^	u64 data_bytenr;$/;"	m	struct:share_check	typeref:typename:u64	file:
data_chunk_allocations	fs.h	/^	u32 data_chunk_allocations;$/;"	m	struct:btrfs_fs_info	typeref:typename:u32
data_extent_gen	backref.c	/^	u64 data_extent_gen;$/;"	m	struct:share_check	typeref:typename:u64	file:
data_flush_states	space-info.c	/^static const enum btrfs_flush_state data_flush_states[] = {$/;"	g	file:
data_inode	relocation.c	/^	struct inode *data_inode;$/;"	m	struct:reloc_control	typeref:struct:inode *	file:
data_len	ctree.h	/^	u64 data_len;$/;"	m	struct:btrfs_replace_extent_info	typeref:typename:u64
data_len	delayed-inode.h	/^	u16 data_len;$/;"	m	struct:btrfs_delayed_item	typeref:typename:u16
data_offset	ctree.h	/^	u64 data_offset;$/;"	m	struct:btrfs_replace_extent_info	typeref:typename:u64
data_ref	delayed-ref.h	/^		struct btrfs_data_ref data_ref;$/;"	m	union:btrfs_ref::__anon5106a19d010a	typeref:struct:btrfs_data_ref
data_reloc_bg	fs.h	/^	u64 data_reloc_bg;$/;"	m	struct:btrfs_fs_info	typeref:typename:u64
data_reloc_print_warning_inode	inode.c	/^static int data_reloc_print_warning_inode(u64 inum, u64 offset, u64 num_bytes,$/;"	f	typeref:typename:int	file:
data_reloc_root	fs.h	/^	struct btrfs_root *data_reloc_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_root *
data_reloc_warn	inode.c	/^struct data_reloc_warn {$/;"	s	file:
data_reserved	inode.c	/^	struct extent_changeset *data_reserved;$/;"	m	struct:btrfs_dio_data	typeref:struct:extent_changeset *	file:
data_rsv	qgroup.h	/^	u32 data_rsv;		\/* reserved data space needs to be freed *\/$/;"	m	struct:btrfs_qgroup_extent_record	typeref:typename:u32
data_rsv_refroot	qgroup.h	/^	u64 data_rsv_refroot;	\/* which root the reserved data belongs to *\/$/;"	m	struct:btrfs_qgroup_extent_record	typeref:typename:u64
data_rwsem	block-group.h	/^	struct rw_semaphore data_rwsem;$/;"	m	struct:btrfs_block_group	typeref:struct:rw_semaphore
data_seqcount	volumes.h	/^	seqcount_t data_seqcount;$/;"	m	struct:btrfs_device	typeref:typename:seqcount_t
data_sinfo	fs.h	/^	struct btrfs_space_info *data_sinfo;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_space_info *
data_sizes	ctree.h	/^	const u32 *data_sizes;$/;"	m	struct:btrfs_item_batch	typeref:typename:const u32 *
data_space_reserved	inode.c	/^	bool data_space_reserved;$/;"	m	struct:btrfs_dio_data	typeref:typename:bool	file:
data_stripe_phys_start	tests/extent-map-tests.c	/^	u64 data_stripe_phys_start[5];$/;"	m	struct:rmap_test_vector	typeref:typename:u64[5]	file:
data_stripe_size	tests/extent-map-tests.c	/^	u64 data_stripe_size;$/;"	m	struct:rmap_test_vector	typeref:typename:u64	file:
datablock_size	check-integrity.c	/^	u32 datablock_size;$/;"	m	struct:btrfsic_state	typeref:typename:u32	file:
datav	check-integrity.c	/^	char **datav;$/;"	m	struct:btrfsic_block_data_ctx	typeref:typename:char **	file:
dbitmap	raid56.h	/^	unsigned long dbitmap;$/;"	m	struct:btrfs_raid_bio	typeref:typename:unsigned long
dead_roots	fs.h	/^	struct list_head dead_roots;$/;"	m	struct:btrfs_fs_info	typeref:struct:list_head
debug_kobj	fs.h	/^	struct kobject *debug_kobj;$/;"	m	struct:btrfs_fs_info	typeref:struct:kobject *
decide_stripe_size	volumes.c	/^static int decide_stripe_size(struct btrfs_fs_devices *fs_devices,$/;"	f	typeref:typename:int	file:
decide_stripe_size_regular	volumes.c	/^static int decide_stripe_size_regular(struct alloc_chunk_ctl *ctl,$/;"	f	typeref:typename:int	file:
decide_stripe_size_zoned	volumes.c	/^static int decide_stripe_size_zoned(struct alloc_chunk_ctl *ctl,$/;"	f	typeref:typename:int	file:
dedupe_in_progress	ctree.h	/^	int dedupe_in_progress;$/;"	m	struct:btrfs_root	typeref:typename:int
dedupe_in_progress_warn	send.c	/^static void dedupe_in_progress_warn(const struct btrfs_root *root)$/;"	f	typeref:typename:void	file:
default	Makefile	/^default:$/;"	t
default_acl	btrfs_inode.h	/^	struct posix_acl *default_acl;$/;"	m	struct:btrfs_new_inode_args	typeref:struct:posix_acl *
default_level	compression.h	/^	unsigned int default_level;$/;"	m	struct:btrfs_compress_op	typeref:typename:unsigned int
defrag_bytes	btrfs_inode.h	/^	u64 defrag_bytes;$/;"	m	struct:btrfs_inode	typeref:typename:u64
defrag_check_next_extent	defrag.c	/^static bool defrag_check_next_extent(struct inode *inode, struct extent_map *em,$/;"	f	typeref:typename:bool	file:
defrag_collect_targets	defrag.c	/^static int defrag_collect_targets(struct btrfs_inode *inode,$/;"	f	typeref:typename:int	file:
defrag_compress	btrfs_inode.h	/^	unsigned defrag_compress;$/;"	m	struct:btrfs_inode	typeref:typename:unsigned
defrag_get_extent	defrag.c	/^static struct extent_map *defrag_get_extent(struct btrfs_inode *inode,$/;"	f	typeref:struct:extent_map *	file:
defrag_inodes	fs.h	/^	struct rb_root defrag_inodes;$/;"	m	struct:btrfs_fs_info	typeref:struct:rb_root
defrag_inodes_lock	fs.h	/^	spinlock_t defrag_inodes_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:spinlock_t
defrag_lookup_extent	defrag.c	/^static struct extent_map *defrag_lookup_extent(struct inode *inode, u64 start,$/;"	f	typeref:struct:extent_map *	file:
defrag_max	ctree.h	/^	struct btrfs_key defrag_max;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_key
defrag_one_cluster	defrag.c	/^static int defrag_one_cluster(struct btrfs_inode *inode,$/;"	f	typeref:typename:int	file:
defrag_one_locked_target	defrag.c	/^static int defrag_one_locked_target(struct btrfs_inode *inode,$/;"	f	typeref:typename:int	file:
defrag_one_range	defrag.c	/^static int defrag_one_range(struct btrfs_inode *inode, u64 start, u32 len,$/;"	f	typeref:typename:int	file:
defrag_prepare_one_page	defrag.c	/^static struct page *defrag_prepare_one_page(struct btrfs_inode *inode, pgoff_t index)$/;"	f	typeref:struct:page *	file:
defrag_progress	ctree.h	/^	struct btrfs_key defrag_progress;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_key
defrag_running	fs.h	/^	atomic_t defrag_running;$/;"	m	struct:btrfs_fs_info	typeref:typename:atomic_t
defrag_target_range	defrag.c	/^struct defrag_target_range {$/;"	s	file:
del_balance_item	volumes.c	/^static int del_balance_item(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int	file:
del_logged_dentry	tree-log.c	/^static int del_logged_dentry(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
del_orphan	verity.c	/^static int del_orphan(struct btrfs_trans_handle *trans, struct btrfs_inode *inode)$/;"	f	typeref:typename:int	file:
del_qgroup_item	qgroup.c	/^static int del_qgroup_item(struct btrfs_trans_handle *trans, u64 qgroupid)$/;"	f	typeref:typename:int	file:
del_qgroup_rb	qgroup.c	/^static int del_qgroup_rb(struct btrfs_fs_info *fs_info, u64 qgroupid)$/;"	f	typeref:typename:int	file:
del_qgroup_relation_item	qgroup.c	/^static int del_qgroup_relation_item(struct btrfs_trans_handle *trans, u64 src,$/;"	f	typeref:typename:int	file:
del_relation_rb	qgroup.c	/^static int del_relation_rb(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
del_root	delayed-inode.h	/^	struct rb_root_cached del_root;$/;"	m	struct:btrfs_delayed_node	typeref:struct:rb_root_cached
delalloc	extent-tree.h	/^	int delalloc;$/;"	m	struct:find_free_extent_ctl	typeref:typename:int
delalloc_batch	fs.h	/^	s32 delalloc_batch;$/;"	m	struct:btrfs_fs_info	typeref:typename:s32
delalloc_bytes	block-group.h	/^	u64 delalloc_bytes;$/;"	m	struct:btrfs_block_group	typeref:typename:u64
delalloc_bytes	btrfs_inode.h	/^		u64 delalloc_bytes;$/;"	m	union:btrfs_inode::__anon98c21faa020a	typeref:typename:u64
delalloc_bytes	fs.h	/^	struct percpu_counter delalloc_bytes;$/;"	m	struct:btrfs_fs_info	typeref:struct:percpu_counter
delalloc_inodes	btrfs_inode.h	/^	struct list_head delalloc_inodes;$/;"	m	struct:btrfs_inode	typeref:struct:list_head
delalloc_inodes	ctree.h	/^	struct list_head delalloc_inodes;$/;"	m	struct:btrfs_root	typeref:struct:list_head
delalloc_lock	ctree.h	/^	spinlock_t delalloc_lock;$/;"	m	struct:btrfs_root	typeref:typename:spinlock_t
delalloc_mutex	ctree.h	/^	struct mutex delalloc_mutex;$/;"	m	struct:btrfs_root	typeref:struct:mutex
delalloc_root	ctree.h	/^	struct list_head delalloc_root;$/;"	m	struct:btrfs_root	typeref:struct:list_head
delalloc_root_lock	fs.h	/^	spinlock_t delalloc_root_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:spinlock_t
delalloc_root_mutex	fs.h	/^	struct mutex delalloc_root_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:mutex
delalloc_roots	fs.h	/^	struct list_head delalloc_roots;$/;"	m	struct:btrfs_fs_info	typeref:struct:list_head
delalloc_workers	fs.h	/^	struct btrfs_workqueue *delalloc_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_workqueue *
delay_ms	fs.h	/^	u64 delay_ms;$/;"	m	struct:btrfs_discard_ctl	typeref:typename:u64
delayed_block_rsv	fs.h	/^	struct btrfs_block_rsv delayed_block_rsv;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_block_rsv
delayed_iput	btrfs_inode.h	/^	struct list_head delayed_iput;$/;"	m	struct:btrfs_inode	typeref:struct:list_head
delayed_iput_lock	fs.h	/^	spinlock_t delayed_iput_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:spinlock_t
delayed_iputs	fs.h	/^	struct list_head delayed_iputs;$/;"	m	struct:btrfs_fs_info	typeref:struct:list_head
delayed_iputs_wait	fs.h	/^	wait_queue_head_t delayed_iputs_wait;$/;"	m	struct:btrfs_fs_info	typeref:typename:wait_queue_head_t
delayed_node	btrfs_inode.h	/^	struct btrfs_delayed_node *delayed_node;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_delayed_node *
delayed_node	delayed-inode.h	/^	struct btrfs_delayed_node *delayed_node;$/;"	m	struct:btrfs_delayed_item	typeref:struct:btrfs_delayed_node *
delayed_node_cache	delayed-inode.c	/^static struct kmem_cache *delayed_node_cache;$/;"	v	typeref:struct:kmem_cache *	file:
delayed_nodes_tree	ctree.h	/^	struct radix_tree_root delayed_nodes_tree;$/;"	m	struct:btrfs_root	typeref:struct:radix_tree_root
delayed_ref_updates	transaction.h	/^	unsigned long delayed_ref_updates;$/;"	m	struct:btrfs_trans_handle	typeref:typename:unsigned long
delayed_refs	transaction.h	/^	struct btrfs_delayed_ref_root delayed_refs;$/;"	m	struct:btrfs_transaction	typeref:struct:btrfs_delayed_ref_root
delayed_refs_rsv	fs.h	/^	struct btrfs_block_rsv delayed_refs_rsv;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_block_rsv
delayed_root	delayed-inode.c	/^	struct btrfs_delayed_root *delayed_root;$/;"	m	struct:btrfs_async_delayed_work	typeref:struct:btrfs_delayed_root *	file:
delayed_root	fs.h	/^	struct btrfs_delayed_root *delayed_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_delayed_root *
delayed_workers	fs.h	/^	struct btrfs_workqueue *delayed_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_workqueue *
delete_block_group_cache	relocation.c	/^static int delete_block_group_cache(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
delete_conflicting_dir_entry	tree-log.c	/^static int delete_conflicting_dir_entry(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
delete_orphan_inode	relocation.c	/^static void delete_orphan_inode(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void	file:
delete_v1_space_cache	relocation.c	/^static int delete_v1_space_cache(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
deleted_bgs	transaction.h	/^	struct list_head deleted_bgs;$/;"	m	struct:btrfs_transaction	typeref:struct:list_head
deleted_refs	send.c	/^	struct list_head deleted_refs;$/;"	m	struct:send_ctx	typeref:struct:list_head	file:
dentry	btrfs_inode.h	/^	struct dentry *dentry;$/;"	m	struct:btrfs_new_inode_args	typeref:struct:dentry *
dentry	transaction.h	/^	struct dentry *dentry;$/;"	m	struct:btrfs_pending_snapshot	typeref:struct:dentry *
describe_balance_args	volumes.c	/^static void describe_balance_args(struct btrfs_balance_args *bargs, char *buf,$/;"	f	typeref:typename:void	file:
describe_balance_start_or_resume	volumes.c	/^static void describe_balance_start_or_resume(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
describe_relocation	relocation.c	/^static void describe_relocation(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
detach_extent_buffer_page	extent_io.c	/^static void detach_extent_buffer_page(struct extent_buffer *eb, struct page *page)$/;"	f	typeref:typename:void	file:
detached	backref.h	/^	struct list_head detached;$/;"	m	struct:btrfs_backref_cache	typeref:struct:list_head
detached	backref.h	/^	unsigned int detached:1;$/;"	m	struct:btrfs_backref_node	typeref:typename:unsigned int:1
dev	check-integrity.c	/^	struct btrfsic_dev_state *dev;$/;"	m	struct:btrfsic_block_data_ctx	typeref:struct:btrfsic_dev_state *	file:
dev	scrub.c	/^	struct btrfs_device	*dev;$/;"	m	struct:scrub_warning	typeref:struct:btrfs_device *	file:
dev	scrub.c	/^	struct btrfs_device *dev;$/;"	m	struct:scrub_stripe	typeref:struct:btrfs_device *	file:
dev	volumes.h	/^	struct btrfs_device *dev;$/;"	m	struct:btrfs_device_info	typeref:struct:btrfs_device *
dev	volumes.h	/^	struct btrfs_device *dev;$/;"	m	struct:btrfs_discard_stripe	typeref:struct:btrfs_device *
dev	volumes.h	/^	struct btrfs_device *dev;$/;"	m	struct:btrfs_io_stripe	typeref:struct:btrfs_device *
dev_alloc_list	volumes.h	/^	struct list_head dev_alloc_list; \/* chunk mutex *\/$/;"	m	struct:btrfs_device	typeref:struct:list_head
dev_args_match_device	volumes.c	/^static bool dev_args_match_device(const struct btrfs_dev_lookup_args *args,$/;"	f	typeref:typename:bool	file:
dev_args_match_fs_devices	volumes.c	/^static bool dev_args_match_fs_devices(const struct btrfs_dev_lookup_args *args,$/;"	f	typeref:typename:bool	file:
dev_bytenr	check-integrity.c	/^	u64 dev_bytenr;		\/* key, physical byte num on disk *\/$/;"	m	struct:btrfsic_block	typeref:typename:u64	file:
dev_bytenr	check-integrity.c	/^	u64 dev_bytenr;		\/* physical bytenr on device *\/$/;"	m	struct:btrfsic_block_data_ctx	typeref:typename:u64	file:
dev_extent_hole_check	volumes.c	/^static bool dev_extent_hole_check(struct btrfs_device *device, u64 *hole_start,$/;"	f	typeref:typename:bool	file:
dev_extent_hole_check_zoned	volumes.c	/^static bool dev_extent_hole_check_zoned(struct btrfs_device *device,$/;"	f	typeref:typename:bool	file:
dev_extent_min	volumes.c	/^	u64 dev_extent_min;$/;"	m	struct:alloc_chunk_ctl	typeref:typename:u64	file:
dev_extent_search_start	volumes.c	/^static u64 dev_extent_search_start(struct btrfs_device *device)$/;"	f	typeref:typename:u64	file:
dev_item_err	tree-checker.c	/^static void dev_item_err(const struct extent_buffer *eb, int slot,$/;"	f	file:
dev_list	volumes.h	/^	struct list_head dev_list; \/* device_list_mutex *\/$/;"	m	struct:btrfs_device	typeref:struct:list_head
dev_offset	volumes.h	/^	u64 dev_offset;$/;"	m	struct:btrfs_device_info	typeref:typename:u64
dev_replace	fs.h	/^	struct btrfs_dev_replace dev_replace;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_dev_replace
dev_root	fs.h	/^	struct btrfs_root *dev_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_root *
dev_stat_values	volumes.h	/^	atomic_t dev_stat_values[BTRFS_DEV_STAT_VALUES_MAX];$/;"	m	struct:btrfs_device	typeref:typename:atomic_t[]
dev_state	check-integrity.c	/^	struct btrfsic_dev_state *dev_state;$/;"	m	struct:btrfsic_block	typeref:struct:btrfsic_dev_state *	file:
dev_state	volumes.h	/^	unsigned long dev_state;$/;"	m	struct:btrfs_device	typeref:typename:unsigned long
dev_stats_ccnt	volumes.h	/^	atomic_t dev_stats_ccnt;$/;"	m	struct:btrfs_device	typeref:typename:atomic_t
dev_stats_valid	volumes.h	/^	int dev_stats_valid;$/;"	m	struct:btrfs_device	typeref:typename:int
dev_stripes	volumes.c	/^	int dev_stripes;$/;"	m	struct:alloc_chunk_ctl	typeref:typename:int	file:
dev_stripes	volumes.h	/^	u8 dev_stripes;		\/* stripes per dev *\/$/;"	m	struct:btrfs_raid_attr	typeref:typename:u8
dev_update_list	transaction.h	/^	struct list_head dev_update_list;$/;"	m	struct:btrfs_transaction	typeref:struct:list_head
device_list_add	volumes.c	/^static noinline struct btrfs_device *device_list_add(const char *path,$/;"	f	typeref:typename:noinline struct btrfs_device *	file:
device_list_mutex	volumes.h	/^	struct mutex device_list_mutex;$/;"	m	struct:btrfs_fs_devices	typeref:struct:mutex
devices	volumes.h	/^	struct list_head devices;$/;"	m	struct:btrfs_fs_devices	typeref:struct:list_head
devices_kobj	volumes.h	/^	struct kobject *devices_kobj;$/;"	m	struct:btrfs_fs_devices	typeref:struct:kobject *
devid	raid56.h	/^	u64 devid;$/;"	m	struct:raid56_bio_trace_info	typeref:typename:u64
devid	volumes.h	/^	u64 devid;$/;"	m	struct:btrfs_dev_lookup_args	typeref:typename:u64
devid	volumes.h	/^	u64 devid;$/;"	m	struct:btrfs_device	typeref:typename:u64
devid_attrs	sysfs.c	/^static struct attribute *devid_attrs[] = {$/;"	v	typeref:struct:attribute * []	file:
devid_cmp	volumes.c	/^static int devid_cmp(void *priv, const struct list_head *a,$/;"	f	typeref:typename:int	file:
devid_kobj	volumes.h	/^	struct kobject devid_kobj;$/;"	m	struct:btrfs_device	typeref:struct:kobject
devid_ktype	sysfs.c	/^static const struct kobj_type devid_ktype = {$/;"	v	typeref:typename:const struct kobj_type	file:
devinfo_kobj	volumes.h	/^	struct kobject *devinfo_kobj;$/;"	m	struct:btrfs_fs_devices	typeref:struct:kobject *
devs_increment	volumes.c	/^	int devs_increment;$/;"	m	struct:alloc_chunk_ctl	typeref:typename:int	file:
devs_increment	volumes.h	/^	u8 devs_increment;	\/* ndevs has to be a multiple of this *\/$/;"	m	struct:btrfs_raid_attr	typeref:typename:u8
devs_max	volumes.c	/^	int devs_max;$/;"	m	struct:alloc_chunk_ctl	typeref:typename:int	file:
devs_max	volumes.h	/^	u8 devs_max;		\/* max devs to use *\/$/;"	m	struct:btrfs_raid_attr	typeref:typename:u8
devs_min	volumes.c	/^	int devs_min;$/;"	m	struct:alloc_chunk_ctl	typeref:typename:int	file:
devs_min	volumes.h	/^	u8 devs_min;		\/* min devs needed *\/$/;"	m	struct:btrfs_raid_attr	typeref:typename:u8
devt	volumes.h	/^	dev_t devt;$/;"	m	struct:btrfs_device	typeref:typename:dev_t
did_create_dir	send.c	/^static int did_create_dir(struct send_ctx *sctx, u64 dir)$/;"	f	typeref:typename:int	file:
did_overwrite_first_ref	send.c	/^static int did_overwrite_first_ref(struct send_ctx *sctx, u64 ino, u64 gen)$/;"	f	typeref:typename:int	file:
did_overwrite_ref	send.c	/^static int did_overwrite_ref(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
dir	btrfs_inode.h	/^	struct inode *dir;$/;"	m	struct:btrfs_new_inode_args	typeref:struct:inode *
dir	send.c	/^	u64 dir;$/;"	m	struct:recorded_ref	typeref:typename:u64	file:
dir	transaction.h	/^	struct inode *dir;$/;"	m	struct:btrfs_pending_snapshot	typeref:struct:inode *
dir_changed	send.c	/^static int dir_changed(struct send_ctx *sctx, u64 dir)$/;"	f	typeref:typename:int	file:
dir_created_cache	send.c	/^	struct btrfs_lru_cache dir_created_cache;$/;"	m	struct:send_ctx	typeref:struct:btrfs_lru_cache	file:
dir_entry	inode.c	/^struct dir_entry {$/;"	s	file:
dir_gen	send.c	/^	u64 dir_gen;$/;"	m	struct:recorded_ref	typeref:typename:u64	file:
dir_high_seq_ino	send.c	/^	u64 dir_high_seq_ino;$/;"	m	struct:orphan_dir_info	typeref:typename:u64	file:
dir_index	btrfs_inode.h	/^	u64 dir_index;$/;"	m	struct:btrfs_inode	typeref:typename:u64
dir_item_err	tree-checker.c	/^static void dir_item_err(const struct extent_buffer *eb, int slot,$/;"	f	file:
dir_utimes_cache	send.c	/^	struct btrfs_lru_cache dir_utimes_cache;$/;"	m	struct:send_ctx	typeref:struct:btrfs_lru_cache	file:
direct	backref.c	/^	struct preftree direct;    \/* BTRFS_SHARED_[DATA|BLOCK]_REF_KEY *\/$/;"	m	struct:preftrees	typeref:struct:preftree	file:
dirty	qgroup.h	/^	struct list_head dirty;   \/* dirty groups *\/$/;"	m	struct:btrfs_qgroup	typeref:struct:list_head
dirty_bgs	transaction.h	/^	struct list_head dirty_bgs;$/;"	m	struct:btrfs_transaction	typeref:struct:list_head
dirty_bgs_lock	transaction.h	/^	spinlock_t dirty_bgs_lock;$/;"	m	struct:btrfs_transaction	typeref:typename:spinlock_t
dirty_cowonly_roots	fs.h	/^	struct list_head dirty_cowonly_roots;$/;"	m	struct:btrfs_fs_info	typeref:struct:list_head
dirty_extent_root	delayed-ref.h	/^	struct rb_root dirty_extent_root;$/;"	m	struct:btrfs_delayed_ref_root	typeref:struct:rb_root
dirty_list	block-group.h	/^	struct list_head dirty_list;$/;"	m	struct:btrfs_block_group	typeref:struct:list_head
dirty_list	ctree.h	/^	struct list_head dirty_list;$/;"	m	struct:btrfs_root	typeref:struct:list_head
dirty_log_pages	ctree.h	/^	struct extent_io_tree dirty_log_pages;$/;"	m	struct:btrfs_root	typeref:struct:extent_io_tree
dirty_metadata_batch	fs.h	/^	s32 dirty_metadata_batch;$/;"	m	struct:btrfs_fs_info	typeref:typename:s32
dirty_metadata_bytes	fs.h	/^	struct percpu_counter dirty_metadata_bytes;$/;"	m	struct:btrfs_fs_info	typeref:struct:percpu_counter
dirty_offset	subpage.h	/^	unsigned int dirty_offset;$/;"	m	struct:btrfs_subpage_info	typeref:typename:unsigned int
dirty_pages	transaction.h	/^	struct extent_io_tree dirty_pages;$/;"	m	struct:btrfs_transaction	typeref:struct:extent_io_tree
dirty_qgroups	fs.h	/^	struct list_head dirty_qgroups;$/;"	m	struct:btrfs_fs_info	typeref:struct:list_head
dirty_subvol_roots	relocation.c	/^	struct list_head dirty_subvol_roots;$/;"	m	struct:reloc_control	typeref:struct:list_head	file:
discard_attrs	sysfs.c	/^static const struct attribute *discard_attrs[] = {$/;"	v	typeref:typename:const struct attribute * []	file:
discard_bitmap_bytes	fs.h	/^	u64 discard_bitmap_bytes;$/;"	m	struct:btrfs_discard_ctl	typeref:typename:u64
discard_bytes_saved	fs.h	/^	atomic64_t discard_bytes_saved;$/;"	m	struct:btrfs_discard_ctl	typeref:typename:atomic64_t
discard_ctl	fs.h	/^	struct btrfs_discard_ctl discard_ctl;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_discard_ctl
discard_cursor	block-group.h	/^	u64 discard_cursor;$/;"	m	struct:btrfs_block_group	typeref:typename:u64
discard_eligible_time	block-group.h	/^	u64 discard_eligible_time;$/;"	m	struct:btrfs_block_group	typeref:typename:u64
discard_extent_bytes	fs.h	/^	u64 discard_extent_bytes;$/;"	m	struct:btrfs_discard_ctl	typeref:typename:u64
discard_index	block-group.h	/^	int discard_index;$/;"	m	struct:btrfs_block_group	typeref:typename:int
discard_kobj	fs.h	/^	struct kobject *discard_kobj;$/;"	m	struct:btrfs_fs_info	typeref:struct:kobject *
discard_list	block-group.h	/^	struct list_head discard_list;$/;"	m	struct:btrfs_block_group	typeref:struct:list_head
discard_list	fs.h	/^	struct list_head discard_list[BTRFS_NR_DISCARD_LISTS];$/;"	m	struct:btrfs_discard_ctl	typeref:struct:list_head[]
discard_minlen	discard.c	/^static int discard_minlen[BTRFS_NR_DISCARD_LISTS] = {$/;"	v	typeref:typename:int[]	file:
discard_state	block-group.h	/^	enum btrfs_discard_state discard_state;$/;"	m	struct:btrfs_block_group	typeref:enum:btrfs_discard_state
discard_to_fs_info	sysfs.c	/^#define discard_to_fs_info(/;"	d	file:
discard_workers	fs.h	/^	struct workqueue_struct *discard_workers;$/;"	m	struct:btrfs_discard_ctl	typeref:struct:workqueue_struct *
discardable	volumes.h	/^	bool discardable;$/;"	m	struct:btrfs_fs_devices	typeref:typename:bool
discardable_bytes	free-space-cache.h	/^	s64 discardable_bytes[BTRFS_STAT_NR_ENTRIES];$/;"	m	struct:btrfs_free_space_ctl	typeref:typename:s64[]
discardable_bytes	fs.h	/^	atomic64_t discardable_bytes;$/;"	m	struct:btrfs_discard_ctl	typeref:typename:atomic64_t
discardable_extents	free-space-cache.h	/^	s32 discardable_extents[BTRFS_STAT_NR_ENTRIES];$/;"	m	struct:btrfs_free_space_ctl	typeref:typename:s32[]
discardable_extents	fs.h	/^	atomic_t discardable_extents;$/;"	m	struct:btrfs_discard_ctl	typeref:typename:atomic_t
disk_bytenr	inode.c	/^	u64 disk_bytenr;$/;"	m	struct:can_nocow_file_extent_args	typeref:typename:u64	file:
disk_bytenr	ordered-data.h	/^	u64 disk_bytenr;$/;"	m	struct:btrfs_ordered_extent	typeref:typename:u64
disk_cache_state	block-group.h	/^	int disk_cache_state;$/;"	m	struct:btrfs_block_group	typeref:typename:int
disk_i_size	btrfs_inode.h	/^	u64 disk_i_size;$/;"	m	struct:btrfs_inode	typeref:typename:u64
disk_key	check-integrity.c	/^	struct btrfs_disk_key disk_key;	\/* extra info to print in case of$/;"	m	struct:btrfsic_block	typeref:struct:btrfs_disk_key	file:
disk_len	ctree.h	/^	u64 disk_len;$/;"	m	struct:btrfs_replace_extent_info	typeref:typename:u64
disk_num_bytes	inode.c	/^	u64 disk_num_bytes;$/;"	m	struct:can_nocow_file_extent_args	typeref:typename:u64	file:
disk_num_bytes	ordered-data.h	/^	u64 disk_num_bytes;$/;"	m	struct:btrfs_ordered_extent	typeref:typename:u64
disk_offset	ctree.h	/^	u64 disk_offset;$/;"	m	struct:btrfs_replace_extent_info	typeref:typename:u64
disk_total	space-info.h	/^	u64 disk_total;		\/* total bytes on disk, takes mirrors into$/;"	m	struct:btrfs_space_info	typeref:typename:u64
disk_total_bytes	volumes.h	/^	u64 disk_total_bytes;$/;"	m	struct:btrfs_device	typeref:typename:u64
disk_used	space-info.h	/^	u64 disk_used;		\/* total bytes used on disk *\/$/;"	m	struct:btrfs_space_info	typeref:typename:u64
do_allocation	extent-tree.c	/^static int do_allocation(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int	file:
do_allocation_clustered	extent-tree.c	/^static int do_allocation_clustered(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int	file:
do_allocation_zoned	extent-tree.c	/^static int do_allocation_zoned(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int	file:
do_chunk_alloc	block-group.c	/^static struct btrfs_block_group *do_chunk_alloc(struct btrfs_trans_handle *trans, u64 flags)$/;"	f	typeref:struct:btrfs_block_group *	file:
do_discard_extent	extent-tree.c	/^static int do_discard_extent(struct btrfs_discard_stripe *stripe, u64 *bytes)$/;"	f	typeref:typename:int	file:
do_free_extent_accounting	extent-tree.c	/^static int do_free_extent_accounting(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
do_relocation	relocation.c	/^static int do_relocation(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
do_trimming	free-space-cache.c	/^static int do_trimming(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int	file:
do_walk_down	extent-tree.c	/^static noinline int do_walk_down(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
do_zone_finish	zoned.c	/^static int do_zone_finish(struct btrfs_block_group *block_group, bool fully_written)$/;"	f	typeref:typename:int	file:
driver	ctree.c	/^	const char	driver[12];$/;"	m	struct:btrfs_csums	typeref:typename:const char[12]	file:
drop_all_extent_maps_fast	extent_map.c	/^static void drop_all_extent_maps_fast(struct extent_map_tree *tree)$/;"	f	typeref:typename:void	file:
drop_cache	ctree.h	/^	bool drop_cache;$/;"	m	struct:btrfs_drop_extents_args	typeref:typename:bool
drop_delayed_ref	delayed-ref.c	/^static inline void drop_delayed_ref(struct btrfs_delayed_ref_root *delayed_refs,$/;"	f	typeref:typename:void	file:
drop_end	ctree.h	/^	u64 drop_end;$/;"	m	struct:btrfs_drop_extents_args	typeref:typename:u64
drop_inode_items	tree-log.c	/^static int drop_inode_items(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
drop_level	extent-tree.c	/^	int drop_level;$/;"	m	struct:walk_control	typeref:typename:int	file:
drop_one_dir_item	tree-log.c	/^static noinline int drop_one_dir_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
drop_progress	extent-tree.c	/^	struct btrfs_key drop_progress;$/;"	m	struct:walk_control	typeref:struct:btrfs_key	file:
drop_verity_items	verity.c	/^static int drop_verity_items(struct btrfs_inode *inode, u8 key_type)$/;"	f	typeref:typename:int	file:
dropped_roots	transaction.h	/^	struct list_head dropped_roots;$/;"	m	struct:btrfs_transaction	typeref:struct:list_head
dropped_roots_lock	transaction.h	/^	spinlock_t dropped_roots_lock;$/;"	m	struct:btrfs_transaction	typeref:typename:spinlock_t
dst_slot	tree-mod-log.c	/^		int dst_slot;$/;"	m	struct:tree_mod_elem::__anon6d656a820108	typeref:typename:int	file:
dummy_block_for_bio_bh_flush	check-integrity.c	/^	struct btrfsic_block dummy_block_for_bio_bh_flush;$/;"	m	struct:btrfsic_dev_state	typeref:struct:btrfsic_block	file:
dump_block_entry	ref-verify.c	/^static void dump_block_entry(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
dump_eb_and_memory_contents	tests/extent-io-tests.c	/^static void dump_eb_and_memory_contents(struct extent_buffer *eb, void *memory,$/;"	f	typeref:typename:void	file:
dump_extent_io_tree	tests/extent-io-tests.c	/^static void dump_extent_io_tree(const struct extent_io_tree *tree)$/;"	f	typeref:typename:void	file:
dump_global_block_rsv	space-info.c	/^static void dump_global_block_rsv(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
dump_ref_action	ref-verify.c	/^static void dump_ref_action(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
dup_ref	send.c	/^static int dup_ref(struct recorded_ref *ref, struct list_head *list)$/;"	f	typeref:typename:int	file:
eb	accessors.h	/^	struct extent_buffer *eb;$/;"	m	struct:btrfs_map_token	typeref:struct:extent_buffer *
eb	backref.h	/^	struct extent_buffer *eb;$/;"	m	struct:btrfs_backref_node	typeref:struct:extent_buffer *
eb	extent_io.h	/^	struct extent_buffer *eb;$/;"	m	struct:btrfs_eb_write_context	typeref:struct:extent_buffer *
eb_bitmap_offset	extent_io.c	/^static inline void eb_bitmap_offset(const struct extent_buffer *eb,$/;"	f	typeref:typename:void	file:
eb_leak_lock	fs.h	/^	spinlock_t eb_leak_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:spinlock_t
eb_refs	subpage.h	/^		atomic_t eb_refs;$/;"	m	union:btrfs_subpage::__anonc43c1922010a	typeref:typename:atomic_t
emit_fiemap_extent	extent_io.c	/^static int emit_fiemap_extent(struct fiemap_extent_info *fieinfo,$/;"	f	typeref:typename:int	file:
emit_last_fiemap_cache	extent_io.c	/^static int emit_last_fiemap_cache(struct fiemap_extent_info *fieinfo,$/;"	f	typeref:typename:int	file:
empty_block_rsv	fs.h	/^	struct btrfs_block_rsv empty_block_rsv;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_block_rsv
empty_cluster	extent-tree.h	/^	u64 empty_cluster;$/;"	m	struct:find_free_extent_ctl	typeref:typename:u64
empty_size	extent-tree.h	/^	u64 empty_size;$/;"	m	struct:find_free_extent_ctl	typeref:typename:u64
empty_zones	zoned.h	/^	unsigned long *empty_zones;$/;"	m	struct:btrfs_zoned_device_info	typeref:typename:unsigned long *
emulate_report_zones	zoned.c	/^static int emulate_report_zones(struct btrfs_device *device, u64 pos,$/;"	f	typeref:typename:int	file:
encryption	ioctl.c	/^	__u32 encryption;$/;"	m	struct:btrfs_ioctl_encoded_io_args_32	typeref:typename:__u32	file:
end	ctree.h	/^	u64 end;$/;"	m	struct:btrfs_drop_extents_args	typeref:typename:u64
end	extent-io-tree.c	/^	u64 end;$/;"	m	struct:tree_entry	typeref:typename:u64	file:
end	extent-io-tree.h	/^	u64 end; \/* inclusive *\/$/;"	m	struct:extent_state	typeref:typename:u64
end	extent_io.c	/^	u64 end;$/;"	m	struct:processed_extent	typeref:typename:u64	file:
end	inode.c	/^	u64 end;$/;"	m	struct:async_chunk	typeref:typename:u64	file:
end	inode.c	/^	u64 end;$/;"	m	struct:can_nocow_file_extent_args	typeref:typename:u64	file:
end	relocation.c	/^	u64 end;$/;"	m	struct:file_extent_cluster	typeref:typename:u64	file:
end	send.c	/^			char *end;$/;"	m	struct:fs_path::__anon1b81f160010a::__anon1b81f1600208	typeref:typename:char *	file:
end_bio_extent_readpage	extent_io.c	/^static void end_bio_extent_readpage(struct btrfs_bio *bbio)$/;"	f	typeref:typename:void	file:
end_bio_extent_writepage	extent_io.c	/^static void end_bio_extent_writepage(struct btrfs_bio *bbio)$/;"	f	typeref:typename:void	file:
end_compressed_bio_read	compression.c	/^static void end_compressed_bio_read(struct btrfs_bio *bbio)$/;"	f	typeref:typename:void	file:
end_compressed_bio_write	compression.c	/^static void end_compressed_bio_write(struct btrfs_bio *bbio)$/;"	f	typeref:typename:void	file:
end_compressed_writeback	compression.c	/^static noinline void end_compressed_writeback(const struct compressed_bio *cb)$/;"	f	typeref:typename:noinline void	file:
end_io	bio.h	/^	btrfs_bio_end_io_t end_io;$/;"	m	struct:btrfs_bio	typeref:typename:btrfs_bio_end_io_t
end_io_func	extent_io.c	/^	btrfs_bio_end_io_t end_io_func;$/;"	m	struct:btrfs_bio_ctrl	typeref:typename:btrfs_bio_end_io_t	file:
end_io_work	bio.h	/^	struct work_struct end_io_work;$/;"	m	struct:btrfs_bio	typeref:struct:work_struct
end_page_read	extent_io.c	/^static void end_page_read(struct page *page, bool uptodate, u64 start, u32 len)$/;"	f	typeref:typename:void	file:
end_ptr	backref.h	/^	u32 end_ptr;$/;"	m	struct:btrfs_backref_iter	typeref:typename:u32
end_trimming_bitmap	free-space-cache.c	/^static void end_trimming_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:void	file:
endio_freespace_worker	fs.h	/^	struct btrfs_workqueue *endio_freespace_worker;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_workqueue *
endio_meta_workers	fs.h	/^	struct workqueue_struct *endio_meta_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:workqueue_struct *
endio_readpage_release_extent	extent_io.c	/^static void endio_readpage_release_extent(struct processed_extent *processed,$/;"	f	typeref:typename:void	file:
endio_workers	fs.h	/^	struct workqueue_struct *endio_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:workqueue_struct *
endio_write_workers	fs.h	/^	struct btrfs_workqueue *endio_write_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_workqueue *
ensure_commit_roots_uptodate	send.c	/^static int ensure_commit_roots_uptodate(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
entries	free-space-cache.h	/^	int entries;$/;"	m	struct:btrfs_io_ctl	typeref:typename:int
entries	lru_cache.h	/^	struct maple_tree entries;$/;"	m	struct:btrfs_lru_cache	typeref:struct:maple_tree
entry	send.c	/^	struct btrfs_lru_cache_entry entry;$/;"	m	struct:backref_cache_entry	typeref:struct:btrfs_lru_cache_entry	file:
entry	send.c	/^	struct btrfs_lru_cache_entry entry;$/;"	m	struct:name_cache_entry	typeref:struct:btrfs_lru_cache_entry	file:
entry_end	ordered-data.c	/^static u64 entry_end(struct btrfs_ordered_extent *entry)$/;"	f	typeref:typename:u64	file:
entry_less	free-space-cache.c	/^static bool entry_less(struct rb_node *node, const struct rb_node *parent)$/;"	f	typeref:typename:bool	file:
error	check-integrity.c	/^	int error;$/;"	m	struct:btrfsic_stack_frame	typeref:typename:int	file:
error	space-info.h	/^	int error;$/;"	m	struct:reserve_ticket	typeref:typename:int
error	transaction.h	/^	int error;$/;"	m	struct:btrfs_pending_snapshot	typeref:typename:int
error	volumes.h	/^	atomic_t error;$/;"	m	struct:btrfs_io_context	typeref:typename:atomic_t
error_bitmap	raid56.h	/^	unsigned long *error_bitmap;$/;"	m	struct:btrfs_raid_bio	typeref:typename:unsigned long *
error_bitmap	scrub.c	/^	unsigned long error_bitmap;$/;"	m	struct:scrub_stripe	typeref:typename:unsigned long	file:
errstr	scrub.c	/^	const char		*errstr;$/;"	m	struct:scrub_warning	typeref:typename:const char *	file:
evict_flush_states	space-info.c	/^static const enum btrfs_flush_state evict_flush_states[] = {$/;"	g	file:
evict_inode_truncate_pages	inode.c	/^static void evict_inode_truncate_pages(struct inode *inode)$/;"	f	typeref:typename:void	file:
evict_refill_and_join	inode.c	/^static struct btrfs_trans_handle *evict_refill_and_join(struct btrfs_root *root,$/;"	f	typeref:struct:btrfs_trans_handle *	file:
excl	qgroup.h	/^	u64 excl;	\/* exclusive *\/$/;"	m	struct:btrfs_qgroup	typeref:typename:u64
excl_cmpr	qgroup.h	/^	u64 excl_cmpr;	\/* exclusive compressed *\/$/;"	m	struct:btrfs_qgroup	typeref:typename:u64
exclop_start_or_cancel_reloc	ioctl.c	/^static int exclop_start_or_cancel_reloc(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
exclude_super_stripes	block-group.c	/^static int exclude_super_stripes(struct btrfs_block_group *cache)$/;"	f	typeref:typename:int	file:
excluded_extents	fs.h	/^	struct extent_io_tree excluded_extents;$/;"	m	struct:btrfs_fs_info	typeref:struct:extent_io_tree
exclusive_operation	fs.h	/^	enum btrfs_exclusive_operation exclusive_operation;$/;"	m	struct:btrfs_fs_info	typeref:enum:btrfs_exclusive_operation
exit_btrfs_fs	super.c	/^static void __exit exit_btrfs_fs(void)$/;"	f	typeref:typename:void __exit	file:
exit_func	super.c	/^	void (*exit_func)(void);$/;"	m	struct:init_sequence	typeref:typename:void (*)(void)	file:
expected_mapped_addr	tests/extent-map-tests.c	/^	bool expected_mapped_addr;$/;"	m	struct:rmap_test_vector	typeref:typename:bool	file:
extent_buf	ctree.h	/^	char *extent_buf;$/;"	m	struct:btrfs_replace_extent_info	typeref:typename:char *
extent_buffer	extent_io.h	/^struct extent_buffer {$/;"	s
extent_buffer_bitmap_clear	extent_io.c	/^void extent_buffer_bitmap_clear(const struct extent_buffer *eb,$/;"	f	typeref:typename:void
extent_buffer_bitmap_set	extent_io.c	/^void extent_buffer_bitmap_set(const struct extent_buffer *eb, unsigned long start,$/;"	f	typeref:typename:void
extent_buffer_cache	extent_io.c	/^static struct kmem_cache *extent_buffer_cache;$/;"	v	typeref:struct:kmem_cache *	file:
extent_buffer_free_cachep	extent_io.c	/^void __cold extent_buffer_free_cachep(void)$/;"	f	typeref:typename:void __cold
extent_buffer_get_byte	extent_io.c	/^static u8 *extent_buffer_get_byte(const struct extent_buffer *eb, unsigned long bytenr)$/;"	f	typeref:typename:u8 *	file:
extent_buffer_init_cachep	extent_io.c	/^int __init extent_buffer_init_cachep(void)$/;"	f	typeref:typename:int __init
extent_buffer_read_end_io	extent_io.c	/^static void extent_buffer_read_end_io(struct btrfs_bio *bbio)$/;"	f	typeref:typename:void	file:
extent_buffer_test_bit	extent_io.c	/^int extent_buffer_test_bit(const struct extent_buffer *eb, unsigned long start,$/;"	f	typeref:typename:int
extent_buffer_under_io	extent_io.c	/^static int extent_buffer_under_io(const struct extent_buffer *eb)$/;"	f	typeref:typename:int	file:
extent_buffer_uptodate	extent_io.h	/^static inline int extent_buffer_uptodate(const struct extent_buffer *eb)$/;"	f	typeref:typename:int
extent_buffer_write_end_io	extent_io.c	/^static void extent_buffer_write_end_io(struct btrfs_bio *bbio)$/;"	f	typeref:typename:void	file:
extent_changeset	extent_io.h	/^struct extent_changeset {$/;"	s
extent_changeset_alloc	extent_io.h	/^static inline struct extent_changeset *extent_changeset_alloc(void)$/;"	f	typeref:struct:extent_changeset *
extent_changeset_free	extent_io.h	/^static inline void extent_changeset_free(struct extent_changeset *changeset)$/;"	f	typeref:typename:void
extent_changeset_init	extent_io.h	/^static inline void extent_changeset_init(struct extent_changeset *changeset)$/;"	f	typeref:typename:void
extent_changeset_release	extent_io.h	/^static inline void extent_changeset_release(struct extent_changeset *changeset)$/;"	f	typeref:typename:void
extent_clear_unlock_delalloc	extent_io.c	/^void extent_clear_unlock_delalloc(struct btrfs_inode *inode, u64 start, u64 end,$/;"	f	typeref:typename:void
extent_cmp	tree-log.c	/^static int extent_cmp(void *priv, const struct list_head *a,$/;"	f	typeref:typename:int	file:
extent_data_ref_count	extent-tree.c	/^static noinline u32 extent_data_ref_count(struct btrfs_path *path,$/;"	f	typeref:typename:noinline u32	file:
extent_err	tree-checker.c	/^static void extent_err(const struct extent_buffer *eb, int slot,$/;"	f	file:
extent_fiemap	extent_io.c	/^int extent_fiemap(struct btrfs_inode *inode, struct fiemap_extent_info *fieinfo,$/;"	f	typeref:typename:int
extent_flag_to_str	tests/extent-io-tests.c	/^static void extent_flag_to_str(const struct extent_state *state, char *dest)$/;"	f	typeref:typename:void	file:
extent_from_logical	backref.c	/^int extent_from_logical(struct btrfs_fs_info *fs_info, u64 logical,$/;"	f	typeref:typename:int
extent_inode_elem	backref.c	/^struct extent_inode_elem {$/;"	s	file:
extent_inserted	ctree.h	/^	bool extent_inserted;$/;"	m	struct:btrfs_drop_extents_args	typeref:typename:bool
extent_invalidate_folio	extent_io.c	/^int extent_invalidate_folio(struct extent_io_tree *tree,$/;"	f	typeref:typename:int
extent_io_tree	extent-io-tree.h	/^struct extent_io_tree {$/;"	s
extent_io_tree_init	extent-io-tree.c	/^void extent_io_tree_init(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void
extent_io_tree_panic	extent-io-tree.c	/^static void extent_io_tree_panic(struct extent_io_tree *tree, int err)$/;"	f	typeref:typename:void	file:
extent_io_tree_release	extent-io-tree.c	/^void extent_io_tree_release(struct extent_io_tree *tree)$/;"	f	typeref:typename:void
extent_is_shared	backref.c	/^static inline int extent_is_shared(struct share_check *sc)$/;"	f	typeref:typename:int	file:
extent_item_pos	backref.h	/^	u64 extent_item_pos;$/;"	m	struct:btrfs_backref_walk_ctx	typeref:typename:u64
extent_item_size	ctree.h	/^	u32 extent_item_size;$/;"	m	struct:btrfs_drop_extents_args	typeref:typename:u32
extent_item_size	inode.c	/^	u64 extent_item_size;$/;"	m	struct:data_reloc_warn	typeref:typename:u64	file:
extent_item_size	scrub.c	/^	u64			extent_item_size;$/;"	m	struct:scrub_warning	typeref:typename:u64	file:
extent_len	send.c	/^	u64 extent_len;$/;"	m	struct:backref_ctx	typeref:typename:u64	file:
extent_map	extent_map.h	/^struct extent_map {$/;"	s
extent_map_block_end	extent_map.h	/^static inline u64 extent_map_block_end(struct extent_map *em)$/;"	f	typeref:typename:u64
extent_map_cache	extent_map.c	/^static struct kmem_cache *extent_map_cache;$/;"	v	typeref:struct:kmem_cache *	file:
extent_map_device_clear_bits	extent_map.c	/^static void extent_map_device_clear_bits(struct extent_map *em, unsigned bits)$/;"	f	typeref:typename:void	file:
extent_map_device_set_bits	extent_map.c	/^static void extent_map_device_set_bits(struct extent_map *em, unsigned bits)$/;"	f	typeref:typename:void	file:
extent_map_end	extent_map.h	/^static inline u64 extent_map_end(struct extent_map *em)$/;"	f	typeref:typename:u64
extent_map_exit	extent_map.c	/^void __cold extent_map_exit(void)$/;"	f	typeref:typename:void __cold
extent_map_in_tree	extent_map.h	/^static inline int extent_map_in_tree(const struct extent_map *em)$/;"	f	typeref:typename:int
extent_map_init	extent_map.c	/^int __init extent_map_init(void)$/;"	f	typeref:typename:int __init
extent_map_tree	extent_map.h	/^struct extent_map_tree {$/;"	s
extent_map_tree_init	extent_map.c	/^void extent_map_tree_init(struct extent_map_tree *tree)$/;"	f	typeref:typename:void
extent_mergeable	file.c	/^static int extent_mergeable(struct extent_buffer *leaf, int slot,$/;"	f	typeref:typename:int	file:
extent_offset	inode.c	/^	u64 extent_offset;$/;"	m	struct:can_nocow_file_extent_args	typeref:typename:u64	file:
extent_op	delayed-ref.h	/^	struct btrfs_delayed_extent_op *extent_op;$/;"	m	struct:btrfs_delayed_ref_head	typeref:struct:btrfs_delayed_extent_op *
extent_path	scrub.c	/^	struct btrfs_path	extent_path;$/;"	m	struct:scrub_ctx	typeref:struct:btrfs_path	file:
extent_range	tests/extent-map-tests.c	/^struct extent_range {$/;"	s	file:
extent_range_clear_dirty_for_io	extent_io.c	/^void extent_range_clear_dirty_for_io(struct inode *inode, u64 start, u64 end)$/;"	f	typeref:typename:void
extent_readahead	extent_io.c	/^void extent_readahead(struct readahead_control *rac)$/;"	f	typeref:typename:void
extent_ref_type	extent-tree.c	/^static inline int extent_ref_type(u64 parent, u64 owner)$/;"	f	typeref:typename:int	file:
extent_root	relocation.c	/^	struct btrfs_root *extent_root;$/;"	m	struct:reloc_control	typeref:struct:btrfs_root *	file:
extent_sector_bitmap	scrub.c	/^	unsigned long extent_sector_bitmap;$/;"	m	struct:scrub_stripe	typeref:typename:unsigned long	file:
extent_state	extent-io-tree.h	/^struct extent_state {$/;"	s
extent_state_cache	extent-io-tree.c	/^static struct kmem_cache *extent_state_cache;$/;"	v	typeref:struct:kmem_cache *	file:
extent_state_free_cachep	extent-io-tree.c	/^void __cold extent_state_free_cachep(void)$/;"	f	typeref:typename:void __cold
extent_state_in_tree	extent-io-tree.c	/^static inline bool extent_state_in_tree(const struct extent_state *state)$/;"	f	typeref:typename:bool	file:
extent_state_init_cachep	extent-io-tree.c	/^int __init extent_state_init_cachep(void)$/;"	f	typeref:typename:int __init
extent_thresh	defrag.c	/^	u32 extent_thresh;$/;"	m	struct:inode_defrag	typeref:typename:u32	file:
extent_tree	btrfs_inode.h	/^	struct extent_map_tree extent_tree;$/;"	m	struct:btrfs_inode	typeref:struct:extent_map_tree
extent_write_cache_pages	extent_io.c	/^static int extent_write_cache_pages(struct address_space *mapping,$/;"	f	typeref:typename:int	file:
extent_write_locked_range	extent_io.c	/^void extent_write_locked_range(struct inode *inode, struct page *locked_page,$/;"	f	typeref:typename:void
extent_writepages	extent_io.c	/^int extent_writepages(struct address_space *mapping,$/;"	f	typeref:typename:int
extents	inode.c	/^	struct list_head extents;$/;"	m	struct:async_chunk	typeref:struct:list_head	file:
extents_found	inode-item.h	/^	u64 extents_found;$/;"	m	struct:btrfs_truncate_control	typeref:typename:u64
extents_found	relocation.c	/^	u64 extents_found;$/;"	m	struct:reloc_control	typeref:typename:u64	file:
extents_thresh	free-space-cache.h	/^	int extents_thresh;$/;"	m	struct:btrfs_free_space_ctl	typeref:typename:int
extract	props.c	/^	const char *(*extract)(struct inode *inode);$/;"	m	struct:prop_handler	typeref:typename:const char * (*)(struct inode * inode)	file:
extref_get_fields	tree-log.c	/^static int extref_get_fields(struct extent_buffer *eb, unsigned long ref_ptr,$/;"	f	typeref:typename:int	file:
extwriter_counter_dec	transaction.c	/^static inline void extwriter_counter_dec(struct btrfs_transaction *trans,$/;"	f	typeref:typename:void	file:
extwriter_counter_inc	transaction.c	/^static inline void extwriter_counter_inc(struct btrfs_transaction *trans,$/;"	f	typeref:typename:void	file:
extwriter_counter_init	transaction.c	/^static inline void extwriter_counter_init(struct btrfs_transaction *trans,$/;"	f	typeref:typename:void	file:
extwriter_counter_read	transaction.c	/^static inline int extwriter_counter_read(struct btrfs_transaction *trans)$/;"	f	typeref:typename:int	file:
failfast	block-rsv.h	/^	bool failfast;$/;"	m	struct:btrfs_block_rsv	typeref:typename:bool
fallback_to_cow	inode.c	/^static int fallback_to_cow(struct btrfs_inode *inode, struct page *locked_page,$/;"	f	typeref:typename:int	file:
falloc_range	file.c	/^struct falloc_range {$/;"	s	file:
feature_bit	sysfs.c	/^	u64 feature_bit;$/;"	m	struct:btrfs_feature_attr	typeref:typename:u64	file:
feature_set	sysfs.c	/^	enum btrfs_feature_set feature_set;$/;"	m	struct:btrfs_feature_attr	typeref:enum:btrfs_feature_set	file:
fetch_cluster_info	extent-tree.c	/^fetch_cluster_info(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_free_cluster *	file:
fiemap_cache	extent_io.c	/^struct fiemap_cache {$/;"	s	file:
fiemap_find_last_extent_offset	extent_io.c	/^static int fiemap_find_last_extent_offset(struct btrfs_inode *inode,$/;"	f	typeref:typename:int	file:
fiemap_next_leaf_item	extent_io.c	/^static int fiemap_next_leaf_item(struct btrfs_inode *inode, struct btrfs_path *path)$/;"	f	typeref:typename:int	file:
fiemap_process_hole	extent_io.c	/^static int fiemap_process_hole(struct btrfs_inode *inode,$/;"	f	typeref:typename:int	file:
fiemap_search_slot	extent_io.c	/^static int fiemap_search_slot(struct btrfs_inode *inode, struct btrfs_path *path,$/;"	f	typeref:typename:int	file:
file_extent_cluster	relocation.c	/^struct file_extent_cluster {$/;"	s	file:
file_extent_end	tree-checker.c	/^static u64 file_extent_end(struct extent_buffer *leaf,$/;"	f	typeref:typename:u64	file:
file_extent_err	tree-checker.c	/^static void file_extent_err(const struct extent_buffer *eb, int slot,$/;"	f	file:
file_extent_tree	btrfs_inode.h	/^	struct extent_io_tree file_extent_tree;$/;"	m	struct:btrfs_inode	typeref:struct:extent_io_tree
file_extent_tree_class	extent-io-tree.c	/^static struct lock_class_key file_extent_tree_class;$/;"	v	typeref:struct:lock_class_key	file:
file_offset	bio.h	/^	u64 file_offset;$/;"	m	struct:btrfs_bio	typeref:typename:u64
file_offset	ctree.h	/^	u64 file_offset;$/;"	m	struct:btrfs_replace_extent_info	typeref:typename:u64
file_offset	inode.c	/^	u64 file_offset;$/;"	m	struct:btrfs_dio_private	typeref:typename:u64	file:
file_offset	ordered-data.h	/^	u64 file_offset;$/;"	m	struct:btrfs_ordered_extent	typeref:typename:u64
file_sync_write	reflink.c	/^static bool file_sync_write(const struct file *file)$/;"	f	typeref:typename:bool	file:
fileattr	send.c	/^	u64 fileattr;$/;"	m	struct:btrfs_inode_info	typeref:typename:u64	file:
fill_data_csums	raid56.c	/^static void fill_data_csums(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:void	file:
fill_device_from_item	volumes.c	/^static void fill_device_from_item(struct extent_buffer *leaf,$/;"	f	typeref:typename:void	file:
fill_device_from_item_partition	volumes.c	/^static void fill_device_from_item_partition(struct extent_buffer *leaf,$/;"	f	typeref:typename:void	file:
fill_dummy_bgs	block-group.c	/^static int fill_dummy_bgs(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int	file:
fill_holes	file.c	/^static int fill_holes(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
fill_inode_item	inode.c	/^static void fill_inode_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void	file:
fill_inode_item	tree-log.c	/^static void fill_inode_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void	file:
fill_one_extent_info	scrub.c	/^static void fill_one_extent_info(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
fill_stack_inode_item	delayed-inode.c	/^static void fill_stack_inode_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void	file:
fill_writer_pointer_gap	scrub.c	/^static int fill_writer_pointer_gap(struct scrub_ctx *sctx, u64 physical)$/;"	f	typeref:typename:int	file:
filldir_buf	ctree.h	/^	void *filldir_buf;$/;"	m	struct:btrfs_file_private	typeref:typename:void *
find_contiguous_extent_bit	extent-io-tree.c	/^int find_contiguous_extent_bit(struct extent_io_tree *tree, u64 start,$/;"	f	typeref:typename:int
find_delalloc_subrange	file.c	/^static bool find_delalloc_subrange(struct btrfs_inode *inode, u64 start, u64 end,$/;"	f	typeref:typename:bool	file:
find_desired_extent	file.c	/^static loff_t find_desired_extent(struct file *file, loff_t offset, int whence)$/;"	f	typeref:typename:loff_t	file:
find_desired_extent_in_hole	file.c	/^static bool find_desired_extent_in_hole(struct btrfs_inode *inode, int whence,$/;"	f	typeref:typename:bool	file:
find_dir_range	tree-log.c	/^static noinline int find_dir_range(struct btrfs_root *root,$/;"	f	typeref:typename:noinline int	file:
find_extent_buffer	extent_io.c	/^struct extent_buffer *find_extent_buffer(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:extent_buffer *
find_extent_buffer_nolock	extent_io.c	/^static struct extent_buffer *find_extent_buffer_nolock($/;"	f	typeref:struct:extent_buffer *	file:
find_extent_clone	send.c	/^static int find_extent_clone(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
find_extent_in_eb	backref.c	/^static int find_extent_in_eb(struct btrfs_backref_walk_ctx *ctx,$/;"	f	typeref:typename:int	file:
find_first_block_group	block-group.c	/^static int find_first_block_group(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
find_first_clear_extent_bit	extent-io-tree.c	/^void find_first_clear_extent_bit(struct extent_io_tree *tree, u64 start,$/;"	f	typeref:typename:void
find_first_extent_bit	extent-io-tree.c	/^bool find_first_extent_bit(struct extent_io_tree *tree, u64 start,$/;"	f	typeref:typename:bool
find_first_extent_bit_state	extent-io-tree.c	/^static struct extent_state *find_first_extent_bit_state(struct extent_io_tree *tree,$/;"	f	typeref:struct:extent_state *	file:
find_first_extent_item	scrub.c	/^static int find_first_extent_item(struct btrfs_root *extent_root,$/;"	f	typeref:typename:int	file:
find_first_non_hole	file.c	/^static int find_first_non_hole(struct btrfs_inode *inode, u64 *start, u64 *len)$/;"	f	typeref:typename:int	file:
find_first_ref_head	delayed-ref.c	/^static struct btrfs_delayed_ref_head *find_first_ref_head($/;"	f	typeref:struct:btrfs_delayed_ref_head *	file:
find_free_dev_extent	volumes.c	/^static int find_free_dev_extent(struct btrfs_device *device, u64 num_bytes,$/;"	f	typeref:typename:int	file:
find_free_extent	extent-tree.c	/^static noinline int find_free_extent(struct btrfs_root *root,$/;"	f	typeref:typename:noinline int	file:
find_free_extent_check_size_class	extent-tree.c	/^static bool find_free_extent_check_size_class(struct find_free_extent_ctl *ffe_ctl,$/;"	f	typeref:typename:bool	file:
find_free_extent_clustered	extent-tree.c	/^static int find_free_extent_clustered(struct btrfs_block_group *bg,$/;"	f	typeref:typename:int	file:
find_free_extent_ctl	extent-tree.h	/^struct find_free_extent_ctl {$/;"	s
find_free_extent_unclustered	extent-tree.c	/^static int find_free_extent_unclustered(struct btrfs_block_group *bg,$/;"	f	typeref:typename:int	file:
find_free_extent_update_loop	extent-tree.c	/^static int find_free_extent_update_loop(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
find_free_space	free-space-cache.c	/^find_free_space(struct btrfs_free_space_ctl *ctl, u64 *offset, u64 *bytes,$/;"	f	typeref:struct:btrfs_free_space *	file:
find_fsid	volumes.c	/^static noinline struct btrfs_fs_devices *find_fsid($/;"	f	typeref:typename:noinline struct btrfs_fs_devices *	file:
find_fsid_changed	volumes.c	/^static struct btrfs_fs_devices *find_fsid_changed($/;"	f	typeref:struct:btrfs_fs_devices *	file:
find_fsid_inprogress	volumes.c	/^static struct btrfs_fs_devices *find_fsid_inprogress($/;"	f	typeref:struct:btrfs_fs_devices *	file:
find_fsid_reverted_metadata	volumes.c	/^static struct btrfs_fs_devices *find_fsid_reverted_metadata($/;"	f	typeref:struct:btrfs_fs_devices *	file:
find_fsid_with_metadata_uuid	volumes.c	/^static struct btrfs_fs_devices *find_fsid_with_metadata_uuid($/;"	f	typeref:struct:btrfs_fs_devices *	file:
find_live_mirror	volumes.c	/^static int find_live_mirror(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
find_lock_delalloc_range	extent_io.c	/^noinline_for_stack bool find_lock_delalloc_range(struct inode *inode,$/;"	f	typeref:typename:EXPORT_FOR_TESTS noinline_for_stack bool
find_middle	extent-tree.c	/^static u64 find_middle(struct rb_root *root)$/;"	f	typeref:typename:u64	file:
find_newest_super_backup	disk-io.c	/^static int find_newest_super_backup(struct btrfs_fs_info *info)$/;"	f	typeref:typename:int	file:
find_next_block_group	discard.c	/^static struct btrfs_block_group *find_next_block_group($/;"	f	typeref:struct:btrfs_block_group *	file:
find_next_chunk	volumes.c	/^static u64 find_next_chunk(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:u64	file:
find_next_csum_offset	file-item.c	/^static int find_next_csum_offset(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
find_next_devid	volumes.c	/^static noinline int find_next_devid(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:noinline int	file:
find_next_dirty_byte	extent_io.c	/^static void find_next_dirty_byte(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
find_next_extent	relocation.c	/^int find_next_extent(struct reloc_control *rc, struct btrfs_path *path,$/;"	f	typeref:typename:noinline_for_stack int	file:
find_next_inode	relocation.c	/^static struct inode *find_next_inode(struct btrfs_root *root, u64 objectid)$/;"	f	typeref:struct:inode *	file:
find_next_key	extent-tree.c	/^static int find_next_key(struct btrfs_path *path, int level,$/;"	f	typeref:typename:int	file:
find_next_key	relocation.c	/^static int find_next_key(struct btrfs_path *path, int level,$/;"	f	typeref:typename:int	file:
find_parent_nodes	backref.c	/^static int find_parent_nodes(struct btrfs_backref_walk_ctx *ctx,$/;"	f	typeref:typename:int	file:
find_prop_handler	props.c	/^find_prop_handler(const char *name,$/;"	f	typeref:typename:const struct prop_handler *	file:
find_prop_handlers_by_hash	props.c	/^static const struct hlist_head *find_prop_handlers_by_hash(const u64 hash)$/;"	f	typeref:typename:const struct hlist_head *	file:
find_qgroup_rb	qgroup.c	/^static struct btrfs_qgroup *find_qgroup_rb(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_qgroup *	file:
find_ref_head	delayed-ref.c	/^static struct btrfs_delayed_ref_head *find_ref_head($/;"	f	typeref:struct:btrfs_delayed_ref_head *	file:
find_reloc_root	relocation.c	/^struct btrfs_root *find_reloc_root(struct btrfs_fs_info *fs_info, u64 bytenr)$/;"	f	typeref:struct:btrfs_root *
find_stripe_sector	raid56.c	/^static struct sector_ptr *find_stripe_sector(struct btrfs_raid_bio *rbio,$/;"	f	typeref:struct:sector_ptr *	file:
find_xattr	send.c	/^static int find_xattr(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
find_xattr_ctx	send.c	/^struct find_xattr_ctx {$/;"	s	file:
finish_extent_writes_for_zoned	scrub.c	/^static int finish_extent_writes_for_zoned(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
finish_inode_if_needed	send.c	/^static int finish_inode_if_needed(struct send_ctx *sctx, int at_end)$/;"	f	typeref:typename:int	file:
finish_need_commit_sem_search	ctree.c	/^static int finish_need_commit_sem_search(struct btrfs_path *path)$/;"	f	typeref:typename:int	file:
finish_one_item	delayed-inode.c	/^static void finish_one_item(struct btrfs_delayed_root *delayed_root)$/;"	f	typeref:typename:void	file:
finish_ordered_fn	ordered-data.c	/^static void finish_ordered_fn(struct btrfs_work *work)$/;"	f	typeref:typename:void	file:
finish_parity_scrub	raid56.c	/^static int finish_parity_scrub(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:int	file:
finish_pbitmap	raid56.h	/^	unsigned long finish_pbitmap;$/;"	m	struct:btrfs_raid_bio	typeref:typename:unsigned long
finish_pending_nodes	relocation.c	/^static int finish_pending_nodes(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
finish_pointers	raid56.h	/^	void **finish_pointers;$/;"	m	struct:btrfs_raid_bio	typeref:typename:void **
finish_verity	verity.c	/^static int finish_verity(struct btrfs_inode *inode, const void *desc,$/;"	f	typeref:typename:int	file:
first_dir_index_to_log	btrfs_inode.h	/^		u64 first_dir_index_to_log;$/;"	m	union:btrfs_inode::__anon98c21faa020a	typeref:typename:u64
first_free	scrub.c	/^	int			first_free;$/;"	m	struct:scrub_ctx	typeref:typename:int	file:
first_key	qgroup.h	/^	struct btrfs_key first_key;$/;"	m	struct:btrfs_qgroup_swapped_block	typeref:struct:btrfs_key
first_key	tree-checker.h	/^	struct btrfs_key first_key;$/;"	m	struct:btrfs_tree_parent_check	typeref:struct:btrfs_key
first_logical_byte	extent-tree.c	/^static u64 first_logical_byte(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:u64	file:
fixup_inode_link_count	tree-log.c	/^static noinline int fixup_inode_link_count(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
fixup_inode_link_counts	tree-log.c	/^static noinline int fixup_inode_link_counts(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
fixup_low_keys	ctree.c	/^static void fixup_low_keys(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void	file:
fixup_tree_root_location	inode.c	/^static int fixup_tree_root_location(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
fixup_workers	fs.h	/^	struct btrfs_workqueue *fixup_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_workqueue *
flags	async-thread.h	/^	unsigned long flags;$/;"	m	struct:btrfs_work	typeref:typename:unsigned long
flags	block-group.h	/^	u64 flags;$/;"	m	struct:btrfs_block_group	typeref:typename:u64
flags	btrfs_inode.h	/^	u32 flags;$/;"	m	struct:btrfs_inode	typeref:typename:u32
flags	delayed-inode.h	/^	unsigned long flags;$/;"	m	struct:btrfs_delayed_node	typeref:typename:unsigned long
flags	delayed-ref.h	/^	unsigned long flags;$/;"	m	struct:btrfs_delayed_ref_root	typeref:typename:unsigned long
flags	extent-tree.c	/^	u64 flags[BTRFS_MAX_LEVEL];$/;"	m	struct:walk_control	typeref:typename:u64[]	file:
flags	extent-tree.h	/^	u64 flags;$/;"	m	struct:find_free_extent_ctl	typeref:typename:u64
flags	extent_io.c	/^	u32 flags;$/;"	m	struct:fiemap_cache	typeref:typename:u32	file:
flags	extent_map.h	/^	unsigned long flags;$/;"	m	struct:extent_map	typeref:typename:unsigned long
flags	fs.h	/^	unsigned long flags;$/;"	m	struct:btrfs_fs_info	typeref:typename:unsigned long
flags	ioctl.c	/^	__u64	flags;			\/* in *\/$/;"	m	struct:btrfs_ioctl_received_subvol_args_32	typeref:typename:__u64	file:
flags	ioctl.c	/^	__u64 flags;			\/* in *\/$/;"	m	struct:btrfs_ioctl_send_args_32	typeref:typename:__u64	file:
flags	ioctl.c	/^	__u64 flags;$/;"	m	struct:btrfs_ioctl_encoded_io_args_32	typeref:typename:__u64	file:
flags	ordered-data.h	/^	unsigned long flags;$/;"	m	struct:btrfs_ordered_extent	typeref:typename:unsigned long
flags	raid56.h	/^	unsigned long flags;$/;"	m	struct:btrfs_raid_bio	typeref:typename:unsigned long
flags	send.c	/^	u64 flags;	\/* 'flags' member of btrfs_ioctl_send_args is u64 *\/$/;"	m	struct:send_ctx	typeref:typename:u64	file:
flags	space-info.h	/^	u64 flags;$/;"	m	struct:btrfs_space_info	typeref:typename:u64
flags	sysfs.c	/^	u64 flags;$/;"	m	struct:raid_kobject	typeref:typename:u64	file:
flags	transaction.h	/^	unsigned long flags;$/;"	m	struct:btrfs_transaction	typeref:typename:unsigned long
flags	volumes.h	/^	u64 flags;$/;"	m	struct:btrfs_balance_control	typeref:typename:u64
flags_to_set	delayed-ref.h	/^	u64 flags_to_set;$/;"	m	struct:btrfs_delayed_extent_op	typeref:typename:u64
flush	space-info.h	/^	unsigned int flush:1;		\/* set if we are trying to make space *\/$/;"	m	struct:btrfs_space_info	typeref:typename:unsigned int:1
flush_bio	volumes.h	/^	struct bio flush_bio;$/;"	m	struct:btrfs_device	typeref:struct:bio
flush_delalloc_roots	send.c	/^static int flush_delalloc_roots(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
flush_dir_items_batch	tree-log.c	/^static int flush_dir_items_batch(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
flush_dirty_cache	free-space-cache.c	/^static int flush_dirty_cache(struct inode *inode)$/;"	f	typeref:typename:int	file:
flush_gen	check-integrity.c	/^	u64 flush_gen; \/* only valid if !never_written *\/$/;"	m	struct:btrfsic_block	typeref:typename:u64	file:
flush_scrub_stripes	scrub.c	/^static int flush_scrub_stripes(struct scrub_ctx *sctx)$/;"	f	typeref:typename:int	file:
flush_space	space-info.c	/^static void flush_space(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
flush_wait	volumes.h	/^	struct completion flush_wait;$/;"	m	struct:btrfs_device	typeref:struct:completion
flush_work	ordered-data.h	/^	struct btrfs_work flush_work;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:btrfs_work
flush_workers	fs.h	/^	struct btrfs_workqueue *flush_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_workqueue *
fname	btrfs_inode.h	/^	struct fscrypt_name fname;$/;"	m	struct:btrfs_new_inode_args	typeref:struct:fscrypt_name
folio_clear_ordered	ctree.h	/^#define folio_clear_ordered(/;"	d
folio_set_ordered	ctree.h	/^#define folio_set_ordered(/;"	d
folio_test_ordered	ctree.h	/^#define folio_test_ordered(/;"	d
for_data_reloc	extent-tree.h	/^	bool for_data_reloc;$/;"	m	struct:find_free_extent_ctl	typeref:typename:bool
for_treelog	extent-tree.h	/^	bool for_treelog;$/;"	m	struct:find_free_extent_ctl	typeref:typename:bool
force_alloc	space-info.h	/^	unsigned int force_alloc;	\/* set if we need to force a chunk$/;"	m	struct:btrfs_space_info	typeref:typename:unsigned int
force_metadata_allocation	block-group.c	/^static void force_metadata_allocation(struct btrfs_fs_info *info)$/;"	f	typeref:typename:void	file:
found	send.c	/^	u64 found;$/;"	m	struct:backref_ctx	typeref:typename:u64	file:
found_data	send.c	/^	char *found_data;$/;"	m	struct:find_xattr_ctx	typeref:typename:char *	file:
found_data_len	send.c	/^	int found_data_len;$/;"	m	struct:find_xattr_ctx	typeref:typename:int	file:
found_extent	extent-tree.c	/^static void found_extent(struct find_free_extent_ctl *ffe_ctl,$/;"	f	typeref:typename:void	file:
found_extent_clustered	extent-tree.c	/^static void found_extent_clustered(struct find_free_extent_ctl *ffe_ctl,$/;"	f	typeref:typename:void	file:
found_file_extent	relocation.c	/^	unsigned int found_file_extent:1;$/;"	m	struct:reloc_control	typeref:typename:unsigned int:1	file:
found_idx	send.c	/^	int found_idx;$/;"	m	struct:find_xattr_ctx	typeref:typename:int	file:
found_offset	extent-tree.h	/^	u64 found_offset;$/;"	m	struct:find_free_extent_ctl	typeref:typename:u64
found_ref	send.c	/^	bool found_ref;$/;"	m	struct:clone_root	typeref:typename:bool	file:
fragment_free_space	block-group.c	/^static void fragment_free_space(struct btrfs_block_group *block_group)$/;"	f	typeref:typename:void	file:
fragmented	fs.h	/^	bool fragmented;$/;"	m	struct:btrfs_free_cluster	typeref:typename:bool
free	tree-log.c	/^	int free;$/;"	m	struct:walk_control	typeref:typename:int	file:
free_async_extent_pages	inode.c	/^static void free_async_extent_pages(struct async_extent *async_extent)$/;"	f	typeref:typename:void	file:
free_bitmap	free-space-cache.c	/^static void free_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:void	file:
free_block_entry	ref-verify.c	/^static void free_block_entry(struct block_entry *be)$/;"	f	typeref:typename:void	file:
free_block_list	relocation.c	/^static void free_block_list(struct rb_root *blocks)$/;"	f	typeref:typename:void	file:
free_chunk_space	fs.h	/^	atomic64_t free_chunk_space;$/;"	m	struct:btrfs_fs_info	typeref:typename:atomic64_t
free_conflicting_inodes	tree-log.c	/^static void free_conflicting_inodes(struct btrfs_log_ctx *ctx)$/;"	f	typeref:typename:void	file:
free_extent_buffer	extent_io.c	/^void free_extent_buffer(struct extent_buffer *eb)$/;"	f	typeref:typename:void
free_extent_buffer_stale	extent_io.c	/^void free_extent_buffer_stale(struct extent_buffer *eb)$/;"	f	typeref:typename:void
free_extent_map	extent_map.c	/^void free_extent_map(struct extent_map *em)$/;"	f	typeref:typename:void
free_extent_map_tree	tests/extent-map-tests.c	/^static void free_extent_map_tree(struct extent_map_tree *em_tree)$/;"	f	typeref:typename:void	file:
free_extent_state	extent-io-tree.c	/^void free_extent_state(struct extent_state *state)$/;"	f	typeref:typename:void
free_extents	free-space-cache.h	/^	int free_extents;$/;"	m	struct:btrfs_free_space_ctl	typeref:typename:int
free_fs_devices	volumes.c	/^static void free_fs_devices(struct btrfs_fs_devices *fs_devices)$/;"	f	typeref:typename:void	file:
free_global_root_pointers	disk-io.c	/^static void free_global_root_pointers(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
free_global_roots	disk-io.c	/^static void free_global_roots(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
free_heuristic_ws	compression.c	/^static void free_heuristic_ws(struct list_head *ws)$/;"	f	typeref:typename:void	file:
free_inode_elem_list	backref.c	/^static void free_inode_elem_list(struct extent_inode_elem *eie)$/;"	f	typeref:typename:void	file:
free_ipath	backref.c	/^void free_ipath(struct inode_fs_paths *ipath)$/;"	f	typeref:typename:void
free_leaf_list	backref.c	/^static void free_leaf_list(struct ulist *ulist)$/;"	f	typeref:typename:void	file:
free_log_tree	tree-log.c	/^static void free_log_tree(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void	file:
free_objectid	ctree.h	/^	u64 free_objectid;$/;"	m	struct:btrfs_root	typeref:typename:u64
free_orphan_dir_info	send.c	/^static void free_orphan_dir_info(struct send_ctx *sctx,$/;"	f	typeref:typename:void	file:
free_path	inode.c	/^	bool free_path;$/;"	m	struct:can_nocow_file_extent_args	typeref:typename:bool	file:
free_pending_move	send.c	/^static void free_pending_move(struct send_ctx *sctx, struct pending_dir_move *m)$/;"	f	typeref:typename:void	file:
free_pref	backref.c	/^static void free_pref(struct prelim_ref *ref)$/;"	f	typeref:typename:void	file:
free_raid_bio	raid56.c	/^static void free_raid_bio(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:void	file:
free_raid_bio_pointers	raid56.c	/^static void free_raid_bio_pointers(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:void	file:
free_recorded_refs	send.c	/^static void free_recorded_refs(struct send_ctx *sctx)$/;"	f	typeref:typename:void	file:
free_reloc_control	relocation.c	/^static void free_reloc_control(struct reloc_control *rc)$/;"	f	typeref:typename:void	file:
free_reloc_roots	relocation.c	/^void free_reloc_roots(struct list_head *list)$/;"	f	typeref:typename:noinline_for_stack void	file:
free_root_extent_buffers	disk-io.c	/^static void free_root_extent_buffers(struct btrfs_root *root)$/;"	f	typeref:typename:void	file:
free_root_pointers	disk-io.c	/^static void free_root_pointers(struct btrfs_fs_info *info, bool free_chunk_root)$/;"	f	typeref:typename:void	file:
free_space	free-space-cache.h	/^	u64 free_space;$/;"	m	struct:btrfs_free_space_ctl	typeref:typename:u64
free_space_bitmap_size	free-space-tree.c	/^static inline u32 free_space_bitmap_size(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:u32	file:
free_space_bytes	free-space-cache.h	/^	struct rb_root_cached free_space_bytes;$/;"	m	struct:btrfs_free_space_ctl	typeref:struct:rb_root_cached
free_space_ctl	block-group.h	/^	struct btrfs_free_space_ctl *free_space_ctl;$/;"	m	struct:btrfs_block_group	typeref:struct:btrfs_free_space_ctl *
free_space_extent	tests/free-space-tree-tests.c	/^struct free_space_extent {$/;"	s	file:
free_space_lock	block-group.h	/^	struct mutex free_space_lock;$/;"	m	struct:btrfs_block_group	typeref:struct:mutex
free_space_next_bitmap	free-space-tree.c	/^static int free_space_next_bitmap(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
free_space_offset	free-space-cache.h	/^	struct rb_root free_space_offset;$/;"	m	struct:btrfs_free_space_ctl	typeref:struct:rb_root
free_space_op	free-space-cache.c	/^static const struct btrfs_free_space_op free_space_op = {$/;"	v	typeref:typename:const struct btrfs_free_space_op	file:
free_space_set_bits	free-space-tree.c	/^static void free_space_set_bits(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void	file:
free_space_test_bit	free-space-tree.c	/^int free_space_test_bit(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:EXPORT_FOR_TESTS int
free_waiting_dir_move	send.c	/^static void free_waiting_dir_move(struct send_ctx *sctx,$/;"	f	typeref:typename:void	file:
free_workspace	compression.c	/^static void free_workspace(int type, struct list_head *ws)$/;"	f	typeref:typename:void	file:
free_ws	compression.h	/^	int free_ws;$/;"	m	struct:workspace_manager	typeref:typename:int
from_disk	ref-verify.c	/^	int from_disk;$/;"	m	struct:block_entry	typeref:typename:int	file:
frozen	block-group.h	/^	atomic_t frozen;$/;"	m	struct:btrfs_block_group	typeref:typename:atomic_t
fs_devices	fs.h	/^	struct btrfs_fs_devices *fs_devices;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_devices *
fs_devices	volumes.h	/^	struct btrfs_fs_devices *fs_devices;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_fs_devices *
fs_error	fs.h	/^	int fs_error;$/;"	m	struct:btrfs_fs_info	typeref:typename:int
fs_info	async-thread.c	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_workqueue	typeref:struct:btrfs_fs_info *	file:
fs_info	backref.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_backref_cache	typeref:struct:btrfs_fs_info *
fs_info	backref.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_backref_iter	typeref:struct:btrfs_fs_info *
fs_info	backref.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_backref_walk_ctx	typeref:struct:btrfs_fs_info *
fs_info	bio.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_bio	typeref:struct:btrfs_fs_info *
fs_info	block-group.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_block_group	typeref:struct:btrfs_fs_info *
fs_info	check-integrity.c	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfsic_state	typeref:struct:btrfs_fs_info *	file:
fs_info	ctree.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_fs_info *
fs_info	extent-io-tree.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:extent_io_tree	typeref:struct:btrfs_fs_info *
fs_info	extent_io.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:extent_buffer	typeref:struct:btrfs_fs_info *
fs_info	free-space-cache.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_io_ctl	typeref:struct:btrfs_fs_info *
fs_info	inode.c	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:data_reloc_warn	typeref:struct:btrfs_fs_info *	file:
fs_info	scrub.c	/^	struct btrfs_fs_info	*fs_info;$/;"	m	struct:scrub_ctx	typeref:struct:btrfs_fs_info *	file:
fs_info	transaction.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_trans_handle	typeref:struct:btrfs_fs_info *
fs_info	transaction.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_transaction	typeref:struct:btrfs_fs_info *
fs_info	volumes.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_fs_info *
fs_info	volumes.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_fs_devices	typeref:struct:btrfs_fs_info *
fs_info	volumes.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_io_context	typeref:struct:btrfs_fs_info *
fs_info_count	fs.h	/^    int fs_info_count;$/;"	m	struct:btrfs_fs_info	typeref:typename:int
fs_info_list	fs.h	/^    struct list_head fs_info_list;$/;"	m	struct:btrfs_fs_info	typeref:struct:list_head
fs_list	volumes.h	/^	struct list_head fs_list;$/;"	m	struct:btrfs_fs_devices	typeref:struct:list_head
fs_path	send.c	/^struct fs_path {$/;"	s	file:
fs_path_add	send.c	/^static int fs_path_add(struct fs_path *p, const char *name, int name_len)$/;"	f	typeref:typename:int	file:
fs_path_add_from_extent_buffer	send.c	/^static int fs_path_add_from_extent_buffer(struct fs_path *p,$/;"	f	typeref:typename:int	file:
fs_path_add_path	send.c	/^static int fs_path_add_path(struct fs_path *p, struct fs_path *p2)$/;"	f	typeref:typename:int	file:
fs_path_alloc	send.c	/^static struct fs_path *fs_path_alloc(void)$/;"	f	typeref:struct:fs_path *	file:
fs_path_alloc_reversed	send.c	/^static struct fs_path *fs_path_alloc_reversed(void)$/;"	f	typeref:struct:fs_path *	file:
fs_path_copy	send.c	/^static int fs_path_copy(struct fs_path *p, struct fs_path *from)$/;"	f	typeref:typename:int	file:
fs_path_ensure_buf	send.c	/^static int fs_path_ensure_buf(struct fs_path *p, int len)$/;"	f	typeref:typename:int	file:
fs_path_free	send.c	/^static void fs_path_free(struct fs_path *p)$/;"	f	typeref:typename:void	file:
fs_path_len	send.c	/^static int fs_path_len(struct fs_path *p)$/;"	f	typeref:typename:int	file:
fs_path_prepare_for_add	send.c	/^static int fs_path_prepare_for_add(struct fs_path *p, int name_len,$/;"	f	typeref:typename:int	file:
fs_path_reset	send.c	/^static void fs_path_reset(struct fs_path *p)$/;"	f	typeref:typename:void	file:
fs_path_unreverse	send.c	/^static void fs_path_unreverse(struct fs_path *p)$/;"	f	typeref:typename:void	file:
fs_root	backref.h	/^	struct btrfs_root		*fs_root;$/;"	m	struct:inode_fs_paths	typeref:struct:btrfs_root *
fs_root	fs.h	/^	struct btrfs_root *fs_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_root *
fs_roots_radix	fs.h	/^	struct radix_tree_root fs_roots_radix;$/;"	m	struct:btrfs_fs_info	typeref:struct:radix_tree_root
fs_roots_radix_lock	fs.h	/^	spinlock_t fs_roots_radix_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:spinlock_t
fs_state	fs.h	/^	unsigned long fs_state;$/;"	m	struct:btrfs_fs_info	typeref:typename:unsigned long
fs_state_chars	messages.c	/^static const char fs_state_chars[] = {$/;"	v	typeref:typename:const char[]	file:
fsid	volumes.h	/^	u8 *fsid;$/;"	m	struct:btrfs_dev_lookup_args	typeref:typename:u8 *
fsid	volumes.h	/^	u8 fsid[BTRFS_FSID_SIZE]; \/* FS specific uuid *\/$/;"	m	struct:btrfs_fs_devices	typeref:typename:u8[]
fsid_change	volumes.h	/^	bool fsid_change;$/;"	m	struct:btrfs_fs_devices	typeref:typename:bool
fsid_kobj	volumes.h	/^	struct kobject fsid_kobj;$/;"	m	struct:btrfs_fs_devices	typeref:struct:kobject
fspath	backref.h	/^	struct btrfs_data_container	*fspath;$/;"	m	struct:inode_fs_paths	typeref:struct:btrfs_data_container *
full	block-rsv.h	/^	bool full;$/;"	m	struct:btrfs_block_rsv	typeref:typename:bool
full	space-info.h	/^	unsigned int full:1;	\/* indicates that we cannot allocate any more$/;"	m	struct:btrfs_space_info	typeref:typename:unsigned int:1
full_page_sectors_uptodate	raid56.c	/^static bool full_page_sectors_uptodate(struct btrfs_raid_bio *rbio,$/;"	f	typeref:typename:bool	file:
full_path	send.c	/^	struct fs_path *full_path;$/;"	m	struct:recorded_ref	typeref:struct:fs_path *	file:
full_send_tree	send.c	/^static int full_send_tree(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
full_stripe_len	block-group.h	/^	unsigned long full_stripe_len;$/;"	m	struct:btrfs_block_group	typeref:typename:unsigned long
full_stripe_logical	volumes.h	/^	u64 full_stripe_logical;$/;"	m	struct:btrfs_io_context	typeref:typename:u64
func	async-thread.h	/^	btrfs_func_t func;$/;"	m	struct:btrfs_work	typeref:typename:btrfs_func_t
gather_device_info	volumes.c	/^static int gather_device_info(struct btrfs_fs_devices *fs_devices,$/;"	f	typeref:typename:int	file:
gen	backref.h	/^	u64 gen;$/;"	m	struct:btrfs_backref_shared_cache_entry	typeref:typename:u64
gen	export.h	/^	u32 gen;$/;"	m	struct:btrfs_fid	typeref:typename:u32
gen	lru_cache.h	/^	u64 gen;$/;"	m	struct:btrfs_lru_cache_entry	typeref:typename:u64
gen	send.c	/^	u64 gen;$/;"	m	struct:btrfs_inode_info	typeref:typename:u64	file:
gen	send.c	/^	u64 gen;$/;"	m	struct:orphan_dir_info	typeref:typename:u64	file:
gen	send.c	/^	u64 gen;$/;"	m	struct:pending_dir_move	typeref:typename:u64	file:
gen_unique_name	send.c	/^static int gen_unique_name(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
generate_pq_vertical	raid56.c	/^static void generate_pq_vertical(struct btrfs_raid_bio *rbio, int sectornr)$/;"	f	typeref:typename:void	file:
generation	btrfs_inode.h	/^	u64 generation;$/;"	m	struct:btrfs_inode	typeref:typename:u64
generation	check-integrity.c	/^	u64 generation;$/;"	m	struct:btrfsic_block	typeref:typename:u64	file:
generation	extent_map.h	/^	u64 generation;$/;"	m	struct:extent_map	typeref:typename:u64
generation	fs.h	/^	u64 generation;$/;"	m	struct:btrfs_fs_info	typeref:typename:u64
generation	scrub.c	/^		u64 generation;$/;"	m	union:scrub_sector_verification::__anon87685755010a	typeref:typename:u64	file:
generation	tree-mod-log.c	/^	u64 generation;$/;"	m	struct:tree_mod_elem	typeref:typename:u64	file:
generation	volumes.h	/^	u64 generation;$/;"	m	struct:btrfs_device	typeref:typename:u64
generic_err	tree-checker.c	/^static void generic_err(const struct extent_buffer *eb, int slot,$/;"	f	file:
get4bits	compression.c	/^static u8 get4bits(u64 num, int shift) {$/;"	f	typeref:typename:u8	file:
get_alloc_profile_by_root	extent-tree.c	/^static u64 get_alloc_profile_by_root(struct btrfs_root *root, int data)$/;"	f	typeref:typename:u64	file:
get_bio_sector_nr	raid56.c	/^static int get_bio_sector_nr(struct btrfs_raid_bio *rbio, struct bio *bio)$/;"	f	typeref:typename:int	file:
get_block_group_info	ioctl.c	/^static void get_block_group_info(struct list_head *groups_list,$/;"	f	typeref:typename:void	file:
get_block_rsv	block-rsv.c	/^static struct btrfs_block_rsv *get_block_rsv($/;"	f	typeref:struct:btrfs_block_rsv *	file:
get_btrfs_kobj	sysfs.c	/^static struct kobject *get_btrfs_kobj(struct kobject *kobj)$/;"	f	typeref:struct:kobject *	file:
get_cluster_boundary_end	relocation.c	/^static u64 get_cluster_boundary_end(struct file_extent_cluster *cluster,$/;"	f	typeref:typename:u64	file:
get_cur_inode_state	send.c	/^static int get_cur_inode_state(struct send_ctx *sctx, u64 ino, u64 gen,$/;"	f	typeref:typename:int	file:
get_cur_path	send.c	/^static int get_cur_path(struct send_ctx *sctx, u64 ino, u64 gen,$/;"	f	typeref:typename:int	file:
get_default_subvol_objectid	super.c	/^static int get_default_subvol_objectid(struct btrfs_fs_info *fs_info, u64 *objectid)$/;"	f	typeref:typename:int	file:
get_discard_list	discard.c	/^static struct list_head *get_discard_list(struct btrfs_discard_ctl *discard_ctl,$/;"	f	typeref:struct:list_head *	file:
get_eb_offset_in_page	extent_io.h	/^static inline size_t get_eb_offset_in_page(const struct extent_buffer *eb,$/;"	f	typeref:typename:size_t
get_eb_page_index	extent_io.h	/^static inline unsigned long get_eb_page_index(unsigned long offset)$/;"	f	typeref:typename:unsigned long
get_extent_allocation_hint	inode.c	/^static u64 get_extent_allocation_hint(struct btrfs_inode *inode, u64 start,$/;"	f	typeref:typename:u64	file:
get_extent_info	scrub.c	/^static void get_extent_info(struct btrfs_path *path, u64 *extent_start_ret,$/;"	f	typeref:typename:void	file:
get_extent_inline_ref	backref.c	/^static int get_extent_inline_ref(unsigned long *ptr,$/;"	f	typeref:typename:int	file:
get_extent_max_capacity	defrag.c	/^static u32 get_extent_max_capacity(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:u32	file:
get_features	sysfs.c	/^static u64 get_features(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:u64	file:
get_first_ref	send.c	/^static int get_first_ref(struct btrfs_root *root, u64 ino,$/;"	f	typeref:typename:int	file:
get_inode_gen	send.c	/^static int get_inode_gen(struct btrfs_root *root, u64 ino, u64 *gen)$/;"	f	typeref:typename:int	file:
get_inode_info	send.c	/^static int get_inode_info(struct btrfs_root *root, u64 ino,$/;"	f	typeref:typename:int	file:
get_inode_path	send.c	/^static int get_inode_path(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
get_last_extent	send.c	/^static int get_last_extent(struct send_ctx *sctx, u64 offset)$/;"	f	typeref:typename:int	file:
get_max_extent_size	free-space-cache.c	/^static inline u64 get_max_extent_size(const struct btrfs_free_space *entry)$/;"	f	typeref:typename:u64	file:
get_new_location	relocation.c	/^static int get_new_location(struct inode *reloc_inode, u64 *new_bytenr,$/;"	f	typeref:typename:int	file:
get_next_extent_buffer	extent_io.c	/^static struct extent_buffer *get_next_extent_buffer($/;"	f	typeref:struct:extent_buffer *	file:
get_orphan_dir_info	send.c	/^static struct orphan_dir_info *get_orphan_dir_info(struct send_ctx *sctx,$/;"	f	typeref:struct:orphan_dir_info *	file:
get_pending_dir_moves	send.c	/^static struct pending_dir_move *get_pending_dir_moves(struct send_ctx *sctx,$/;"	f	typeref:struct:pending_dir_move *	file:
get_prepare_fgp_flags	file.c	/^static fgf_t get_prepare_fgp_flags(bool nowait)$/;"	f	typeref:typename:fgf_t	file:
get_prepare_gfp_flags	file.c	/^static gfp_t get_prepare_gfp_flags(struct inode *inode, bool nowait)$/;"	f	typeref:typename:gfp_t	file:
get_profile_num_devs	block-group.c	/^static u64 get_profile_num_devs(struct btrfs_fs_info *fs_info, u64 type)$/;"	f	typeref:typename:u64	file:
get_raid56_logic_offset	scrub.c	/^static int get_raid56_logic_offset(u64 physical, int num,$/;"	f	typeref:typename:int	file:
get_rbio_veritical_errors	raid56.c	/^static int get_rbio_veritical_errors(struct btrfs_raid_bio *rbio, int sector_nr,$/;"	f	typeref:typename:int	file:
get_restripe_target	block-group.c	/^static u64 get_restripe_target(struct btrfs_fs_info *fs_info, u64 flags)$/;"	f	typeref:typename:u64	file:
get_tree_block_key	relocation.c	/^static int get_tree_block_key(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
get_unaligned_le8	accessors.h	/^static inline u8 get_unaligned_le8(const void *p)$/;"	f	typeref:typename:u8
get_waiting_dir_move	send.c	/^get_waiting_dir_move(struct send_ctx *sctx, u64 ino)$/;"	f	typeref:struct:waiting_dir_move *	file:
get_workspace	compression.c	/^static struct list_head *get_workspace(int type, int level)$/;"	f	typeref:struct:list_head *	file:
gid	send.c	/^	u64 gid;$/;"	m	struct:btrfs_inode_info	typeref:typename:u64	file:
global_block_rsv	fs.h	/^	struct btrfs_block_rsv global_block_rsv;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_block_rsv
global_fs_info_list	fs.h	/^    struct list_head global_fs_info_list; \/\/ Only the first fs_info can use$/;"	m	struct:btrfs_fs_info	typeref:struct:list_head
global_root_cmp	disk-io.c	/^static int global_root_cmp(struct rb_node *a_node, const struct rb_node *b_node)$/;"	f	typeref:typename:int	file:
global_root_id	block-group.h	/^	u64 global_root_id;$/;"	m	struct:btrfs_block_group	typeref:typename:u64
global_root_key_cmp	disk-io.c	/^static int global_root_key_cmp(const void *k, const struct rb_node *node)$/;"	f	typeref:typename:int	file:
global_root_lock	fs.h	/^	rwlock_t global_root_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:rwlock_t
global_root_tree	fs.h	/^	struct rb_root global_root_tree;$/;"	m	struct:btrfs_fs_info	typeref:struct:rb_root
global_rsv_reserved_show	sysfs.c	/^static ssize_t global_rsv_reserved_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
global_rsv_size_show	sysfs.c	/^static ssize_t global_rsv_size_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
grab_extent_buffer	extent_io.c	/^static struct extent_buffer *grab_extent_buffer($/;"	f	typeref:struct:extent_buffer *	file:
group	qgroup.c	/^	struct btrfs_qgroup *group;$/;"	m	struct:btrfs_qgroup_list	typeref:struct:btrfs_qgroup *	file:
groups	qgroup.h	/^	struct list_head groups;  \/* groups this group is member of *\/$/;"	m	struct:btrfs_qgroup	typeref:struct:list_head
groups_sem	space-info.h	/^	struct rw_semaphore groups_sem;$/;"	m	struct:btrfs_space_info	typeref:struct:rw_semaphore
handle_direct_tree_backref	backref.c	/^static int handle_direct_tree_backref(struct btrfs_backref_cache *cache,$/;"	f	typeref:typename:int	file:
handle_indirect_tree_backref	backref.c	/^static int handle_indirect_tree_backref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
handle_missing_device	volumes.c	/^static struct btrfs_device *handle_missing_device(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_device *	file:
handle_ops_on_dev_replace	volumes.c	/^static void handle_ops_on_dev_replace(enum btrfs_map_op op,$/;"	f	typeref:typename:void	file:
handle_reserve_ticket	space-info.c	/^static int handle_reserve_ticket(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
handle_useless_nodes	relocation.c	/^static bool handle_useless_nodes(struct reloc_control *rc,$/;"	f	typeref:typename:bool	file:
has_first_key	tree-checker.h	/^	bool has_first_key;$/;"	m	struct:btrfs_tree_parent_check	typeref:typename:bool
has_single_bit_set	misc.h	/^static inline bool has_single_bit_set(u64 n)$/;"	f	typeref:typename:bool
hash_extent_data_ref	extent-tree.c	/^u64 hash_extent_data_ref(u64 root_objectid, u64 owner, u64 offset)$/;"	f	typeref:typename:u64
hash_extent_data_ref_item	extent-tree.c	/^static u64 hash_extent_data_ref_item(struct extent_buffer *leaf,$/;"	f	typeref:typename:u64	file:
hash_list	raid56.c	/^	struct list_head hash_list;$/;"	m	struct:btrfs_stripe_hash	typeref:struct:list_head	file:
hash_list	raid56.h	/^	struct list_head hash_list;$/;"	m	struct:btrfs_raid_bio	typeref:struct:list_head
have_caching_bg	extent-tree.h	/^	bool have_caching_bg;$/;"	m	struct:find_free_extent_ctl	typeref:typename:bool
have_delayed_delete_refs	backref.c	/^	bool have_delayed_delete_refs;$/;"	m	struct:share_check	typeref:typename:bool	file:
have_reloc_root	relocation.c	/^static bool have_reloc_root(struct btrfs_root *root)$/;"	f	typeref:typename:bool	file:
hdr	check-integrity.c	/^	struct btrfs_header *hdr;$/;"	m	struct:btrfsic_stack_frame	typeref:struct:btrfs_header *	file:
heuristic_collect_sample	compression.c	/^static void heuristic_collect_sample(struct inode *inode, u64 start, u64 end,$/;"	f	typeref:typename:void	file:
heuristic_ws	compression.c	/^struct heuristic_ws {$/;"	s	file:
heuristic_wsm	compression.c	/^static struct workspace_manager heuristic_wsm;$/;"	v	typeref:struct:workspace_manager	file:
highest_ppage	inode.c	/^	u64 highest_ppage;$/;"	m	struct:btrfs_swap_info	typeref:typename:u64	file:
hint_byte	extent-tree.h	/^	u64 hint_byte;$/;"	m	struct:find_free_extent_ctl	typeref:typename:u64
hinted	extent-tree.h	/^	bool hinted;$/;"	m	struct:find_free_extent_ctl	typeref:typename:bool
holder	volumes.h	/^	void *holder;$/;"	m	struct:btrfs_device	typeref:typename:void *
hole_mergeable	file.c	/^static int hole_mergeable(struct btrfs_inode *inode, struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
href_node	delayed-ref.h	/^	struct rb_node href_node;$/;"	m	struct:btrfs_delayed_ref_head	typeref:struct:rb_node
href_root	delayed-ref.h	/^	struct rb_root_cached href_root;$/;"	m	struct:btrfs_delayed_ref_root	typeref:struct:rb_root_cached
htree_insert	delayed-ref.c	/^static struct btrfs_delayed_ref_head *htree_insert(struct rb_root_cached *root,$/;"	f	typeref:struct:btrfs_delayed_ref_head *	file:
i	check-integrity.c	/^	int i;$/;"	m	struct:btrfsic_stack_frame	typeref:typename:int	file:
i_mmap_lock	btrfs_inode.h	/^	struct rw_semaphore i_mmap_lock;$/;"	m	struct:btrfs_inode	typeref:struct:rw_semaphore
i_otime	btrfs_inode.h	/^	struct timespec64 i_otime;$/;"	m	struct:btrfs_inode	typeref:struct:timespec64
id	fs.h	/^    int id;$/;"	m	struct:btrfs_fs_info	typeref:typename:int
id	locking.c	/^	u64			id;		\/* root objectid *\/$/;"	m	struct:btrfs_lockdep_keyset	typeref:typename:u64	file:
id	print-tree.c	/^	u64 id;$/;"	m	struct:root_name_map	typeref:typename:u64	file:
idle_ws	compression.h	/^	struct list_head idle_ws;$/;"	m	struct:workspace_manager	typeref:struct:list_head
idle_ws	zstd.c	/^	struct list_head idle_ws[ZSTD_BTRFS_MAX_LEVEL];$/;"	m	struct:zstd_workspace_manager	typeref:struct:list_head[]	file:
ignore	props.c	/^	bool (*ignore)(const struct btrfs_inode *inode);$/;"	m	struct:prop_handler	typeref:typename:bool (*)(const struct btrfs_inode * inode)	file:
ignore_cur_inode	send.c	/^	bool ignore_cur_inode;$/;"	m	struct:send_ctx	typeref:typename:bool	file:
ignore_cur_inode	tree-log.c	/^	bool ignore_cur_inode;$/;"	m	struct:walk_control	typeref:typename:bool	file:
ignore_extent_item_pos	backref.h	/^	bool ignore_extent_item_pos;$/;"	m	struct:btrfs_backref_walk_ctx	typeref:typename:bool
ilog2_w	compression.c	/^static inline u32 ilog2_w(u64 n)$/;"	f	typeref:typename:u32	file:
in_buf	zstd.c	/^	zstd_in_buffer in_buf;$/;"	m	struct:workspace	typeref:typename:zstd_in_buffer	file:
in_fsync	transaction.h	/^	bool in_fsync;$/;"	m	struct:btrfs_trans_handle	typeref:typename:bool
inc_block_group_ro	block-group.c	/^static int inc_block_group_ro(struct btrfs_block_group *cache, int force)$/;"	f	typeref:typename:int	file:
include_extent_data	check-integrity.c	/^	int include_extent_data;$/;"	m	struct:btrfsic_state	typeref:typename:int	file:
inconsistent_snapshot_error	send.c	/^static void inconsistent_snapshot_error(struct send_ctx *sctx,$/;"	f	typeref:typename:__cold void	file:
index	delayed-inode.h	/^	u64 index;$/;"	m	struct:btrfs_delayed_item	typeref:typename:u64
index	extent-tree.h	/^	int index;$/;"	m	struct:find_free_extent_ctl	typeref:typename:int
index	free-space-cache.h	/^	int index;$/;"	m	struct:btrfs_io_ctl	typeref:typename:int
index	inode.c	/^	u64 index;$/;"	m	struct:btrfs_rename_ctx	typeref:typename:u64	file:
index_cnt	btrfs_inode.h	/^	u64 index_cnt;$/;"	m	struct:btrfs_inode	typeref:typename:u64
index_cnt	delayed-inode.h	/^	u64 index_cnt;$/;"	m	struct:btrfs_delayed_node	typeref:typename:u64
index_item_leaves	delayed-inode.h	/^	u32 index_item_leaves;$/;"	m	struct:btrfs_delayed_node	typeref:typename:u32
index_one_bio	raid56.c	/^static void index_one_bio(struct btrfs_raid_bio *rbio, struct bio *bio)$/;"	f	typeref:typename:void	file:
index_rbio_pages	raid56.c	/^static void index_rbio_pages(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:void	file:
index_stripe_sectors	raid56.c	/^static void index_stripe_sectors(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:void	file:
indirect	backref.c	/^	struct preftree indirect;  \/* BTRFS_[TREE_BLOCK|EXTENT_DATA]_REF_KEY *\/$/;"	m	struct:preftrees	typeref:struct:preftree	file:
indirect_missing_keys	backref.c	/^	struct preftree indirect_missing_keys;$/;"	m	struct:preftrees	typeref:struct:preftree	file:
indirect_ref_iterator	backref.h	/^	iterate_extent_inodes_t *indirect_ref_iterator;$/;"	m	struct:btrfs_backref_walk_ctx	typeref:typename:iterate_extent_inodes_t *
info	raid56.c	/^	struct btrfs_fs_info *info;$/;"	m	struct:btrfs_plug_cb	typeref:struct:btrfs_fs_info *	file:
inherit	transaction.h	/^	struct btrfs_qgroup_inherit *inherit;$/;"	m	struct:btrfs_pending_snapshot	typeref:struct:btrfs_qgroup_inherit *
inheritable	props.c	/^	int inheritable;$/;"	m	struct:prop_handler	typeref:typename:int	file:
init_alloc_chunk_ctl	volumes.c	/^static void init_alloc_chunk_ctl(struct btrfs_fs_devices *fs_devices,$/;"	f	typeref:typename:void	file:
init_alloc_chunk_ctl_policy_regular	volumes.c	/^static void init_alloc_chunk_ctl_policy_regular($/;"	f	typeref:typename:void	file:
init_alloc_chunk_ctl_policy_zoned	volumes.c	/^static void init_alloc_chunk_ctl_policy_zoned($/;"	f	typeref:typename:void	file:
init_btrfs_fs	super.c	/^static int __init init_btrfs_fs(void)$/;"	f	typeref:typename:int __init	file:
init_data_container	backref.c	/^struct btrfs_data_container *init_data_container(u32 total_bytes)$/;"	f	typeref:struct:btrfs_data_container *
init_delayed_ref_common	delayed-ref.c	/^static void init_delayed_ref_common(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
init_delayed_ref_head	delayed-ref.c	/^static void init_delayed_ref_head(struct btrfs_delayed_ref_head *head_ref,$/;"	f	typeref:typename:void	file:
init_eb_and_memory	tests/extent-io-tests.c	/^static void init_eb_and_memory(struct extent_buffer *eb, void *memory)$/;"	f	typeref:typename:void	file:
init_error_bitmap	scrub.c	/^	unsigned long init_error_bitmap;$/;"	m	struct:scrub_stripe	typeref:typename:unsigned long	file:
init_feature_attrs	sysfs.c	/^static void init_feature_attrs(void)$/;"	f	typeref:typename:void	file:
init_first_rw_device	volumes.c	/^static noinline int init_first_rw_device(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:noinline int	file:
init_func	super.c	/^	int (*init_func)(void);$/;"	m	struct:init_sequence	typeref:typename:int (*)(void)	file:
init_ipath	backref.c	/^struct inode_fs_paths *init_ipath(s32 total_bytes, struct btrfs_root *fs_root,$/;"	f	typeref:struct:inode_fs_paths *
init_mount_fs_info	disk-io.c	/^static int init_mount_fs_info(struct btrfs_fs_info *fs_info, struct super_block *sb)$/;"	f	typeref:typename:int	file:
init_nr_csum_errors	scrub.c	/^	unsigned int init_nr_csum_errors;$/;"	m	struct:scrub_stripe	typeref:typename:unsigned int	file:
init_nr_io_errors	scrub.c	/^	unsigned int init_nr_io_errors;$/;"	m	struct:scrub_stripe	typeref:typename:unsigned int	file:
init_nr_meta_errors	scrub.c	/^	unsigned int init_nr_meta_errors;$/;"	m	struct:scrub_stripe	typeref:typename:unsigned int	file:
init_once	inode.c	/^static void init_once(void *foo)$/;"	f	typeref:typename:void	file:
init_scrub_stripe	scrub.c	/^static int init_scrub_stripe(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
init_sequence	super.c	/^struct init_sequence {$/;"	s	file:
init_tree_roots	disk-io.c	/^static int __cold init_tree_roots(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int __cold	file:
inline_buf	send.c	/^			char inline_buf[];$/;"	m	struct:fs_path::__anon1b81f160010a::__anon1b81f1600208	typeref:typename:char[]	file:
ino	defrag.c	/^	u64 ino;$/;"	m	struct:inode_defrag	typeref:typename:u64	file:
ino	delayed-ref.h	/^	u64 ino;$/;"	m	struct:btrfs_data_ref	typeref:typename:u64
ino	inode-item.h	/^	u64 ino;$/;"	m	struct:btrfs_truncate_control	typeref:typename:u64
ino	inode.c	/^	u64 ino;$/;"	m	struct:btrfs_iget_args	typeref:typename:u64	file:
ino	inode.c	/^	u64 ino;$/;"	m	struct:dir_entry	typeref:typename:u64	file:
ino	send.c	/^	u64 ino;$/;"	m	struct:clone_root	typeref:typename:u64	file:
ino	send.c	/^	u64 ino;$/;"	m	struct:orphan_dir_info	typeref:typename:u64	file:
ino	send.c	/^	u64 ino;$/;"	m	struct:pending_dir_move	typeref:typename:u64	file:
ino	send.c	/^	u64 ino;$/;"	m	struct:waiting_dir_move	typeref:typename:u64	file:
ino	tree-log.c	/^	u64 ino;$/;"	m	struct:btrfs_dir_list	typeref:typename:u64	file:
ino	tree-log.c	/^	u64 ino;$/;"	m	struct:btrfs_ino_list	typeref:typename:u64	file:
inode	bio.h	/^	struct btrfs_inode *inode;$/;"	m	struct:btrfs_bio	typeref:struct:btrfs_inode *
inode	block-group.h	/^	struct inode *inode;$/;"	m	struct:btrfs_block_group	typeref:struct:inode *
inode	btrfs_inode.h	/^	struct inode *inode;$/;"	m	struct:btrfs_new_inode_args	typeref:struct:inode *
inode	extent-io-tree.h	/^	struct btrfs_inode *inode;$/;"	m	struct:extent_io_tree	typeref:struct:btrfs_inode *
inode	extent_io.c	/^	struct btrfs_inode *inode;$/;"	m	struct:processed_extent	typeref:struct:btrfs_inode *	file:
inode	free-space-cache.h	/^	struct inode *inode;$/;"	m	struct:btrfs_io_ctl	typeref:struct:inode *
inode	inode-item.h	/^	struct btrfs_inode *inode;$/;"	m	struct:btrfs_truncate_control	typeref:struct:btrfs_inode *
inode	inode.c	/^	struct btrfs_inode *inode;$/;"	m	struct:async_chunk	typeref:struct:btrfs_inode *	file:
inode	inode.c	/^	struct btrfs_inode *inode;$/;"	m	struct:btrfs_writepage_fixup	typeref:struct:btrfs_inode *	file:
inode	inode.c	/^	struct inode *inode;$/;"	m	struct:btrfs_delalloc_work	typeref:struct:inode *	file:
inode	ordered-data.h	/^	struct inode *inode;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:inode *
inode	tree-log.h	/^	struct inode *inode;$/;"	m	struct:btrfs_log_ctx	typeref:struct:inode *
inode	volumes.h	/^	struct inode *inode;$/;"	m	struct:btrfs_swapfile_pin	typeref:struct:inode *
inode_defrag	defrag.c	/^struct inode_defrag {$/;"	s	file:
inode_fs_paths	backref.h	/^struct inode_fs_paths {$/;"	s
inode_id	delayed-inode.h	/^	u64 inode_id;$/;"	m	struct:btrfs_delayed_node	typeref:typename:u64
inode_in_dir	tree-log.c	/^static noinline int inode_in_dir(struct btrfs_root *root,$/;"	f	typeref:typename:noinline int	file:
inode_item	delayed-inode.h	/^	struct btrfs_inode_item inode_item;$/;"	m	struct:btrfs_delayed_node	typeref:struct:btrfs_inode_item
inode_item_err	tree-checker.c	/^#define inode_item_err(/;"	d	file:
inode_list	backref.h	/^	struct extent_inode_elem *inode_list;$/;"	m	struct:prelim_ref	typeref:struct:extent_inode_elem *
inode_lock	ctree.h	/^	spinlock_t inode_lock;$/;"	m	struct:btrfs_root	typeref:typename:spinlock_t
inode_logged	tree-log.c	/^static int inode_logged(const struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
inode_need_compress	inode.c	/^static inline int inode_need_compress(struct btrfs_inode *inode, u64 start,$/;"	f	typeref:typename:int	file:
inode_prop_iterator	props.c	/^static void inode_prop_iterator(void *ctx,$/;"	f	typeref:typename:void	file:
inode_ref_err	tree-checker.c	/^#define inode_ref_err(/;"	d	file:
inode_should_defrag	inode.c	/^static inline void inode_should_defrag(struct btrfs_inode *inode,$/;"	f	typeref:typename:void	file:
inode_state	send.c	/^enum inode_state {$/;"	g	file:
inode_state_did_create	send.c	/^	inode_state_did_create,$/;"	e	enum:inode_state	file:
inode_state_did_delete	send.c	/^	inode_state_did_delete,$/;"	e	enum:inode_state	file:
inode_state_no_change	send.c	/^	inode_state_no_change,$/;"	e	enum:inode_state	file:
inode_state_will_create	send.c	/^	inode_state_will_create,$/;"	e	enum:inode_state	file:
inode_state_will_delete	send.c	/^	inode_state_will_delete,$/;"	e	enum:inode_state	file:
inode_to_path	backref.c	/^static int inode_to_path(u64 inum, u32 name_len, unsigned long name_off,$/;"	f	typeref:typename:int	file:
inode_tree	ctree.h	/^	struct rb_root inode_tree;$/;"	m	struct:btrfs_root	typeref:struct:rb_root
inode_tree_add	inode.c	/^static void inode_tree_add(struct btrfs_inode *inode)$/;"	f	typeref:typename:void	file:
inode_tree_del	inode.c	/^static void inode_tree_del(struct btrfs_inode *inode)$/;"	f	typeref:typename:void	file:
ins_root	delayed-inode.h	/^	struct rb_root_cached ins_root;$/;"	m	struct:btrfs_delayed_node	typeref:struct:rb_root_cached
insert_balance_item	volumes.c	/^static int insert_balance_item(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
insert_block_entry	ref-verify.c	/^static struct block_entry *insert_block_entry(struct rb_root *root,$/;"	f	typeref:struct:block_entry *	file:
insert_block_group_item	block-group.c	/^static int insert_block_group_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
insert_delayed_items_batch	tree-log.c	/^static int insert_delayed_items_batch(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
insert_delayed_ref	delayed-ref.c	/^static bool insert_delayed_ref(struct btrfs_delayed_ref_root *root,$/;"	f	typeref:typename:bool	file:
insert_dev_extent	block-group.c	/^static int insert_dev_extent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
insert_dev_extents	block-group.c	/^static int insert_dev_extents(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
insert_dir_log_key	tree-log.c	/^static noinline int insert_dir_log_key(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
insert_dirty_subvol	relocation.c	/^static int insert_dirty_subvol(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
insert_extent	tests/inode-tests.c	/^static void insert_extent(struct btrfs_root *root, u64 start, u64 len,$/;"	f	typeref:typename:void	file:
insert_extent_data_ref	extent-tree.c	/^static noinline int insert_extent_data_ref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
insert_inline_extent	inode.c	/^static int insert_inline_extent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
insert_inline_extent_backref	extent-tree.c	/^int insert_inline_extent_backref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline_for_stack int	file:
insert_inode_item_key	tests/inode-tests.c	/^static void insert_inode_item_key(struct btrfs_root *root)$/;"	f	typeref:typename:void	file:
insert_into_bitmap	free-space-cache.c	/^static int insert_into_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:int	file:
insert_new_root	ctree.c	/^static noinline int insert_new_root(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
insert_normal_tree_ref	tests/qgroup-tests.c	/^static int insert_normal_tree_ref(struct btrfs_root *root, u64 bytenr,$/;"	f	typeref:typename:int	file:
insert_one_name	tree-log.c	/^static noinline int insert_one_name(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
insert_ordered_extent	ordered-data.c	/^static void insert_ordered_extent(struct btrfs_ordered_extent *entry)$/;"	f	typeref:typename:void	file:
insert_ordered_extent_file_extent	inode.c	/^static int insert_ordered_extent_file_extent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
insert_prealloc_file_extent	inode.c	/^static struct btrfs_trans_handle *insert_prealloc_file_extent($/;"	f	typeref:struct:btrfs_trans_handle *	file:
insert_ptr	ctree.c	/^static int insert_ptr(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
insert_ref_entry	ref-verify.c	/^static struct ref_entry *insert_ref_entry(struct rb_root *root,$/;"	f	typeref:struct:ref_entry *	file:
insert_reserved_file_extent	inode.c	/^static int insert_reserved_file_extent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
insert_root_entry	ref-verify.c	/^static struct root_entry *insert_root_entry(struct rb_root *root,$/;"	f	typeref:struct:root_entry *	file:
insert_state	extent-io-tree.c	/^static int insert_state(struct extent_io_tree *tree,$/;"	f	typeref:typename:int	file:
insert_state_fast	extent-io-tree.c	/^static void insert_state_fast(struct extent_io_tree *tree,$/;"	f	typeref:typename:void	file:
insert_tree_block_ref	extent-tree.c	/^static noinline int insert_tree_block_ref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
insert_with_overflow	dir-item.c	/^static struct btrfs_dir_item *insert_with_overflow(struct btrfs_trans_handle$/;"	f	typeref:struct:btrfs_dir_item *	file:
insertions	ctree.h	/^	int insertions;$/;"	m	struct:btrfs_replace_extent_info	typeref:typename:int
install	Makefile	/^install:$/;"	t
inum	backref.c	/^	u64 inum;$/;"	m	struct:extent_inode_elem	typeref:typename:u64	file:
inum	backref.c	/^	u64 inum;$/;"	m	struct:share_check	typeref:typename:u64	file:
invalidate_extent_cache	relocation.c	/^static int invalidate_extent_cache(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
io_align	volumes.h	/^	int io_align;$/;"	m	struct:map_lookup	typeref:typename:int
io_align	volumes.h	/^	u32 io_align;$/;"	m	struct:btrfs_device	typeref:typename:u32
io_bgs	transaction.h	/^	struct list_head io_bgs;$/;"	m	struct:btrfs_transaction	typeref:struct:list_head
io_ctl	block-group.h	/^	struct btrfs_io_ctl io_ctl;$/;"	m	struct:btrfs_block_group	typeref:struct:btrfs_io_ctl
io_ctl_add_bitmap	free-space-cache.c	/^static int io_ctl_add_bitmap(struct btrfs_io_ctl *io_ctl, void *bitmap)$/;"	f	typeref:typename:int	file:
io_ctl_add_entry	free-space-cache.c	/^static int io_ctl_add_entry(struct btrfs_io_ctl *io_ctl, u64 offset, u64 bytes,$/;"	f	typeref:typename:int	file:
io_ctl_check_crc	free-space-cache.c	/^static int io_ctl_check_crc(struct btrfs_io_ctl *io_ctl, int index)$/;"	f	typeref:typename:int	file:
io_ctl_check_generation	free-space-cache.c	/^static int io_ctl_check_generation(struct btrfs_io_ctl *io_ctl, u64 generation)$/;"	f	typeref:typename:int	file:
io_ctl_drop_pages	free-space-cache.c	/^static void io_ctl_drop_pages(struct btrfs_io_ctl *io_ctl)$/;"	f	typeref:typename:void	file:
io_ctl_free	free-space-cache.c	/^static void io_ctl_free(struct btrfs_io_ctl *io_ctl)$/;"	f	typeref:typename:void	file:
io_ctl_init	free-space-cache.c	/^static int io_ctl_init(struct btrfs_io_ctl *io_ctl, struct inode *inode,$/;"	f	typeref:typename:int	file:
io_ctl_map_page	free-space-cache.c	/^static void io_ctl_map_page(struct btrfs_io_ctl *io_ctl, int clear)$/;"	f	typeref:typename:void	file:
io_ctl_prepare_pages	free-space-cache.c	/^static int io_ctl_prepare_pages(struct btrfs_io_ctl *io_ctl, bool uptodate)$/;"	f	typeref:typename:int	file:
io_ctl_read_bitmap	free-space-cache.c	/^static int io_ctl_read_bitmap(struct btrfs_io_ctl *io_ctl,$/;"	f	typeref:typename:int	file:
io_ctl_read_entry	free-space-cache.c	/^static int io_ctl_read_entry(struct btrfs_io_ctl *io_ctl,$/;"	f	typeref:typename:int	file:
io_ctl_set_crc	free-space-cache.c	/^static void io_ctl_set_crc(struct btrfs_io_ctl *io_ctl, int index)$/;"	f	typeref:typename:void	file:
io_ctl_set_generation	free-space-cache.c	/^static void io_ctl_set_generation(struct btrfs_io_ctl *io_ctl, u64 generation)$/;"	f	typeref:typename:void	file:
io_ctl_unmap_page	free-space-cache.c	/^static void io_ctl_unmap_page(struct btrfs_io_ctl *io_ctl)$/;"	f	typeref:typename:void	file:
io_ctl_zero_remaining_pages	free-space-cache.c	/^static void io_ctl_zero_remaining_pages(struct btrfs_io_ctl *io_ctl)$/;"	f	typeref:typename:void	file:
io_error_bitmap	scrub.c	/^	unsigned long io_error_bitmap;$/;"	m	struct:scrub_stripe	typeref:typename:unsigned long	file:
io_list	block-group.h	/^	struct list_head io_list;$/;"	m	struct:btrfs_block_group	typeref:struct:list_head
io_tree	btrfs_inode.h	/^	struct extent_io_tree io_tree;$/;"	m	struct:btrfs_inode	typeref:struct:extent_io_tree
io_wait	raid56.h	/^	wait_queue_head_t io_wait;$/;"	m	struct:btrfs_raid_bio	typeref:typename:wait_queue_head_t
io_wait	scrub.c	/^	wait_queue_head_t io_wait;$/;"	m	struct:scrub_stripe	typeref:typename:wait_queue_head_t	file:
io_width	volumes.h	/^	int io_width;$/;"	m	struct:map_lookup	typeref:typename:int
io_width	volumes.h	/^	u32 io_width;$/;"	m	struct:btrfs_device	typeref:typename:u32
iodone_w_error	check-integrity.c	/^	unsigned int iodone_w_error:1;	\/* error was indicated to endio *\/$/;"	m	struct:btrfsic_block	typeref:typename:unsigned int:1	file:
iops_limit	fs.h	/^	u32 iops_limit;$/;"	m	struct:btrfs_discard_ctl	typeref:typename:u32
iov	ioctl.c	/^	compat_uptr_t iov;$/;"	m	struct:btrfs_ioctl_encoded_io_args_32	typeref:typename:compat_uptr_t	file:
iovcnt	ioctl.c	/^	compat_ulong_t iovcnt;$/;"	m	struct:btrfs_ioctl_encoded_io_args_32	typeref:typename:compat_ulong_t	file:
is_ancestor	send.c	/^static int is_ancestor(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
is_block_group	volumes.h	/^	bool is_block_group;$/;"	m	struct:btrfs_swapfile_pin	typeref:typename:bool
is_block_group_to_copy	volumes.c	/^static bool is_block_group_to_copy(struct btrfs_fs_info *fs_info, u64 logical)$/;"	f	typeref:typename:bool	file:
is_data	delayed-ref.h	/^	bool is_data;$/;"	m	struct:btrfs_delayed_ref_head	typeref:typename:bool
is_data_bbio	bio.c	/^static inline bool is_data_bbio(struct btrfs_bio *bbio)$/;"	f	typeref:typename:bool	file:
is_data_inode	btrfs_inode.h	/^static inline bool is_data_inode(struct inode *inode)$/;"	f	typeref:typename:bool
is_data_stripe	raid56.c	/^static inline int is_data_stripe(struct btrfs_raid_bio *rbio, int stripe)$/;"	f	typeref:typename:int	file:
is_data_stripe_page	raid56.c	/^static bool is_data_stripe_page(struct btrfs_raid_bio *rbio, int page_nr)$/;"	f	typeref:typename:bool	file:
is_dev_replace	scrub.c	/^	int			is_dev_replace;$/;"	m	struct:scrub_ctx	typeref:typename:int	file:
is_extent_unchanged	send.c	/^static int is_extent_unchanged(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
is_first_ref	send.c	/^static int is_first_ref(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
is_fstree	ctree.h	/^static inline int is_fstree(u64 rootid)$/;"	f	typeref:typename:int
is_inode_existent	send.c	/^static int is_inode_existent(struct send_ctx *sctx, u64 ino, u64 gen,$/;"	f	typeref:typename:int	file:
is_iodone	check-integrity.c	/^	unsigned int is_iodone:1;	\/* if is done by lower subsystem *\/$/;"	m	struct:btrfsic_block	typeref:typename:unsigned int:1	file:
is_last_leaf	qgroup.c	/^static bool is_last_leaf(struct btrfs_path *path)$/;"	f	typeref:typename:bool	file:
is_metadata	check-integrity.c	/^	unsigned int is_metadata:1;	\/* if it is meta-data, not data-data *\/$/;"	m	struct:btrfsic_block	typeref:typename:unsigned int:1	file:
is_metadata	scrub.c	/^	bool is_metadata;$/;"	m	struct:scrub_sector_verification	typeref:typename:bool	file:
is_new_extent	ctree.h	/^	bool is_new_extent;$/;"	m	struct:btrfs_replace_extent_info	typeref:typename:bool
is_normal_flushing	space-info.c	/^static inline bool is_normal_flushing(enum btrfs_reserve_flush_enum flush)$/;"	f	typeref:typename:bool	file:
is_parity_stripe	raid56.h	/^#define is_parity_stripe(/;"	d
is_power_of_two_u64	misc.h	/^static inline bool is_power_of_two_u64(u64 n)$/;"	f	typeref:typename:bool
is_reloc	backref.h	/^	unsigned int is_reloc;$/;"	m	struct:btrfs_backref_cache	typeref:typename:unsigned int
is_reloc_root	backref.h	/^	unsigned int is_reloc_root:1;$/;"	m	struct:btrfs_backref_node	typeref:typename:unsigned int:1
is_sb_log_zone	zoned.c	/^static inline bool is_sb_log_zone(struct btrfs_zoned_device_info *zinfo,$/;"	f	typeref:typename:bool	file:
is_shared	backref.h	/^		bool is_shared;$/;"	m	struct:btrfs_backref_share_check_ctx::__anond556f4290108	typeref:typename:bool
is_shared	backref.h	/^	bool is_shared;$/;"	m	struct:btrfs_backref_shared_cache_entry	typeref:typename:bool
is_shared_data_backref	backref.c	/^static int is_shared_data_backref(struct preftrees *preftrees, u64 bytenr)$/;"	f	typeref:typename:int	file:
is_subvolume_inode	super.c	/^static inline int is_subvolume_inode(struct inode *inode)$/;"	f	typeref:typename:int	file:
is_superblock	check-integrity.c	/^	unsigned int is_superblock:1;	\/* if it is one of the superblocks *\/$/;"	m	struct:btrfsic_block	typeref:typename:unsigned int:1	file:
is_system	delayed-ref.h	/^	bool is_system;$/;"	m	struct:btrfs_delayed_ref_head	typeref:typename:bool
is_transaction_blocked	transaction.c	/^static inline int is_transaction_blocked(struct btrfs_transaction *trans)$/;"	f	typeref:typename:int	file:
is_valid	fs.h	/^	int is_valid;$/;"	m	struct:btrfs_dev_replace	typeref:typename:int
is_waiting_for_move	send.c	/^static int is_waiting_for_move(struct send_ctx *sctx, u64 ino)$/;"	f	typeref:typename:int	file:
is_waiting_for_rm	send.c	/^static int is_waiting_for_rm(struct send_ctx *sctx, u64 dir_ino, u64 gen)$/;"	f	typeref:typename:int	file:
item_needs_writeback	fs.h	/^	int item_needs_writeback;$/;"	m	struct:btrfs_dev_replace	typeref:typename:int
item_ptr	backref.h	/^	u32 item_ptr;$/;"	m	struct:btrfs_backref_iter	typeref:typename:u32
items	delayed-inode.h	/^	atomic_t items;		\/* for delayed items *\/$/;"	m	struct:btrfs_delayed_root	typeref:typename:atomic_t
items_seq	delayed-inode.h	/^	atomic_t items_seq;	\/* for delayed items *\/$/;"	m	struct:btrfs_delayed_root	typeref:typename:atomic_t
iterate_backrefs	send.c	/^static int iterate_backrefs(u64 ino, u64 offset, u64 num_bytes, u64 root_id,$/;"	f	typeref:typename:int	file:
iterate_dir_item	send.c	/^static int iterate_dir_item(struct btrfs_root *root, struct btrfs_path *path,$/;"	f	typeref:typename:int	file:
iterate_dir_item_t	send.c	/^typedef int (*iterate_dir_item_t)(int num, struct btrfs_key *di_key,$/;"	t	typeref:typename:int (*)(int num,struct btrfs_key * di_key,const char * name,int name_len,const char * data,int data_len,void * ctx)	file:
iterate_extent_inodes	backref.c	/^int iterate_extent_inodes(struct btrfs_backref_walk_ctx *ctx,$/;"	f	typeref:typename:int
iterate_extent_inodes_t	backref.h	/^typedef int (iterate_extent_inodes_t)(u64 inum, u64 offset, u64 num_bytes,$/;"	t	typeref:typename:int ()(u64 inum,u64 offset,u64 num_bytes,u64 root,void * ctx)
iterate_inode_extrefs	backref.c	/^static int iterate_inode_extrefs(u64 inum, struct inode_fs_paths *ipath)$/;"	f	typeref:typename:int	file:
iterate_inode_ref	send.c	/^static int iterate_inode_ref(struct btrfs_root *root, struct btrfs_path *path,$/;"	f	typeref:typename:int	file:
iterate_inode_ref_t	send.c	/^typedef int (*iterate_inode_ref_t)(int num, u64 dir, int index,$/;"	t	typeref:typename:int (*)(int num,u64 dir,int index,struct fs_path * p,void * ctx)	file:
iterate_inode_refs	backref.c	/^static int iterate_inode_refs(u64 inum, struct inode_fs_paths *ipath)$/;"	f	typeref:typename:int	file:
iterate_inodes_from_logical	backref.c	/^int iterate_inodes_from_logical(u64 logical, struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int
iterate_leaf_refs	backref.c	/^static int iterate_leaf_refs(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
iterate_object_props	props.c	/^static int iterate_object_props(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
join_running_log_trans	tree-log.c	/^static int join_running_log_trans(struct btrfs_root *root)$/;"	f	typeref:typename:int	file:
join_transaction	transaction.c	/^static noinline int join_transaction(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:noinline int	file:
kaddr	accessors.h	/^	char *kaddr;$/;"	m	struct:btrfs_map_token	typeref:typename:char *
kbps_limit	fs.h	/^	u32 kbps_limit;$/;"	m	struct:btrfs_discard_ctl	typeref:typename:u32
keep_locks	ctree.h	/^	unsigned int keep_locks:1;$/;"	m	struct:btrfs_path	typeref:typename:unsigned int:1
keep_locks	extent-tree.c	/^	int keep_locks;$/;"	m	struct:walk_control	typeref:typename:int	file:
key	delayed-ref.h	/^	struct btrfs_disk_key key;$/;"	m	struct:btrfs_delayed_extent_op	typeref:struct:btrfs_disk_key
key	lru_cache.h	/^	u64 key;$/;"	m	struct:btrfs_lru_cache_entry	typeref:typename:u64
key	relocation.c	/^	struct btrfs_key key;$/;"	m	struct:tree_block	typeref:struct:btrfs_key	file:
key	tree-mod-log.c	/^	struct btrfs_disk_key key;$/;"	m	struct:tree_mod_elem	typeref:struct:btrfs_disk_key	file:
key_for_search	backref.h	/^	struct btrfs_key key_for_search;$/;"	m	struct:prelim_ref	typeref:struct:btrfs_key
key_in_sk	ioctl.c	/^static noinline int key_in_sk(struct btrfs_key *key,$/;"	f	typeref:typename:noinline int	file:
key_ready	relocation.c	/^	unsigned int key_ready:1;$/;"	m	struct:tree_block	typeref:typename:unsigned int:1	file:
keys	ctree.h	/^	const struct btrfs_key *keys;$/;"	m	struct:btrfs_item_batch	typeref:typename:const struct btrfs_key *
keys	locking.c	/^	struct lock_class_key	keys[BTRFS_MAX_LEVEL];$/;"	m	struct:btrfs_lockdep_keyset	typeref:struct:lock_class_key[]	file:
kobj	qgroup.h	/^	struct kobject kobj;$/;"	m	struct:btrfs_qgroup	typeref:struct:kobject
kobj	space-info.h	/^	struct kobject kobj;$/;"	m	struct:btrfs_space_info	typeref:struct:kobject
kobj	sysfs.c	/^	struct kobject kobj;$/;"	m	struct:raid_kobject	typeref:struct:kobject	file:
kobj_attr	sysfs.c	/^	struct kobj_attribute kobj_attr;$/;"	m	struct:btrfs_feature_attr	typeref:struct:kobj_attribute	file:
kobj_unregister	volumes.h	/^	struct completion kobj_unregister;$/;"	m	struct:btrfs_device	typeref:struct:completion
kobj_unregister	volumes.h	/^	struct completion kobj_unregister;$/;"	m	struct:btrfs_fs_devices	typeref:struct:completion
ktget	calclock/calclock.h	/^#define ktget(/;"	d
ktget	calclock/calclock.h	/^static inline void ktget(ktime_t *clock)$/;"	f	typeref:typename:void
ktprint	calclock/calclock.h	/^#define ktprint(/;"	d
ktput	calclock/calclock.h	/^#define ktput(/;"	d
last	ordered-data.h	/^	struct rb_node *last;$/;"	m	struct:btrfs_ordered_inode_tree	typeref:struct:rb_node *
last_commit_dur	fs.h	/^	u64 last_commit_dur;$/;"	m	struct:btrfs_commit_stats	typeref:typename:u64
last_dir_index_offset	btrfs_inode.h	/^		u64 last_dir_index_offset;$/;"	m	union:btrfs_inode::__anon98c21faa030a	typeref:typename:u64
last_dir_index_offset	send.c	/^	u64 last_dir_index_offset;$/;"	m	struct:orphan_dir_info	typeref:typename:u64	file:
last_eb	block-group.h	/^	struct extent_buffer *last_eb;$/;"	m	struct:btrfs_block_group	typeref:struct:extent_buffer *
last_flush_error	volumes.h	/^	blk_status_t last_flush_error;$/;"	m	struct:btrfs_device	typeref:typename:blk_status_t
last_flush_gen	check-integrity.c	/^	u64 last_flush_gen;$/;"	m	struct:btrfsic_dev_state	typeref:typename:u64	file:
last_index	ctree.h	/^	u64 last_index;$/;"	m	struct:btrfs_file_private	typeref:typename:u64
last_log_commit	btrfs_inode.h	/^	int last_log_commit;$/;"	m	struct:btrfs_inode	typeref:typename:int
last_log_commit	ctree.h	/^	int last_log_commit;$/;"	m	struct:btrfs_root	typeref:typename:int
last_ptr	extent-tree.h	/^	struct btrfs_free_cluster *last_ptr;$/;"	m	struct:find_free_extent_ctl	typeref:struct:btrfs_free_cluster *
last_reflink_trans	btrfs_inode.h	/^	u64 last_reflink_trans;$/;"	m	struct:btrfs_inode	typeref:typename:u64
last_reloc_trans	fs.h	/^	u64 last_reloc_trans;$/;"	m	struct:btrfs_fs_info	typeref:typename:u64
last_reloc_trans	send.c	/^	u64 last_reloc_trans;$/;"	m	struct:send_ctx	typeref:typename:u64	file:
last_root_drop_gen	fs.h	/^	u64 last_root_drop_gen;$/;"	m	struct:btrfs_fs_info	typeref:typename:u64
last_size	inode-item.h	/^	u64 last_size;$/;"	m	struct:btrfs_truncate_control	typeref:typename:u64
last_snapshot	qgroup.h	/^	u64 last_snapshot;$/;"	m	struct:btrfs_qgroup_swapped_block	typeref:typename:u64
last_sub_trans	btrfs_inode.h	/^	int last_sub_trans;$/;"	m	struct:btrfs_inode	typeref:typename:int
last_trans	backref.h	/^	u64 last_trans;$/;"	m	struct:btrfs_backref_cache	typeref:typename:u64
last_trans	btrfs_inode.h	/^	u64 last_trans;$/;"	m	struct:btrfs_inode	typeref:typename:u64
last_trans	ctree.h	/^	u64 last_trans;$/;"	m	struct:btrfs_root	typeref:typename:u64
last_trans_committed	fs.h	/^	u64 last_trans_committed;$/;"	m	struct:btrfs_fs_info	typeref:typename:u64
last_trans_log_full_commit	fs.h	/^	u64 last_trans_log_full_commit;$/;"	m	struct:btrfs_fs_info	typeref:typename:u64
last_unlink_trans	btrfs_inode.h	/^	u64 last_unlink_trans;$/;"	m	struct:btrfs_inode	typeref:typename:u64
last_used	zstd.c	/^	unsigned long last_used; \/* jiffies *\/$/;"	m	struct:workspace	typeref:typename:unsigned long	file:
latest_dev	volumes.h	/^	struct btrfs_device *latest_dev;$/;"	m	struct:btrfs_fs_devices	typeref:struct:btrfs_device *
latest_generation	volumes.h	/^	u64 latest_generation;$/;"	m	struct:btrfs_fs_devices	typeref:typename:u64
latest_superblock	check-integrity.c	/^	struct btrfsic_block *latest_superblock;$/;"	m	struct:btrfsic_state	typeref:struct:btrfsic_block *	file:
le8_to_cpu	accessors.h	/^#define le8_to_cpu(/;"	d
le_bitmap_set	free-space-tree.c	/^static void le_bitmap_set(unsigned long *map, unsigned int start, int len)$/;"	f	typeref:typename:void	file:
leaf_data_end	ctree.c	/^static unsigned int leaf_data_end(const struct extent_buffer *leaf)$/;"	f	typeref:typename:unsigned int	file:
leaf_space_used	ctree.c	/^static int leaf_space_used(const struct extent_buffer *l, int start, int nr)$/;"	f	typeref:typename:int	file:
leak_list	ctree.h	/^	struct list_head leak_list;$/;"	m	struct:btrfs_root	typeref:struct:list_head
leak_list	extent-io-tree.h	/^	struct list_head leak_list;$/;"	m	struct:extent_state	typeref:struct:list_head
leak_list	extent_io.h	/^	struct list_head leak_list;$/;"	m	struct:extent_buffer	typeref:struct:list_head
leaves	backref.h	/^	struct list_head leaves;$/;"	m	struct:btrfs_backref_cache	typeref:struct:list_head
left_path	send.c	/^	struct btrfs_path *left_path;$/;"	m	struct:send_ctx	typeref:struct:btrfs_path *	file:
len	check-integrity.c	/^	u32 len;$/;"	m	struct:btrfsic_block_data_ctx	typeref:typename:u32	file:
len	compression.h	/^	unsigned int len;$/;"	m	struct:compressed_bio	typeref:typename:unsigned int
len	defrag.c	/^	u64 len;$/;"	m	struct:defrag_target_range	typeref:typename:u64	file:
len	delayed-ref.h	/^	u64 len;$/;"	m	struct:btrfs_ref	typeref:typename:u64
len	extent_io.c	/^	u64 len;$/;"	m	struct:fiemap_cache	typeref:typename:u64	file:
len	extent_io.h	/^	unsigned long len;$/;"	m	struct:extent_buffer	typeref:typename:unsigned long
len	extent_map.h	/^	u64 len;$/;"	m	struct:extent_map	typeref:typename:u64
len	file.c	/^	u64 len;$/;"	m	struct:falloc_range	typeref:typename:u64	file:
len	ioctl.c	/^	__u64 len;$/;"	m	struct:btrfs_ioctl_encoded_io_args_32	typeref:typename:__u64	file:
len	ordered-data.h	/^	u32 len;$/;"	m	struct:btrfs_ordered_sum	typeref:typename:u32
len	ref-verify.c	/^	u64 len;$/;"	m	struct:block_entry	typeref:typename:u64	file:
len	send.h	/^	__le32 len;$/;"	m	struct:btrfs_cmd_header	typeref:typename:__le32
len	tests/extent-map-tests.c	/^	u64 len;$/;"	m	struct:extent_range	typeref:typename:u64	file:
len_to_oe_boundary	extent_io.c	/^	u32 len_to_oe_boundary;$/;"	m	struct:btrfs_bio_ctrl	typeref:typename:u32	file:
length	block-group.h	/^	u64 length;$/;"	m	struct:btrfs_block_group	typeref:typename:u64
length	tests/free-space-tree-tests.c	/^	u64 length;$/;"	m	struct:free_space_extent	typeref:typename:u64	file:
length	volumes.h	/^	u64 length;$/;"	m	struct:btrfs_discard_stripe	typeref:typename:u64
level	backref.h	/^	int level;$/;"	m	struct:prelim_ref	typeref:typename:int
level	backref.h	/^	unsigned int level:8;$/;"	m	struct:btrfs_backref_node	typeref:typename:unsigned int:8
level	delayed-ref.h	/^	int level;$/;"	m	struct:btrfs_delayed_tree_ref	typeref:typename:int
level	delayed-ref.h	/^	int level;$/;"	m	struct:btrfs_tree_ref	typeref:typename:int
level	delayed-ref.h	/^	u8 level;$/;"	m	struct:btrfs_delayed_extent_op	typeref:typename:u8
level	extent-tree.c	/^	int level;$/;"	m	struct:walk_control	typeref:typename:int	file:
level	qgroup.h	/^	int level;$/;"	m	struct:btrfs_qgroup_swapped_block	typeref:typename:int
level	relocation.c	/^	unsigned int level:8;$/;"	m	struct:tree_block	typeref:typename:unsigned int:8	file:
level	tree-checker.h	/^	u8 level;$/;"	m	struct:btrfs_tree_parent_check	typeref:typename:u8
level	tree-mod-log.c	/^	u8 level;$/;"	m	struct:tree_mod_root	typeref:typename:u8	file:
level	zlib.c	/^	int level;$/;"	m	struct:workspace	typeref:typename:int	file:
level	zstd.c	/^	unsigned int level;$/;"	m	struct:workspace	typeref:typename:unsigned int	file:
lim_flags	qgroup.h	/^	u64 lim_flags;	\/* which limits are set *\/$/;"	m	struct:btrfs_qgroup	typeref:typename:u64
limit_active	async-thread.c	/^	int limit_active;$/;"	m	struct:btrfs_workqueue	typeref:typename:int	file:
limit_nesting	check-integrity.c	/^	int limit_nesting;$/;"	m	struct:btrfsic_stack_frame	typeref:typename:int	file:
limits	fs.h	/^	struct queue_limits limits;$/;"	m	struct:btrfs_fs_info	typeref:struct:queue_limits
link_free_space	free-space-cache.c	/^static int link_free_space(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:int	file:
link_to_fixup_dir	tree-log.c	/^static noinline int link_to_fixup_dir(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
link_to_upper	relocation.c	/^static int link_to_upper(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
list	backref.h	/^	struct list_head list;$/;"	m	struct:btrfs_backref_node	typeref:struct:list_head
list	backref.h	/^	struct list_head list[2];$/;"	m	struct:btrfs_backref_edge	typeref:struct:list_head[2]
list	block-group.h	/^	struct list_head list;$/;"	m	struct:btrfs_block_group	typeref:struct:list_head
list	block-group.h	/^	struct list_head list;$/;"	m	struct:btrfs_caching_control	typeref:struct:list_head
list	compression.c	/^	struct list_head list;$/;"	m	struct:heuristic_ws	typeref:struct:list_head	file:
list	defrag.c	/^	struct list_head list;$/;"	m	struct:defrag_target_range	typeref:struct:list_head	file:
list	extent_map.h	/^	struct list_head list;$/;"	m	struct:extent_map	typeref:struct:list_head
list	file.c	/^	struct list_head list;$/;"	m	struct:falloc_range	typeref:struct:list_head	file:
list	free-space-cache.c	/^	struct list_head list;$/;"	m	struct:btrfs_trim_range	typeref:struct:list_head	file:
list	free-space-cache.h	/^	struct list_head list;$/;"	m	struct:btrfs_free_space	typeref:struct:list_head
list	inode.c	/^	struct list_head list;$/;"	m	struct:async_extent	typeref:struct:list_head	file:
list	inode.c	/^	struct list_head list;$/;"	m	struct:btrfs_delalloc_work	typeref:struct:list_head	file:
list	lru_cache.h	/^	struct list_head list;$/;"	m	struct:btrfs_lru_cache_entry	typeref:struct:list_head
list	lzo.c	/^	struct list_head list;$/;"	m	struct:workspace	typeref:struct:list_head	file:
list	ordered-data.h	/^	struct list_head list;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:list_head
list	ordered-data.h	/^	struct list_head list;$/;"	m	struct:btrfs_ordered_sum	typeref:struct:list_head
list	ref-verify.c	/^	struct list_head list;$/;"	m	struct:ref_action	typeref:struct:list_head	file:
list	send.c	/^	struct list_head list;$/;"	m	struct:pending_dir_move	typeref:struct:list_head	file:
list	send.c	/^	struct list_head list;$/;"	m	struct:recorded_ref	typeref:struct:list_head	file:
list	space-info.h	/^	struct list_head list;$/;"	m	struct:btrfs_space_info	typeref:struct:list_head
list	space-info.h	/^	struct list_head list;$/;"	m	struct:reserve_ticket	typeref:struct:list_head
list	transaction.h	/^	struct list_head list;$/;"	m	struct:btrfs_pending_snapshot	typeref:struct:list_head
list	transaction.h	/^	struct list_head list;$/;"	m	struct:btrfs_transaction	typeref:struct:list_head
list	tree-log.c	/^	struct list_head list;$/;"	m	struct:btrfs_dir_list	typeref:struct:list_head	file:
list	tree-log.c	/^	struct list_head list;$/;"	m	struct:btrfs_ino_list	typeref:struct:list_head	file:
list	tree-log.h	/^	struct list_head list;$/;"	m	struct:btrfs_log_ctx	typeref:struct:list_head
list	tree-mod-log.h	/^	struct list_head list;$/;"	m	struct:btrfs_seq_list	typeref:struct:list_head
list	ulist.h	/^	struct list_head list;  \/* used to link node *\/$/;"	m	struct:ulist_node	typeref:struct:list_head
list	zlib.c	/^	struct list_head list;$/;"	m	struct:workspace	typeref:struct:list_head	file:
list	zstd.c	/^	struct list_head list;$/;"	m	struct:workspace	typeref:struct:list_head	file:
list_lock	async-thread.c	/^	spinlock_t list_lock;$/;"	m	struct:btrfs_workqueue	typeref:typename:spinlock_t	file:
list_to_workspace	zstd.c	/^static inline struct workspace *list_to_workspace(struct list_head *list)$/;"	f	typeref:struct:workspace *	file:
llseek_cached_state	ctree.h	/^	struct extent_state *llseek_cached_state;$/;"	m	struct:btrfs_file_private	typeref:struct:extent_state *
load_block_group_size_class	block-group.c	/^static int load_block_group_size_class(struct btrfs_caching_control *caching_ctl,$/;"	f	typeref:typename:int	file:
load_extent_tree_free	block-group.c	/^static int load_extent_tree_free(struct btrfs_caching_control *caching_ctl)$/;"	f	typeref:typename:int	file:
load_free_space_bitmaps	free-space-tree.c	/^static int load_free_space_bitmaps(struct btrfs_caching_control *caching_ctl,$/;"	f	typeref:typename:int	file:
load_free_space_cache	free-space-cache.c	/^int load_free_space_cache(struct btrfs_block_group *block_group)$/;"	f	typeref:typename:int
load_free_space_extents	free-space-tree.c	/^static int load_free_space_extents(struct btrfs_caching_control *caching_ctl,$/;"	f	typeref:typename:int	file:
load_free_space_tree	free-space-tree.c	/^int load_free_space_tree(struct btrfs_caching_control *caching_ctl)$/;"	f	typeref:typename:int
load_global_roots	disk-io.c	/^static int load_global_roots(struct btrfs_root *tree_root)$/;"	f	typeref:typename:int	file:
load_global_roots_objectid	disk-io.c	/^static int load_global_roots_objectid(struct btrfs_root *tree_root,$/;"	f	typeref:typename:int	file:
load_important_roots	disk-io.c	/^static int load_important_roots(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int	file:
load_super_root	disk-io.c	/^static int load_super_root(struct btrfs_root *root, u64 bytenr, u64 gen, int level)$/;"	f	typeref:typename:int	file:
location	btrfs_inode.h	/^	struct btrfs_key location;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_key
lock	block-group.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_block_group	typeref:typename:spinlock_t
lock	block-rsv.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_block_rsv	typeref:typename:spinlock_t
lock	btrfs_inode.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_inode	typeref:typename:spinlock_t
lock	ctree.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_qgroup_swapped_blocks	typeref:typename:spinlock_t
lock	delayed-inode.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_delayed_root	typeref:typename:spinlock_t
lock	delayed-ref.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_delayed_ref_head	typeref:typename:spinlock_t
lock	delayed-ref.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_delayed_ref_root	typeref:typename:spinlock_t
lock	extent-io-tree.h	/^	spinlock_t lock;$/;"	m	struct:extent_io_tree	typeref:typename:spinlock_t
lock	extent_io.h	/^	struct rw_semaphore lock;$/;"	m	struct:extent_buffer	typeref:struct:rw_semaphore
lock	extent_map.h	/^	rwlock_t lock;$/;"	m	struct:extent_map_tree	typeref:typename:rwlock_t
lock	fs.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_discard_ctl	typeref:typename:spinlock_t
lock	fs.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_free_cluster	typeref:typename:spinlock_t
lock	ordered-data.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_ordered_inode_tree	typeref:typename:spinlock_t
lock	raid56.c	/^	spinlock_t lock;$/;"	m	struct:btrfs_stripe_hash	typeref:typename:spinlock_t	file:
lock	relocation.c	/^	spinlock_t lock;$/;"	m	struct:mapping_tree	typeref:typename:spinlock_t	file:
lock	space-info.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_space_info	typeref:typename:spinlock_t
lock	subpage.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_subpage	typeref:typename:spinlock_t
lock	zstd.c	/^	spinlock_t lock;$/;"	m	struct:zstd_workspace_manager	typeref:typename:spinlock_t	file:
lock_and_cleanup_extent_if_need	file.c	/^lock_and_cleanup_extent_if_need(struct btrfs_inode *inode, struct page **pages,$/;"	f	typeref:typename:noinline int	file:
lock_delalloc_pages	extent_io.c	/^static noinline int lock_delalloc_pages(struct inode *inode,$/;"	f	typeref:typename:noinline int	file:
lock_extent	extent-io-tree.c	/^int lock_extent(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f	typeref:typename:int
lock_extent_buffer_for_io	extent_io.c	/^static noinline_for_stack bool lock_extent_buffer_for_io(struct extent_buffer *eb,$/;"	f	typeref:typename:noinline_for_stack bool	file:
lock_extent_direct	inode.c	/^static int lock_extent_direct(struct inode *inode, u64 lockstart, u64 lockend,$/;"	f	typeref:typename:int	file:
lock_finishing_cancel_unmount	fs.h	/^	struct mutex lock_finishing_cancel_unmount;$/;"	m	struct:btrfs_dev_replace	typeref:struct:mutex
lock_owner	extent_io.h	/^	pid_t lock_owner;$/;"	m	struct:extent_buffer	typeref:typename:pid_t
lock_stripe_add	raid56.c	/^static noinline int lock_stripe_add(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:noinline int	file:
locked	backref.h	/^	unsigned int locked:1;$/;"	m	struct:btrfs_backref_node	typeref:typename:unsigned int:1
locked_page	inode.c	/^	struct page *locked_page;$/;"	m	struct:async_chunk	typeref:struct:page *	file:
locks	ctree.h	/^	u8 locks[BTRFS_MAX_LEVEL];$/;"	m	struct:btrfs_path	typeref:typename:u8[]
log_all_new_ancestors	tree-log.c	/^static int log_all_new_ancestors(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
log_batch	ctree.h	/^	atomic_t log_batch;$/;"	m	struct:btrfs_root	typeref:typename:atomic_t
log_commit	ctree.h	/^	atomic_t log_commit[2];$/;"	m	struct:btrfs_root	typeref:typename:atomic_t[2]
log_commit_wait	ctree.h	/^	wait_queue_head_t log_commit_wait[2];$/;"	m	struct:btrfs_root	typeref:typename:wait_queue_head_t[2]
log_conflicting_inodes	tree-log.c	/^static int log_conflicting_inodes(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
log_csum_range	ctree.h	/^	struct extent_io_tree log_csum_range;$/;"	m	struct:btrfs_root	typeref:struct:extent_io_tree
log_csums	tree-log.c	/^static int log_csums(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
log_ctxs	ctree.h	/^	struct list_head log_ctxs[2];$/;"	m	struct:btrfs_root	typeref:struct:list_head[2]
log_delayed_deletion_items	tree-log.c	/^static int log_delayed_deletion_items(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
log_delayed_deletions_full	tree-log.c	/^static int log_delayed_deletions_full(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
log_delayed_deletions_incremental	tree-log.c	/^static int log_delayed_deletions_incremental(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
log_delayed_insertion_items	tree-log.c	/^static int log_delayed_insertion_items(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
log_dir_items	tree-log.c	/^static noinline int log_dir_items(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
log_directory_changes	tree-log.c	/^static noinline int log_directory_changes(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
log_extent_csums	tree-log.c	/^static int log_extent_csums(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
log_extents_lock	ctree.h	/^	spinlock_t log_extents_lock[2];$/;"	m	struct:btrfs_root	typeref:typename:spinlock_t[2]
log_index	extent_io.h	/^	s8 log_index;$/;"	m	struct:extent_buffer	typeref:typename:s8
log_inode_item	tree-log.c	/^static int log_inode_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
log_list	delayed-inode.h	/^	struct list_head log_list;$/;"	m	struct:btrfs_delayed_item	typeref:struct:list_head
log_list	ordered-data.h	/^	struct list_head log_list;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:list_head
log_mutex	btrfs_inode.h	/^	struct mutex log_mutex;$/;"	m	struct:btrfs_inode	typeref:struct:mutex
log_mutex	ctree.h	/^	struct mutex log_mutex;$/;"	m	struct:btrfs_root	typeref:struct:mutex
log_new_ancestors	tree-log.c	/^static int log_new_ancestors(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
log_new_ancestors_fast	tree-log.c	/^static int log_new_ancestors_fast(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
log_new_delayed_dentries	tree-log.c	/^static int log_new_delayed_dentries(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
log_new_dentries	tree-log.h	/^	bool log_new_dentries;$/;"	m	struct:btrfs_log_ctx	typeref:typename:bool
log_new_dir_dentries	tree-log.c	/^static int log_new_dir_dentries(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
log_one_extent	tree-log.c	/^static int log_one_extent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
log_ret	tree-log.h	/^	int log_ret;$/;"	m	struct:btrfs_log_ctx	typeref:typename:int
log_root	ctree.h	/^	struct btrfs_root *log_root;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root *
log_root_tree	fs.h	/^	struct btrfs_root *log_root_tree;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_root *
log_start_pid	ctree.h	/^	pid_t log_start_pid;$/;"	m	struct:btrfs_root	typeref:typename:pid_t
log_transid	ctree.h	/^	int log_transid;$/;"	m	struct:btrfs_root	typeref:typename:int
log_transid	tree-log.h	/^	int log_transid;$/;"	m	struct:btrfs_log_ctx	typeref:typename:int
log_transid_committed	ctree.h	/^	int log_transid_committed;$/;"	m	struct:btrfs_root	typeref:typename:int
log_writer_wait	ctree.h	/^	wait_queue_head_t log_writer_wait;$/;"	m	struct:btrfs_root	typeref:typename:wait_queue_head_t
log_writers	ctree.h	/^	atomic_t log_writers;$/;"	m	struct:btrfs_root	typeref:typename:atomic_t
logged	delayed-inode.h	/^	bool logged;$/;"	m	struct:btrfs_delayed_item	typeref:typename:bool
logged_before	tree-log.h	/^	bool logged_before;$/;"	m	struct:btrfs_log_ctx	typeref:typename:bool
logged_inode_size	tree-log.c	/^static int logged_inode_size(struct btrfs_root *log, struct btrfs_inode *inode,$/;"	f	typeref:typename:int	file:
logged_list	ctree.h	/^	struct list_head logged_list[2];$/;"	m	struct:btrfs_root	typeref:struct:list_head[2]
logged_trans	btrfs_inode.h	/^	u64 logged_trans;$/;"	m	struct:btrfs_inode	typeref:typename:u64
logging_conflict_inodes	tree-log.h	/^	bool logging_conflict_inodes;$/;"	m	struct:btrfs_log_ctx	typeref:typename:bool
logging_new_delayed_dentries	tree-log.h	/^	bool logging_new_delayed_dentries;$/;"	m	struct:btrfs_log_ctx	typeref:typename:bool
logging_new_name	tree-log.h	/^	bool logging_new_name;$/;"	m	struct:btrfs_log_ctx	typeref:typename:bool
logical	inode.c	/^	u64 logical;$/;"	m	struct:data_reloc_warn	typeref:typename:u64	file:
logical	ordered-data.h	/^	u64 logical;$/;"	m	struct:btrfs_ordered_sum	typeref:typename:u64
logical	scrub.c	/^	u64			logical;$/;"	m	struct:scrub_warning	typeref:typename:u64	file:
logical	scrub.c	/^	u64 logical;$/;"	m	struct:scrub_stripe	typeref:typename:u64	file:
logical	tree-mod-log.c	/^	u64 logical;$/;"	m	struct:tree_mod_elem	typeref:typename:u64	file:
logical	tree-mod-log.c	/^	u64 logical;$/;"	m	struct:tree_mod_root	typeref:typename:u64	file:
logical_bytenr	check-integrity.c	/^	u64 logical_bytenr;	\/* logical byte num on disk *\/$/;"	m	struct:btrfsic_block	typeref:typename:u64	file:
logtypes	messages.c	/^static const char * const logtypes[] = {$/;"	v	typeref:typename:const char * const[]	file:
lookup_backref_cache	send.c	/^static bool lookup_backref_cache(u64 leaf_bytenr, void *ctx,$/;"	f	typeref:typename:bool	file:
lookup_backref_shared_cache	backref.c	/^static bool lookup_backref_shared_cache(struct btrfs_backref_share_check_ctx *ctx,$/;"	f	typeref:typename:bool	file:
lookup_block_entry	ref-verify.c	/^static struct block_entry *lookup_block_entry(struct rb_root *root, u64 bytenr)$/;"	f	typeref:struct:block_entry *	file:
lookup_dir_item_inode	send.c	/^static int lookup_dir_item_inode(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
lookup_extent_backref	extent-tree.c	/^static int lookup_extent_backref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
lookup_extent_data_ref	extent-tree.c	/^static noinline int lookup_extent_data_ref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
lookup_extent_mapping	extent_map.c	/^struct extent_map *lookup_extent_mapping(struct extent_map_tree *tree,$/;"	f	typeref:struct:extent_map *
lookup_free_space_inode	free-space-cache.c	/^struct inode *lookup_free_space_inode(struct btrfs_block_group *block_group,$/;"	f	typeref:struct:inode *
lookup_inline_extent_backref	extent-tree.c	/^int lookup_inline_extent_backref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline_for_stack int	file:
lookup_root_entry	ref-verify.c	/^static struct root_entry *lookup_root_entry(struct rb_root *root, u64 objectid)$/;"	f	typeref:struct:root_entry *	file:
lookup_tree_block_ref	extent-tree.c	/^static noinline int lookup_tree_block_ref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
loop	extent-tree.h	/^	int loop;$/;"	m	struct:find_free_extent_ctl	typeref:typename:int
lower	backref.h	/^	struct list_head lower;$/;"	m	struct:btrfs_backref_node	typeref:struct:list_head
lowest	backref.h	/^	unsigned int lowest:1;$/;"	m	struct:btrfs_backref_node	typeref:typename:unsigned int:1
lowest_level	ctree.h	/^	u8 lowest_level;$/;"	m	struct:btrfs_path	typeref:typename:u8
lowest_ppage	inode.c	/^	u64 lowest_ppage;$/;"	m	struct:btrfs_swap_info	typeref:typename:u64	file:
lru_list	lru_cache.h	/^	struct list_head lru_list;$/;"	m	struct:btrfs_lru_cache	typeref:struct:list_head
lru_list	lru_cache.h	/^	struct list_head lru_list;$/;"	m	struct:btrfs_lru_cache_entry	typeref:struct:list_head
lru_list	zstd.c	/^	struct list_head lru_list;$/;"	m	struct:workspace	typeref:struct:list_head	file:
lru_list	zstd.c	/^	struct list_head lru_list;$/;"	m	struct:zstd_workspace_manager	typeref:struct:list_head	file:
lzo_alloc_workspace	lzo.c	/^struct list_head *lzo_alloc_workspace(unsigned int level)$/;"	f	typeref:struct:list_head *
lzo_compress_pages	lzo.c	/^int lzo_compress_pages(struct list_head *ws, struct address_space *mapping,$/;"	f	typeref:typename:int
lzo_decompress	lzo.c	/^int lzo_decompress(struct list_head *ws, const u8 *data_in,$/;"	f	typeref:typename:int
lzo_decompress_bio	lzo.c	/^int lzo_decompress_bio(struct list_head *ws, struct compressed_bio *cb)$/;"	f	typeref:typename:int
lzo_free_workspace	lzo.c	/^void lzo_free_workspace(struct list_head *ws)$/;"	f	typeref:typename:void
magic	check-integrity.c	/^	u32 magic;$/;"	m	struct:btrfsic_stack_frame	typeref:typename:u32	file:
magic	send.h	/^	char magic[sizeof(BTRFS_SEND_STREAM_MAGIC)];$/;"	m	struct:btrfs_stream_header	typeref:typename:char[]
magic_num	check-integrity.c	/^	u32 magic_num;		\/* only used for debug purposes *\/$/;"	m	struct:btrfsic_block	typeref:typename:u32	file:
magic_num	check-integrity.c	/^	u32 magic_num;		\/* only used for debug purposes *\/$/;"	m	struct:btrfsic_block_link	typeref:typename:u32	file:
magic_num	check-integrity.c	/^	u32 magic_num;		\/* only used for debug purposes *\/$/;"	m	struct:btrfsic_dev_state	typeref:typename:u32	file:
map	extent_map.h	/^	struct rb_root_cached map;$/;"	m	struct:extent_map_tree	typeref:struct:rb_root_cached
map_lookup	extent_map.h	/^	struct map_lookup *map_lookup;$/;"	m	struct:extent_map	typeref:struct:map_lookup *
map_lookup	volumes.h	/^struct map_lookup {$/;"	s
map_lookup_size	volumes.h	/^#define map_lookup_size(/;"	d
map_raid56_repair_block	volumes.c	/^static void map_raid56_repair_block(struct btrfs_io_context *bioc,$/;"	f	typeref:typename:void	file:
map_type	volumes.h	/^	u64 map_type; \/* get from map_lookup->type *\/$/;"	m	struct:btrfs_io_context	typeref:typename:u64
mapped_logical	tests/extent-map-tests.c	/^	u64 mapped_logical[5];$/;"	m	struct:rmap_test_vector	typeref:typename:u64[5]	file:
mapping_node	relocation.c	/^struct mapping_node {$/;"	s	file:
mapping_tree	fs.h	/^	struct extent_map_tree mapping_tree;$/;"	m	struct:btrfs_fs_info	typeref:struct:extent_map_tree
mapping_tree	relocation.c	/^struct mapping_tree {$/;"	s	file:
mapping_tree_init	relocation.c	/^static void mapping_tree_init(struct mapping_tree *tree)$/;"	f	typeref:typename:void	file:
mark_block_group_to_copy	dev-replace.c	/^static int mark_block_group_to_copy(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
mark_block_processed	relocation.c	/^static void mark_block_processed(struct reloc_control *rc,$/;"	f	typeref:typename:void	file:
mark_extent_buffer_accessed	extent_io.c	/^static void mark_extent_buffer_accessed(struct extent_buffer *eb,$/;"	f	typeref:typename:void	file:
mark_garbage_root	relocation.c	/^static noinline_for_stack int mark_garbage_root(struct btrfs_root *root)$/;"	f	typeref:typename:noinline_for_stack int	file:
match_entry	lru_cache.c	/^static struct btrfs_lru_cache_entry *match_entry(struct list_head *head, u64 key,$/;"	f	typeref:struct:btrfs_lru_cache_entry *	file:
match_extent_data_ref	extent-tree.c	/^static int match_extent_data_ref(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
match_fsid_fs_devices	volumes.c	/^static bool match_fsid_fs_devices(const struct btrfs_fs_devices *fs_devices,$/;"	f	typeref:typename:bool	file:
max_active_zones	zoned.h	/^	unsigned int max_active_zones;$/;"	m	struct:btrfs_zoned_device_info	typeref:typename:unsigned int
max_avail	volumes.h	/^	u64 max_avail;$/;"	m	struct:btrfs_device_info	typeref:typename:u64
max_chunk_size	volumes.c	/^	u64 max_chunk_size;$/;"	m	struct:alloc_chunk_ctl	typeref:typename:u64	file:
max_commit_dur	fs.h	/^	u64 max_commit_dur;$/;"	m	struct:btrfs_commit_stats	typeref:typename:u64
max_discard_size	fs.h	/^	u64 max_discard_size;$/;"	m	struct:btrfs_discard_ctl	typeref:typename:u64
max_errors	volumes.h	/^	u16 max_errors;$/;"	m	struct:btrfs_io_context	typeref:typename:u16
max_excl	qgroup.h	/^	u64 max_excl;$/;"	m	struct:btrfs_qgroup	typeref:typename:u64
max_extent_size	extent-tree.h	/^	u64 max_extent_size;$/;"	m	struct:find_free_extent_ctl	typeref:typename:u64
max_extent_size	free-space-cache.h	/^	u64 max_extent_size;$/;"	m	struct:btrfs_free_space	typeref:typename:u64
max_extent_size	fs.h	/^	u64 max_extent_size;$/;"	m	struct:btrfs_fs_info	typeref:typename:u64
max_extent_size	space-info.h	/^	u64 max_extent_size;	\/* This will hold the maximum extent size of$/;"	m	struct:btrfs_space_info	typeref:typename:u64
max_inline	fs.h	/^	u64 max_inline;$/;"	m	struct:btrfs_fs_info	typeref:typename:u64
max_level	compression.h	/^	unsigned int max_level;$/;"	m	struct:btrfs_compress_op	typeref:typename:unsigned int
max_ordered_sum_bytes	file-item.c	/^static inline u32 max_ordered_sum_bytes(const struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:u32	file:
max_rfer	qgroup.h	/^	u64 max_rfer;$/;"	m	struct:btrfs_qgroup	typeref:typename:u64
max_send_read_size	send.c	/^static inline u64 max_send_read_size(const struct send_ctx *sctx)$/;"	f	typeref:typename:u64	file:
max_size	fs.h	/^	u64 max_size;$/;"	m	struct:btrfs_free_cluster	typeref:typename:u64
max_size	lru_cache.h	/^	unsigned int max_size;$/;"	m	struct:btrfs_lru_cache	typeref:typename:unsigned int
max_stripe_size	volumes.c	/^	u64 max_stripe_size;$/;"	m	struct:alloc_chunk_ctl	typeref:typename:u64	file:
max_superblock_generation	check-integrity.c	/^	u64 max_superblock_generation;$/;"	m	struct:btrfsic_state	typeref:typename:u64	file:
max_zone_append_size	fs.h	/^	u64 max_zone_append_size;$/;"	m	struct:btrfs_fs_info	typeref:typename:u64
may_destroy_subvol	inode.c	/^static noinline int may_destroy_subvol(struct btrfs_root *root)$/;"	f	typeref:typename:noinline int	file:
may_wait_transaction	transaction.c	/^static int may_wait_transaction(struct btrfs_fs_info *fs_info, int type)$/;"	f	typeref:typename:int	file:
maybe_clamp_preempt	space-info.c	/^static inline void maybe_clamp_preempt(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
maybe_fail_all_tickets	space-info.c	/^static bool maybe_fail_all_tickets(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:bool	file:
maybe_fs_roots	qgroup.c	/^static int maybe_fs_roots(struct ulist *roots)$/;"	f	typeref:typename:int	file:
maybe_insert_hole	inode.c	/^static int maybe_insert_hole(struct btrfs_root *root, struct btrfs_inode *inode,$/;"	f	typeref:typename:int	file:
maybe_send_hole	send.c	/^static int maybe_send_hole(struct send_ctx *sctx, struct btrfs_path *path,$/;"	f	typeref:typename:int	file:
mem	lzo.c	/^	void *mem;$/;"	m	struct:workspace	typeref:typename:void *	file:
mem	zstd.c	/^	void *mem;$/;"	m	struct:workspace	typeref:typename:void *	file:
mem_to_free	check-integrity.c	/^	void *mem_to_free;$/;"	m	struct:btrfsic_block_data_ctx	typeref:typename:void *	file:
member	qgroup.c	/^	struct btrfs_qgroup *member;$/;"	m	struct:btrfs_qgroup_list	typeref:struct:btrfs_qgroup *	file:
members	qgroup.h	/^	struct list_head members; \/* groups that are members of this group *\/$/;"	m	struct:btrfs_qgroup	typeref:struct:list_head
memcmp_extent_buffer	extent_io.c	/^int memcmp_extent_buffer(const struct extent_buffer *eb, const void *ptrv,$/;"	f	typeref:typename:int
memcmp_node_keys	relocation.c	/^int memcmp_node_keys(struct extent_buffer *eb, int slot,$/;"	f	typeref:typename:noinline_for_stack int	file:
memcpy_extent_buffer	extent_io.c	/^void memcpy_extent_buffer(const struct extent_buffer *dst,$/;"	f	typeref:typename:void
memmove_extent_buffer	extent_io.c	/^void memmove_extent_buffer(const struct extent_buffer *dst,$/;"	f	typeref:typename:void
memmove_leaf_data	ctree.c	/^static inline void memmove_leaf_data(const struct extent_buffer *leaf,$/;"	f	typeref:typename:void	file:
memmove_leaf_items	ctree.c	/^static inline void memmove_leaf_items(const struct extent_buffer *leaf,$/;"	f	typeref:typename:void	file:
memset_extent_buffer	extent_io.c	/^static void memset_extent_buffer(const struct extent_buffer *eb, int c,$/;"	f	typeref:typename:void	file:
memzero_extent_buffer	extent_io.c	/^void memzero_extent_buffer(const struct extent_buffer *eb, unsigned long start,$/;"	f	typeref:typename:void
mergable_maps	extent_map.c	/^static int mergable_maps(struct extent_map *prev, struct extent_map *next)$/;"	f	typeref:typename:int	file:
merge_extent_mapping	extent_map.c	/^static noinline int merge_extent_mapping(struct extent_map_tree *em_tree,$/;"	f	typeref:typename:noinline int	file:
merge_rbio	raid56.c	/^static void merge_rbio(struct btrfs_raid_bio *dest,$/;"	f	typeref:typename:void	file:
merge_ref	delayed-ref.c	/^static bool merge_ref(struct btrfs_delayed_ref_root *delayed_refs,$/;"	f	typeref:typename:bool	file:
merge_reloc_root	relocation.c	/^static noinline_for_stack int merge_reloc_root(struct reloc_control *rc,$/;"	f	typeref:typename:noinline_for_stack int	file:
merge_reloc_roots	relocation.c	/^void merge_reloc_roots(struct reloc_control *rc)$/;"	f	typeref:typename:noinline_for_stack void	file:
merge_reloc_tree	relocation.c	/^	unsigned int merge_reloc_tree:1;$/;"	m	struct:reloc_control	typeref:typename:unsigned int:1	file:
merge_state	extent-io-tree.c	/^static void merge_state(struct extent_io_tree *tree, struct extent_state *state)$/;"	f	typeref:typename:void	file:
merging_rsv_size	relocation.c	/^	u64 merging_rsv_size;$/;"	m	struct:reloc_control	typeref:typename:u64	file:
merkle_file_pos	verity.c	/^static loff_t merkle_file_pos(const struct inode *inode)$/;"	f	typeref:typename:loff_t	file:
meta	volumes.h	/^	struct btrfs_balance_args meta;$/;"	m	struct:btrfs_balance_control	typeref:struct:btrfs_balance_args
meta_alloc_cluster	fs.h	/^	struct btrfs_free_cluster meta_alloc_cluster;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_free_cluster
meta_error_bitmap	scrub.c	/^	unsigned long meta_error_bitmap;$/;"	m	struct:scrub_stripe	typeref:typename:unsigned long	file:
meta_write_pointer	block-group.h	/^	u64 meta_write_pointer;$/;"	m	struct:btrfs_block_group	typeref:typename:u64
metablock_size	check-integrity.c	/^	u32 metablock_size;$/;"	m	struct:btrfsic_state	typeref:typename:u32	file:
metadata	ref-verify.c	/^	int metadata;$/;"	m	struct:block_entry	typeref:typename:int	file:
metadata_ratio	fs.h	/^	u32 metadata_ratio;$/;"	m	struct:btrfs_fs_info	typeref:typename:u32
metadata_uuid	volumes.h	/^	u8 metadata_uuid[BTRFS_FSID_SIZE];$/;"	m	struct:btrfs_fs_devices	typeref:typename:u8[]
min_alloc_size	extent-tree.h	/^	u64 min_alloc_size;$/;"	m	struct:find_free_extent_ctl	typeref:typename:u64
min_type	inode-item.h	/^	u32 min_type;$/;"	m	struct:btrfs_truncate_control	typeref:typename:u32
mindev_error	volumes.h	/^	u8 mindev_error;	\/* error code if min devs requisite is unmet *\/$/;"	m	struct:btrfs_raid_attr	typeref:typename:u8
mirror_num	bio.c	/^	int mirror_num;$/;"	m	struct:async_submit_bio	typeref:typename:int	file:
mirror_num	bio.h	/^	unsigned int mirror_num;$/;"	m	struct:btrfs_bio	typeref:typename:unsigned int
mirror_num	check-integrity.c	/^	int mirror_num;$/;"	m	struct:btrfsic_stack_frame	typeref:typename:int	file:
mirror_num	check-integrity.c	/^	unsigned int mirror_num;	\/* large enough to hold$/;"	m	struct:btrfsic_block	typeref:typename:unsigned int	file:
mirror_num	inode.c	/^	int mirror_num;$/;"	m	struct:data_reloc_warn	typeref:typename:int	file:
mirror_num	scrub.c	/^	u16 mirror_num;$/;"	m	struct:scrub_stripe	typeref:typename:u16	file:
mirror_num	volumes.h	/^	u16 mirror_num;$/;"	m	struct:btrfs_io_context	typeref:typename:u16
missing	volumes.h	/^	bool missing;$/;"	m	struct:btrfs_dev_lookup_args	typeref:typename:bool
missing_devices	volumes.h	/^	u64 missing_devices;$/;"	m	struct:btrfs_fs_devices	typeref:typename:u64
mod_init_result	super.c	/^static bool mod_init_result[ARRAY_SIZE(mod_init_seq)];$/;"	v	typeref:typename:bool[]	file:
mod_init_seq	super.c	/^static const struct init_sequence mod_init_seq[] = {$/;"	v	typeref:typename:const struct init_sequence[]	file:
mod_len	extent_map.h	/^	u64 mod_len;$/;"	m	struct:extent_map	typeref:typename:u64
mod_start	extent_map.h	/^	u64 mod_start;$/;"	m	struct:extent_map	typeref:typename:u64
mode	send.c	/^	u64 mode;$/;"	m	struct:btrfs_inode_info	typeref:typename:u64	file:
modified_extents	extent_map.h	/^	struct list_head modified_extents;$/;"	m	struct:extent_map_tree	typeref:struct:list_head
modify_free_space_bitmap	free-space-tree.c	/^static int modify_free_space_bitmap(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
mount_opt	fs.h	/^	unsigned long mount_opt;$/;"	m	struct:btrfs_fs_info	typeref:typename:unsigned long
mount_subvol	super.c	/^static struct dentry *mount_subvol(const char *subvol_name, u64 subvol_objectid,$/;"	f	typeref:struct:dentry *	file:
move	tree-mod-log.c	/^	} move;$/;"	m	struct:tree_mod_elem	typeref:struct:tree_mod_elem::__anon6d656a820108	file:
mult_perc	misc.h	/^static inline u64 mult_perc(u64 num, u32 percent)$/;"	f	typeref:typename:u64
must_insert_reserved	delayed-ref.h	/^	bool must_insert_reserved;$/;"	m	struct:btrfs_delayed_ref_head	typeref:typename:bool
mutex	block-group.h	/^	struct mutex mutex;$/;"	m	struct:btrfs_caching_control	typeref:struct:mutex
mutex	delayed-inode.h	/^	struct mutex mutex;$/;"	m	struct:btrfs_delayed_node	typeref:struct:mutex
mutex	delayed-ref.h	/^	struct mutex mutex;$/;"	m	struct:btrfs_delayed_ref_head	typeref:struct:mutex
n_list	delayed-inode.h	/^	struct list_head n_list;$/;"	m	struct:btrfs_delayed_node	typeref:struct:list_head
name	ctree.c	/^	const char	name[10];$/;"	m	struct:btrfs_csums	typeref:typename:const char[10]	file:
name	print-tree.c	/^	char name[16];$/;"	m	struct:root_name_map	typeref:typename:char[16]	file:
name	send.c	/^	char *name;$/;"	m	struct:recorded_ref	typeref:typename:char *	file:
name	send.c	/^	char name[];$/;"	m	struct:name_cache_entry	typeref:typename:char[]	file:
name	send.c	/^	const char *name;$/;"	m	struct:find_xattr_ctx	typeref:typename:const char *	file:
name	volumes.h	/^	struct rcu_string __rcu *name;$/;"	m	struct:btrfs_device	typeref:struct:rcu_string __rcu *
name_cache	send.c	/^	struct btrfs_lru_cache name_cache;$/;"	m	struct:send_ctx	typeref:struct:btrfs_lru_cache	file:
name_cache_entry	send.c	/^struct name_cache_entry {$/;"	s	file:
name_cache_search	send.c	/^static inline struct name_cache_entry *name_cache_search(struct send_ctx *sctx,$/;"	f	typeref:struct:name_cache_entry *	file:
name_len	inode.c	/^	int name_len;$/;"	m	struct:dir_entry	typeref:typename:int	file:
name_len	send.c	/^	int name_len;$/;"	m	struct:find_xattr_ctx	typeref:typename:int	file:
name_len	send.c	/^	int name_len;$/;"	m	struct:name_cache_entry	typeref:typename:int	file:
name_len	send.c	/^	int name_len;$/;"	m	struct:recorded_ref	typeref:typename:int	file:
names	locking.c	/^	char			names[BTRFS_MAX_LEVEL][24];$/;"	m	struct:btrfs_lockdep_keyset	typeref:typename:char[][24]	file:
ncopies	volumes.c	/^	int ncopies;$/;"	m	struct:alloc_chunk_ctl	typeref:typename:int	file:
ncopies	volumes.h	/^	u8 ncopies;		\/* how many copies to data has *\/$/;"	m	struct:btrfs_raid_attr	typeref:typename:u8
ndevs	volumes.c	/^	int ndevs;$/;"	m	struct:alloc_chunk_ctl	typeref:typename:int	file:
need_commit_sem	ctree.h	/^	unsigned int need_commit_sem:1;$/;"	m	struct:btrfs_path	typeref:typename:unsigned int:1
need_later_update	send.c	/^	int need_later_update;$/;"	m	struct:name_cache_entry	typeref:typename:int	file:
need_log_inode	tree-log.c	/^static bool need_log_inode(const struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:bool	file:
need_preemptive_reclaim	space-info.c	/^static bool need_preemptive_reclaim(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:bool	file:
need_read_stripe_sectors	raid56.c	/^static bool need_read_stripe_sectors(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:bool	file:
need_reserve_reloc_root	transaction.c	/^static inline bool need_reserve_reloc_root(struct btrfs_root *root)$/;"	f	typeref:typename:bool	file:
need_send_hole	send.c	/^static int need_send_hole(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
never_written	check-integrity.c	/^	unsigned int never_written:1;	\/* block was added because it was$/;"	m	struct:btrfsic_block	typeref:typename:unsigned int:1	file:
new_bgs	transaction.h	/^	struct list_head new_bgs;$/;"	m	struct:btrfs_trans_handle	typeref:struct:list_head
new_bytenr	backref.h	/^	u64 new_bytenr;$/;"	m	struct:btrfs_backref_node	typeref:typename:u64
new_delalloc_bytes	btrfs_inode.h	/^		u64 new_delalloc_bytes;$/;"	m	union:btrfs_inode::__anon98c21faa030a	typeref:typename:u64
new_refcnt	qgroup.h	/^	u64 new_refcnt;$/;"	m	struct:btrfs_qgroup	typeref:typename:u64
new_refs	send.c	/^	struct list_head new_refs;$/;"	m	struct:send_ctx	typeref:struct:list_head	file:
new_simple_dir	inode.c	/^static struct inode *new_simple_dir(struct inode *dir,$/;"	f	typeref:struct:inode *	file:
new_size	inode-item.h	/^	u64 new_size;$/;"	m	struct:btrfs_truncate_control	typeref:typename:u64
new_whiteout_inode	inode.c	/^static struct inode *new_whiteout_inode(struct mnt_idmap *idmap,$/;"	f	typeref:struct:inode *	file:
next	backref.c	/^	struct extent_inode_elem *next;$/;"	m	struct:extent_inode_elem	typeref:struct:extent_inode_elem *	file:
next_block	check-integrity.c	/^	struct btrfsic_block *next_block;$/;"	m	struct:btrfsic_stack_frame	typeref:struct:btrfsic_block *	file:
next_block_ctx	check-integrity.c	/^	struct btrfsic_block_data_ctx next_block_ctx;$/;"	m	struct:btrfsic_stack_frame	typeref:struct:btrfsic_block_data_ctx	file:
next_extent_map	extent_map.c	/^static struct extent_map *next_extent_map(const struct extent_map *em)$/;"	f	typeref:struct:extent_map *	file:
next_group	qgroup.c	/^	struct list_head next_group;$/;"	m	struct:btrfs_qgroup_list	typeref:struct:list_head	file:
next_in_same_bio	check-integrity.c	/^	struct btrfsic_block *next_in_same_bio;$/;"	m	struct:btrfsic_block	typeref:struct:btrfsic_block *	file:
next_member	qgroup.c	/^	struct list_head next_member;$/;"	m	struct:btrfs_qgroup_list	typeref:struct:list_head	file:
next_repair_mirror	bio.c	/^static int next_repair_mirror(struct btrfs_failed_bio *fbio, int cur_mirror)$/;"	f	typeref:typename:int	file:
next_state	extent-io-tree.c	/^static inline struct extent_state *next_state(struct extent_state *state)$/;"	f	typeref:struct:extent_state *	file:
nlink	send.c	/^	u64 nlink;$/;"	m	struct:btrfs_inode_info	typeref:typename:u64	file:
nnodes	ulist.h	/^	unsigned long nnodes;$/;"	m	struct:ulist	typeref:typename:unsigned long
nocow_done	inode.c	/^	bool nocow_done;$/;"	m	struct:btrfs_dio_data	typeref:typename:bool	file:
nocow_writers	block-group.h	/^	atomic_t nocow_writers;$/;"	m	struct:btrfs_block_group	typeref:typename:atomic_t
node	backref.h	/^	struct btrfs_backref_node *node[2];$/;"	m	struct:btrfs_backref_edge	typeref:struct:btrfs_backref_node * [2]
node	ctree.h	/^	struct extent_buffer *node;$/;"	m	struct:btrfs_root	typeref:struct:extent_buffer *
node	delayed-ref.h	/^	struct btrfs_delayed_ref_node node;$/;"	m	struct:btrfs_delayed_data_ref	typeref:struct:btrfs_delayed_ref_node
node	delayed-ref.h	/^	struct btrfs_delayed_ref_node node;$/;"	m	struct:btrfs_delayed_tree_ref	typeref:struct:btrfs_delayed_ref_node
node	props.c	/^	struct hlist_node node;$/;"	m	struct:prop_handler	typeref:struct:hlist_node	file:
node	qgroup.h	/^	struct rb_node node;	  \/* tree of qgroups *\/$/;"	m	struct:btrfs_qgroup	typeref:struct:rb_node
node	qgroup.h	/^	struct rb_node node;$/;"	m	struct:btrfs_qgroup_extent_record	typeref:struct:rb_node
node	qgroup.h	/^	struct rb_node node;$/;"	m	struct:btrfs_qgroup_swapped_block	typeref:struct:rb_node
node	ref-verify.c	/^	struct rb_node node;$/;"	m	struct:block_entry	typeref:struct:rb_node	file:
node	ref-verify.c	/^	struct rb_node node;$/;"	m	struct:ref_entry	typeref:struct:rb_node	file:
node	ref-verify.c	/^	struct rb_node node;$/;"	m	struct:root_entry	typeref:struct:rb_node	file:
node	send.c	/^	struct rb_node node;$/;"	m	struct:orphan_dir_info	typeref:struct:rb_node	file:
node	send.c	/^	struct rb_node node;$/;"	m	struct:pending_dir_move	typeref:struct:rb_node	file:
node	send.c	/^	struct rb_node node;$/;"	m	struct:recorded_ref	typeref:struct:rb_node	file:
node	send.c	/^	struct rb_node node;$/;"	m	struct:waiting_dir_move	typeref:struct:rb_node	file:
node	tree-mod-log.c	/^	struct rb_node node;$/;"	m	struct:tree_mod_elem	typeref:struct:rb_node	file:
node	volumes.h	/^	struct rb_node node;$/;"	m	struct:btrfs_swapfile_pin	typeref:struct:rb_node
node_list	delayed-inode.h	/^	struct list_head node_list;$/;"	m	struct:btrfs_delayed_root	typeref:struct:list_head
node_ref_from	check-integrity.c	/^	struct list_head node_ref_from;	\/* list node *\/$/;"	m	struct:btrfsic_block_link	typeref:struct:list_head	file:
node_ref_to	check-integrity.c	/^	struct list_head node_ref_to;	\/* list node *\/$/;"	m	struct:btrfsic_block_link	typeref:struct:list_head	file:
nodes	ctree.h	/^	struct extent_buffer *nodes[BTRFS_MAX_LEVEL];$/;"	m	struct:btrfs_path	typeref:struct:extent_buffer * []
nodes	delayed-inode.h	/^	int nodes;		\/* for delayed nodes *\/$/;"	m	struct:btrfs_delayed_root	typeref:typename:int
nodes	ulist.h	/^	struct list_head nodes;$/;"	m	struct:ulist	typeref:struct:list_head
nodes_relocated	relocation.c	/^	u64 nodes_relocated;$/;"	m	struct:reloc_control	typeref:typename:u64	file:
nodesize	fs.h	/^	u32 nodesize;$/;"	m	struct:btrfs_fs_info	typeref:typename:u32
normal_work	async-thread.h	/^	struct work_struct normal_work;$/;"	m	struct:btrfs_work	typeref:struct:work_struct
normal_wq	async-thread.c	/^	struct workqueue_struct *normal_wq;$/;"	m	struct:btrfs_workqueue	typeref:struct:workqueue_struct *	file:
nowait	ctree.h	/^	unsigned int nowait:1;$/;"	m	struct:btrfs_path	typeref:typename:unsigned int:1
nparity	volumes.c	/^	int nparity;$/;"	m	struct:alloc_chunk_ctl	typeref:typename:int	file:
nparity	volumes.h	/^	u8 nparity;		\/* number of stripes worth of bytes to store$/;"	m	struct:btrfs_raid_attr	typeref:typename:u8
nr	check-integrity.c	/^	u32 nr;$/;"	m	struct:btrfsic_stack_frame	typeref:typename:u32	file:
nr	ctree.h	/^	int nr;$/;"	m	struct:btrfs_item_batch	typeref:typename:int
nr	delayed-inode.c	/^	int nr;$/;"	m	struct:btrfs_async_delayed_work	typeref:typename:int	file:
nr	relocation.c	/^	unsigned int nr;$/;"	m	struct:file_extent_cluster	typeref:typename:unsigned int	file:
nr_bioc_data_stripes	raid56.h	/^static inline int nr_bioc_data_stripes(const struct btrfs_io_context *bioc)$/;"	f	typeref:typename:int
nr_data	raid56.h	/^	u8 nr_data;$/;"	m	struct:btrfs_raid_bio	typeref:typename:u8
nr_data_extents	scrub.c	/^	u16 nr_data_extents;$/;"	m	struct:scrub_stripe	typeref:typename:u16	file:
nr_data_stripes	raid56.h	/^static inline int nr_data_stripes(const struct map_lookup *map)$/;"	f	typeref:typename:int
nr_delalloc_inodes	ctree.h	/^	u64 nr_delalloc_inodes;$/;"	m	struct:btrfs_root	typeref:typename:u64
nr_delayed_iputs	fs.h	/^	atomic_t nr_delayed_iputs;$/;"	m	struct:btrfs_fs_info	typeref:typename:atomic_t
nr_edges	backref.h	/^	int nr_edges;$/;"	m	struct:btrfs_backref_cache	typeref:typename:int
nr_extents	inode.c	/^	int nr_extents;$/;"	m	struct:btrfs_swap_info	typeref:typename:int	file:
nr_global_roots	fs.h	/^	u64 nr_global_roots;$/;"	m	struct:btrfs_fs_info	typeref:typename:u64
nr_items	tree-mod-log.c	/^		int nr_items;$/;"	m	struct:tree_mod_elem::__anon6d656a820108	typeref:typename:int	file:
nr_meta_extents	scrub.c	/^	u16 nr_meta_extents;$/;"	m	struct:scrub_stripe	typeref:typename:u16	file:
nr_nodes	backref.h	/^	int nr_nodes;$/;"	m	struct:btrfs_backref_cache	typeref:typename:int
nr_ordered_extents	ctree.h	/^	u64 nr_ordered_extents;$/;"	m	struct:btrfs_root	typeref:typename:u64
nr_pages	compression.h	/^	unsigned int nr_pages;$/;"	m	struct:compressed_bio	typeref:typename:unsigned int
nr_pages	inode.c	/^	unsigned long nr_pages;$/;"	m	struct:async_extent	typeref:typename:unsigned long	file:
nr_pages	inode.c	/^	unsigned long nr_pages;$/;"	m	struct:btrfs_swap_info	typeref:typename:unsigned long	file:
nr_pages	raid56.h	/^	u16 nr_pages;$/;"	m	struct:btrfs_raid_bio	typeref:typename:u16
nr_sectors	raid56.h	/^	u16 nr_sectors;$/;"	m	struct:btrfs_raid_bio	typeref:typename:u16
nr_sectors	scrub.c	/^	u16 nr_sectors;$/;"	m	struct:scrub_stripe	typeref:typename:u16	file:
nr_swapfiles	ctree.h	/^	atomic_t nr_swapfiles;$/;"	m	struct:btrfs_root	typeref:typename:atomic_t
nr_zones	zoned.h	/^	u32 nr_zones;$/;"	m	struct:btrfs_zoned_device_info	typeref:typename:u32
nsec	ioctl.c	/^	__u32 nsec;$/;"	m	struct:btrfs_ioctl_timespec_32	typeref:typename:__u32	file:
num_bytes	backref.c	/^	u64 num_bytes;$/;"	m	struct:extent_inode_elem	typeref:typename:u64	file:
num_bytes	delayed-ref.h	/^	u64 num_bytes;$/;"	m	struct:btrfs_delayed_ref_head	typeref:typename:u64
num_bytes	delayed-ref.h	/^	u64 num_bytes;$/;"	m	struct:btrfs_delayed_ref_node	typeref:typename:u64
num_bytes	extent-tree.h	/^	u64 num_bytes;$/;"	m	struct:find_free_extent_ctl	typeref:typename:u64
num_bytes	inode.c	/^	u64 num_bytes;$/;"	m	struct:can_nocow_file_extent_args	typeref:typename:u64	file:
num_bytes	ordered-data.h	/^	u64 num_bytes;$/;"	m	struct:btrfs_ordered_extent	typeref:typename:u64
num_bytes	qgroup.h	/^	u64 num_bytes;$/;"	m	struct:btrfs_qgroup_extent_record	typeref:typename:u64
num_bytes	send.c	/^	u64 num_bytes;$/;"	m	struct:clone_root	typeref:typename:u64	file:
num_chunks	inode.c	/^	atomic_t num_chunks;$/;"	m	struct:async_cow	typeref:typename:atomic_t	file:
num_conflict_inodes	tree-log.h	/^	int num_conflict_inodes;$/;"	m	struct:btrfs_log_ctx	typeref:typename:int
num_copies	bio.c	/^	int num_copies;$/;"	m	struct:btrfs_failed_bio	typeref:typename:int	file:
num_copies	check-integrity.c	/^	int num_copies;$/;"	m	struct:btrfsic_stack_frame	typeref:typename:int	file:
num_data_stripes	tests/extent-map-tests.c	/^	u64 num_data_stripes;$/;"	m	struct:rmap_test_vector	typeref:typename:u64	file:
num_devices	volumes.h	/^	u64 num_devices;$/;"	m	struct:btrfs_fs_devices	typeref:typename:u64
num_entries	delayed-ref.h	/^	atomic_t num_entries;$/;"	m	struct:btrfs_delayed_ref_root	typeref:typename:atomic_t
num_extent_pages	extent_io.h	/^static inline int num_extent_pages(const struct extent_buffer *eb)$/;"	f	typeref:typename:int
num_extwriters	transaction.h	/^	atomic_t num_extwriters;$/;"	m	struct:btrfs_transaction	typeref:typename:atomic_t
num_heads	delayed-ref.h	/^	unsigned long num_heads;$/;"	m	struct:btrfs_delayed_ref_root	typeref:typename:unsigned long
num_heads_ready	delayed-ref.h	/^	unsigned long num_heads_ready;$/;"	m	struct:btrfs_delayed_ref_root	typeref:typename:unsigned long
num_pages	free-space-cache.h	/^	int num_pages;$/;"	m	struct:btrfs_io_ctl	typeref:typename:int
num_refs	ref-verify.c	/^	u64 num_refs;$/;"	m	struct:block_entry	typeref:typename:u64	file:
num_refs	ref-verify.c	/^	u64 num_refs;$/;"	m	struct:ref_entry	typeref:typename:u64	file:
num_refs	ref-verify.c	/^	u64 num_refs;$/;"	m	struct:root_entry	typeref:typename:u64	file:
num_roots	send.c	/^	int num_roots;$/;"	m	struct:backref_cache_entry	typeref:typename:int	file:
num_stripes	tests/extent-map-tests.c	/^	u64 num_stripes;$/;"	m	struct:rmap_test_vector	typeref:typename:u64	file:
num_stripes	volumes.c	/^	int num_stripes;$/;"	m	struct:alloc_chunk_ctl	typeref:typename:int	file:
num_stripes	volumes.h	/^	int num_stripes;$/;"	m	struct:map_lookup	typeref:typename:int
num_stripes	volumes.h	/^	u16 num_stripes;$/;"	m	struct:btrfs_io_context	typeref:typename:u16
num_uncorrectable_read_errors	fs.h	/^	atomic64_t num_uncorrectable_read_errors;$/;"	m	struct:btrfs_dev_replace	typeref:typename:atomic64_t
num_write_errors	fs.h	/^	atomic64_t num_write_errors;$/;"	m	struct:btrfs_dev_replace	typeref:typename:atomic64_t
num_writers	transaction.h	/^	atomic_t num_writers;$/;"	m	struct:btrfs_transaction	typeref:typename:atomic_t
obj-$(CONFIG_BTRFS_FS)	Makefile	/^obj-$(CONFIG_BTRFS_FS) := btrfs.o$/;"	m
objectid	delayed-ref.h	/^	u64 objectid;$/;"	m	struct:btrfs_delayed_data_ref	typeref:typename:u64
objectid	export.h	/^	u64 objectid;$/;"	m	struct:btrfs_fid	typeref:typename:u64
objectid_mutex	ctree.h	/^	struct mutex objectid_mutex;$/;"	m	struct:btrfs_root	typeref:struct:mutex
offset	accessors.h	/^	unsigned long offset;$/;"	m	struct:btrfs_map_token	typeref:typename:unsigned long
offset	backref.c	/^	u64 offset;$/;"	m	struct:extent_inode_elem	typeref:typename:u64	file:
offset	delayed-ref.h	/^	u64 offset;$/;"	m	struct:btrfs_data_ref	typeref:typename:u64
offset	delayed-ref.h	/^	u64 offset;$/;"	m	struct:btrfs_delayed_data_ref	typeref:typename:u64
offset	extent_io.c	/^	u64 offset;$/;"	m	struct:fiemap_cache	typeref:typename:u64	file:
offset	free-space-cache.h	/^	u64 offset;$/;"	m	struct:btrfs_free_space	typeref:typename:u64
offset	inode.c	/^	u64 offset;$/;"	m	struct:dir_entry	typeref:typename:u64	file:
offset	ioctl.c	/^	__s64 offset;$/;"	m	struct:btrfs_ioctl_encoded_io_args_32	typeref:typename:__s64	file:
offset	ordered-data.h	/^	u64 offset;$/;"	m	struct:btrfs_ordered_extent	typeref:typename:u64
offset	raid56.h	/^	u32 offset;$/;"	m	struct:raid56_bio_trace_info	typeref:typename:u32
offset	ref-verify.c	/^	u64 offset;$/;"	m	struct:ref_entry	typeref:typename:u64	file:
offset	send.c	/^	u64 offset;$/;"	m	struct:clone_root	typeref:typename:u64	file:
offset_index	free-space-cache.h	/^	struct rb_node offset_index;$/;"	m	struct:btrfs_free_space	typeref:struct:rb_node
offset_to_bit	free-space-cache.c	/^static inline unsigned long offset_to_bit(u64 bitmap_start, u32 unit,$/;"	f	typeref:typename:unsigned long	file:
offset_to_bitmap	free-space-cache.c	/^static inline u64 offset_to_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:u64	file:
old_refcnt	qgroup.h	/^	u64 old_refcnt;$/;"	m	struct:btrfs_qgroup	typeref:typename:u64
old_root	tree-mod-log.c	/^	struct tree_mod_root old_root;$/;"	m	struct:tree_mod_elem	typeref:struct:tree_mod_root	file:
old_roots	qgroup.h	/^	struct ulist *old_roots;$/;"	m	struct:btrfs_qgroup_extent_record	typeref:struct:ulist *
op	free-space-cache.h	/^	const struct btrfs_free_space_op *op;$/;"	m	struct:btrfs_free_space_ctl	typeref:typename:const struct btrfs_free_space_op *
op	tree-mod-log.c	/^	enum btrfs_mod_log_op op;$/;"	m	struct:tree_mod_elem	typeref:enum:btrfs_mod_log_op	file:
open_ctree	disk-io.c	/^int __cold open_ctree(struct super_block *sb, struct btrfs_fs_devices *fs_devices,$/;"	f	typeref:typename:int __cold
open_ctree_partition	disk-io.c	/^int __cold open_ctree_partition(struct super_block *sb, struct btrfs_fs_devices *fs_devices,$/;"	f	typeref:typename:int __cold
open_devices	volumes.h	/^	u64 open_devices;$/;"	m	struct:btrfs_fs_devices	typeref:typename:u64
open_fs_devices	volumes.c	/^static int open_fs_devices(struct btrfs_fs_devices *fs_devices,$/;"	f	typeref:typename:int	file:
open_fs_devices_partition	volumes.c	/^static int open_fs_devices_partition(struct btrfs_fs_devices *fs_devices,$/;"	f	typeref:typename:int	file:
open_seed_devices	volumes.c	/^static struct btrfs_fs_devices *open_seed_devices(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:btrfs_fs_devices *	file:
opened	volumes.h	/^	int opened;$/;"	m	struct:btrfs_fs_devices	typeref:typename:int
operation	raid56.h	/^	enum btrfs_rbio_ops operation;$/;"	m	struct:btrfs_raid_bio	typeref:enum:btrfs_rbio_ops
opf	extent_io.c	/^	blk_opf_t opf;$/;"	m	struct:btrfs_bio_ctrl	typeref:typename:blk_opf_t	file:
ops	zstd.c	/^	const struct btrfs_compress_op *ops;$/;"	m	struct:zstd_workspace_manager	typeref:typename:const struct btrfs_compress_op *	file:
ordered	bio.h	/^			struct btrfs_ordered_extent *ordered;$/;"	m	struct:btrfs_bio::__anon0f27d3d5010a::__anon0f27d3d50308	typeref:struct:btrfs_ordered_extent *
ordered	inode.c	/^	struct btrfs_ordered_extent *ordered;$/;"	m	struct:btrfs_dio_data	typeref:struct:btrfs_ordered_extent *	file:
ordered_bytes	fs.h	/^	struct percpu_counter ordered_bytes;$/;"	m	struct:btrfs_fs_info	typeref:struct:percpu_counter
ordered_data_exit	ordered-data.c	/^void __cold ordered_data_exit(void)$/;"	f	typeref:typename:void __cold
ordered_data_init	ordered-data.c	/^int __init ordered_data_init(void)$/;"	f	typeref:typename:int __init
ordered_extent_lock	ctree.h	/^	spinlock_t ordered_extent_lock;$/;"	m	struct:btrfs_root	typeref:typename:spinlock_t
ordered_extent_mutex	ctree.h	/^	struct mutex ordered_extent_mutex;$/;"	m	struct:btrfs_root	typeref:struct:mutex
ordered_extents	ctree.h	/^	struct list_head ordered_extents;$/;"	m	struct:btrfs_root	typeref:struct:list_head
ordered_extents	tree-log.h	/^	struct list_head ordered_extents;$/;"	m	struct:btrfs_log_ctx	typeref:struct:list_head
ordered_free	async-thread.h	/^	btrfs_func_t ordered_free;$/;"	m	struct:btrfs_work	typeref:typename:btrfs_func_t
ordered_func	async-thread.h	/^	btrfs_func_t ordered_func;$/;"	m	struct:btrfs_work	typeref:typename:btrfs_func_t
ordered_list	async-thread.c	/^	struct list_head ordered_list;$/;"	m	struct:btrfs_workqueue	typeref:struct:list_head	file:
ordered_list	async-thread.h	/^	struct list_head ordered_list;$/;"	m	struct:btrfs_work	typeref:struct:list_head
ordered_offset	subpage.h	/^	unsigned int ordered_offset;$/;"	m	struct:btrfs_subpage_info	typeref:typename:unsigned int
ordered_operations_mutex	fs.h	/^	struct mutex ordered_operations_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:mutex
ordered_root	ctree.h	/^	struct list_head ordered_root;$/;"	m	struct:btrfs_root	typeref:struct:list_head
ordered_root_lock	fs.h	/^	spinlock_t ordered_root_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:spinlock_t
ordered_roots	fs.h	/^	struct list_head ordered_roots;$/;"	m	struct:btrfs_fs_info	typeref:struct:list_head
ordered_tree	btrfs_inode.h	/^	struct btrfs_ordered_inode_tree ordered_tree;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_ordered_inode_tree
orig	free-space-cache.h	/^	void *cur, *orig;$/;"	m	struct:btrfs_io_ctl	typeref:typename:void *
orig_bbio	compression.h	/^		struct btrfs_bio *orig_bbio;$/;"	m	union:compressed_bio::__anona312c9ad010a	typeref:struct:btrfs_bio *
orig_bio	volumes.h	/^	struct bio *orig_bio;$/;"	m	struct:btrfs_io_context	typeref:struct:bio *
orig_bio_end_io	check-integrity.c	/^	bio_end_io_t *orig_bio_end_io;$/;"	m	struct:btrfsic_block	typeref:typename:bio_end_io_t *	file:
orig_bio_private	check-integrity.c	/^	void *orig_bio_private;$/;"	m	struct:btrfsic_block	typeref:typename:void *	file:
orig_block_len	extent_map.h	/^	u64 orig_block_len;$/;"	m	struct:extent_map	typeref:typename:u64
orig_have_caching_bg	extent-tree.h	/^	bool orig_have_caching_bg;$/;"	m	struct:find_free_extent_ctl	typeref:typename:bool
orig_physical	bio.h	/^			u64 orig_physical;$/;"	m	struct:btrfs_bio::__anon0f27d3d5010a::__anon0f27d3d50308	typeref:typename:u64
orig_rsv	transaction.h	/^	struct btrfs_block_rsv *orig_rsv;$/;"	m	struct:btrfs_trans_handle	typeref:struct:btrfs_block_rsv *
orig_start	extent_map.h	/^	u64 orig_start;$/;"	m	struct:extent_map	typeref:typename:u64
orphan	btrfs_inode.h	/^	bool orphan;$/;"	m	struct:btrfs_new_inode_args	typeref:typename:bool
orphan_dir_info	send.c	/^struct orphan_dir_info {$/;"	s	file:
orphan_dirs	send.c	/^	struct rb_root orphan_dirs;$/;"	m	struct:send_ctx	typeref:struct:rb_root	file:
orphanize_inode	send.c	/^static int orphanize_inode(struct send_ctx *sctx, u64 ino, u64 gen,$/;"	f	typeref:typename:int	file:
orphanized	send.c	/^	bool orphanized;$/;"	m	struct:waiting_dir_move	typeref:typename:bool	file:
out_buf	zstd.c	/^	zstd_out_buffer out_buf;$/;"	m	struct:workspace	typeref:typename:zstd_out_buffer	file:
outstanding_extents	btrfs_inode.h	/^	unsigned outstanding_extents;$/;"	m	struct:btrfs_inode	typeref:typename:unsigned
outstanding_isize	ordered-data.h	/^	u64 outstanding_isize;$/;"	m	struct:btrfs_ordered_extent	typeref:typename:u64
overwrite_item	tree-log.c	/^static int overwrite_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
owner	backref.h	/^	u64 owner;$/;"	m	struct:btrfs_backref_node	typeref:typename:u64
owner	extent-io-tree.h	/^	u8 owner;$/;"	m	struct:extent_io_tree	typeref:typename:u8
owner	ref-verify.c	/^	u64 owner;$/;"	m	struct:ref_entry	typeref:typename:u64	file:
owner	relocation.c	/^	u64 owner;$/;"	m	struct:tree_block	typeref:typename:u64	file:
owner_root	tree-checker.h	/^	u64 owner_root;$/;"	m	struct:btrfs_tree_parent_check	typeref:typename:u64
owning_root	delayed-ref.h	/^	u64 owning_root;$/;"	m	struct:btrfs_data_ref	typeref:typename:u64
owning_root	delayed-ref.h	/^	u64 owning_root;$/;"	m	struct:btrfs_tree_ref	typeref:typename:u64
p_list	delayed-inode.h	/^	struct list_head p_list;$/;"	m	struct:btrfs_delayed_node	typeref:struct:list_head
pad	send.c	/^		char pad[256];$/;"	m	union:fs_path::__anon1b81f160010a	typeref:typename:char[256]	file:
page	free-space-cache.h	/^	struct page *page;$/;"	m	struct:btrfs_io_ctl	typeref:struct:page *
page	inode.c	/^	struct page *page;$/;"	m	struct:btrfs_writepage_fixup	typeref:struct:page *	file:
page	raid56.c	/^	struct page *page;$/;"	m	struct:sector_ptr	typeref:struct:page *	file:
page_cache_clear_start	send.c	/^	u64 page_cache_clear_start;$/;"	m	struct:send_ctx	typeref:typename:u64	file:
page_range_has_eb	extent_io.c	/^static bool page_range_has_eb(struct btrfs_fs_info *fs_info, struct page *page)$/;"	f	typeref:typename:bool	file:
pages	extent_io.h	/^	struct page *pages[INLINE_EXTENT_BUFFER_PAGES];$/;"	m	struct:extent_buffer	typeref:struct:page * []
pages	free-space-cache.h	/^	struct page **pages;$/;"	m	struct:btrfs_io_ctl	typeref:struct:page **
pages	inode.c	/^	struct page **pages;$/;"	m	struct:async_extent	typeref:struct:page **	file:
pages	scrub.c	/^	struct page *pages[SCRUB_STRIPE_PAGES];$/;"	m	struct:scrub_stripe	typeref:struct:page * []	file:
pagev	check-integrity.c	/^	struct page **pagev;$/;"	m	struct:btrfsic_block_data_ctx	typeref:struct:page **	file:
parent	backref.h	/^	u64 parent;$/;"	m	struct:prelim_ref	typeref:typename:u64
parent	delayed-ref.h	/^	u64 parent;$/;"	m	struct:btrfs_delayed_data_ref	typeref:typename:u64
parent	delayed-ref.h	/^	u64 parent;$/;"	m	struct:btrfs_delayed_tree_ref	typeref:typename:u64
parent	delayed-ref.h	/^	u64 parent;$/;"	m	struct:btrfs_ref	typeref:typename:u64
parent	ref-verify.c	/^	u64 parent;$/;"	m	struct:ref_entry	typeref:typename:u64	file:
parent	tree-log.c	/^	u64 parent;$/;"	m	struct:btrfs_ino_list	typeref:typename:u64	file:
parent_check	bio.h	/^		struct btrfs_tree_parent_check parent_check;$/;"	m	union:btrfs_bio::__anon0f27d3d5010a	typeref:struct:btrfs_tree_parent_check
parent_gen	export.h	/^	u32 parent_gen;$/;"	m	struct:btrfs_fid	typeref:typename:u32
parent_gen	send.c	/^	u64 parent_gen;$/;"	m	struct:name_cache_entry	typeref:typename:u64	file:
parent_generation	check-integrity.c	/^	u64 parent_generation;$/;"	m	struct:btrfsic_block_link	typeref:typename:u64	file:
parent_ino	send.c	/^	u64 parent_ino;$/;"	m	struct:name_cache_entry	typeref:typename:u64	file:
parent_ino	send.c	/^	u64 parent_ino;$/;"	m	struct:pending_dir_move	typeref:typename:u64	file:
parent_objectid	export.h	/^	u64 parent_objectid;$/;"	m	struct:btrfs_fid	typeref:typename:u64
parent_root	ioctl.c	/^	__u64 parent_root;		\/* in *\/$/;"	m	struct:btrfs_ioctl_send_args_32	typeref:typename:__u64	file:
parent_root	send.c	/^	struct btrfs_root *parent_root;$/;"	m	struct:send_ctx	typeref:struct:btrfs_root *	file:
parent_root_objectid	export.h	/^	u64 parent_root_objectid;$/;"	m	struct:btrfs_fid	typeref:typename:u64
parse_rescue_options	super.c	/^static int parse_rescue_options(struct btrfs_fs_info *info, const char *options)$/;"	f	typeref:typename:int	file:
partition_end	volumes.h	/^	u64 partition_end;$/;"	m	struct:btrfs_device	typeref:typename:u64
partition_start	volumes.h	/^	u64 partition_start;$/;"	m	struct:btrfs_device	typeref:typename:u64
path	backref.h	/^	struct btrfs_backref_node *path[BTRFS_MAX_LEVEL];$/;"	m	struct:btrfs_backref_cache	typeref:struct:btrfs_backref_node * []
path	backref.h	/^	struct btrfs_path *path;$/;"	m	struct:btrfs_backref_iter	typeref:struct:btrfs_path *
path	ctree.h	/^	struct btrfs_path *path;$/;"	m	struct:btrfs_drop_extents_args	typeref:struct:btrfs_path *
path	inode.c	/^	struct btrfs_path path;$/;"	m	struct:data_reloc_warn	typeref:struct:btrfs_path	file:
path	scrub.c	/^	struct btrfs_path	*path;$/;"	m	struct:scrub_warning	typeref:struct:btrfs_path *	file:
path	transaction.h	/^	struct btrfs_path *path;$/;"	m	struct:btrfs_pending_snapshot	typeref:struct:btrfs_path *
path_cache_entries	backref.h	/^	struct btrfs_backref_shared_cache_entry path_cache_entries[BTRFS_MAX_LEVEL];$/;"	m	struct:btrfs_backref_share_check_ctx	typeref:struct:btrfs_backref_shared_cache_entry[]
path_loop	send.c	/^static int path_loop(struct send_ctx *sctx, struct fs_path *name,$/;"	f	typeref:typename:int	file:
paths_from_inode	backref.c	/^int paths_from_inode(u64 inum, struct inode_fs_paths *ipath)$/;"	f	typeref:typename:int
peek_discard_list	discard.c	/^static struct btrfs_block_group *peek_discard_list($/;"	f	typeref:struct:btrfs_block_group *	file:
pending	async-thread.c	/^	atomic_t pending;$/;"	m	struct:btrfs_workqueue	typeref:typename:atomic_t	file:
pending	backref.h	/^	struct list_head pending[BTRFS_MAX_LEVEL];$/;"	m	struct:btrfs_backref_cache	typeref:struct:list_head[]
pending	backref.h	/^	unsigned int pending:1;$/;"	m	struct:btrfs_backref_node	typeref:typename:unsigned int:1
pending	inode.c	/^	atomic_t pending;$/;"	m	struct:btrfs_encoded_read_private	typeref:typename:atomic_t	file:
pending_csums	delayed-ref.h	/^	u64 pending_csums;$/;"	m	struct:btrfs_delayed_ref_root	typeref:typename:u64
pending_dir_move	send.c	/^struct pending_dir_move {$/;"	s	file:
pending_dir_moves	send.c	/^	struct rb_root pending_dir_moves;$/;"	m	struct:send_ctx	typeref:struct:rb_root	file:
pending_edge	backref.h	/^	struct list_head pending_edge;$/;"	m	struct:btrfs_backref_cache	typeref:struct:list_head
pending_io	scrub.c	/^	atomic_t pending_io;$/;"	m	struct:scrub_stripe	typeref:typename:atomic_t	file:
pending_ios	bio.h	/^	atomic_t pending_ios;$/;"	m	struct:btrfs_bio	typeref:typename:atomic_t
pending_ordered	transaction.h	/^	atomic_t pending_ordered;$/;"	m	struct:btrfs_transaction	typeref:typename:atomic_t
pending_readers	locking.h	/^	wait_queue_head_t pending_readers;$/;"	m	struct:btrfs_drew_lock	typeref:typename:wait_queue_head_t
pending_snapshot	transaction.h	/^	struct btrfs_pending_snapshot *pending_snapshot;$/;"	m	struct:btrfs_trans_handle	typeref:struct:btrfs_pending_snapshot *
pending_snapshots	transaction.h	/^	struct list_head pending_snapshots;$/;"	m	struct:btrfs_transaction	typeref:struct:list_head
pending_wait	transaction.h	/^	wait_queue_head_t pending_wait;$/;"	m	struct:btrfs_transaction	typeref:typename:wait_queue_head_t
pending_writers	locking.h	/^	wait_queue_head_t pending_writers;$/;"	m	struct:btrfs_drew_lock	typeref:typename:wait_queue_head_t
pgoff	raid56.c	/^	unsigned int pgoff:24;$/;"	m	struct:sector_ptr	typeref:typename:unsigned int:24	file:
phys	extent_io.c	/^	u64 phys;$/;"	m	struct:fiemap_cache	typeref:typename:u64	file:
physical	scrub.c	/^	u64			physical;$/;"	m	struct:scrub_warning	typeref:typename:u64	file:
physical	scrub.c	/^	u64 physical;$/;"	m	struct:scrub_stripe	typeref:typename:u64	file:
physical	volumes.h	/^		u64 physical;$/;"	m	union:btrfs_io_stripe::__anona66ee266010a	typeref:typename:u64
physical	volumes.h	/^	u64 physical;$/;"	m	struct:btrfs_discard_stripe	typeref:typename:u64
physical_map	block-group.h	/^	struct map_lookup *physical_map;$/;"	m	struct:btrfs_block_group	typeref:struct:map_lookup *
physical_start	tests/extent-map-tests.c	/^	u64 physical_start;$/;"	m	struct:rmap_test_vector	typeref:typename:u64	file:
pin	tree-log.c	/^	int pin;$/;"	m	struct:walk_control	typeref:typename:int	file:
pin_down_extent	extent-tree.c	/^static int pin_down_extent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
pinned	block-group.h	/^	u64 pinned;$/;"	m	struct:btrfs_block_group	typeref:typename:u64
pinned_extents	transaction.h	/^	struct extent_io_tree pinned_extents;$/;"	m	struct:btrfs_transaction	typeref:struct:extent_io_tree
plug_cmp	raid56.c	/^static int plug_cmp(void *priv, const struct list_head *a,$/;"	f	typeref:typename:int	file:
plug_list	raid56.h	/^	struct list_head plug_list;$/;"	m	struct:btrfs_raid_bio	typeref:struct:list_head
policy	extent-tree.h	/^	enum btrfs_extent_allocation_policy policy;$/;"	m	struct:find_free_extent_ctl	typeref:enum:btrfs_extent_allocation_policy
populate_free_space_tree	free-space-tree.c	/^static int populate_free_space_tree(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
post_commit_list	volumes.h	/^	struct list_head post_commit_list; \/* chunk mutex *\/$/;"	m	struct:btrfs_device	typeref:struct:list_head
prealloc_file_extent_cluster	relocation.c	/^static noinline_for_stack int prealloc_file_extent_cluster($/;"	f	typeref:typename:noinline_for_stack int	file:
prealloc_only	tests/inode-tests.c	/^static unsigned long prealloc_only = 0;$/;"	v	typeref:typename:unsigned long	file:
preempt_reclaim_work	fs.h	/^	struct work_struct preempt_reclaim_work;$/;"	m	struct:btrfs_fs_info	typeref:struct:work_struct
preftree	backref.c	/^struct preftree {$/;"	s	file:
preftrees	backref.c	/^struct preftrees {$/;"	s	file:
prelim_ref	backref.h	/^struct prelim_ref {$/;"	s
prelim_ref_compare	backref.c	/^static int prelim_ref_compare(struct prelim_ref *ref1,$/;"	f	typeref:typename:int	file:
prelim_ref_insert	backref.c	/^static void prelim_ref_insert(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
prelim_release	backref.c	/^static void prelim_release(struct preftree *preftree)$/;"	f	typeref:typename:void	file:
prepare_allocation	extent-tree.c	/^static int prepare_allocation(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
prepare_allocation_clustered	extent-tree.c	/^static int prepare_allocation_clustered(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
prepare_eb_write	extent_io.c	/^static void prepare_eb_write(struct extent_buffer *eb)$/;"	f	typeref:typename:void	file:
prepare_list	delayed-inode.h	/^	struct list_head prepare_list;$/;"	m	struct:btrfs_delayed_root	typeref:struct:list_head
prepare_pages	file.c	/^static noinline int prepare_pages(struct inode *inode, struct page **pages,$/;"	f	typeref:typename:noinline int	file:
prepare_to_merge	relocation.c	/^int prepare_to_merge(struct reloc_control *rc, int err)$/;"	f	typeref:typename:noinline_for_stack int	file:
prepare_to_relocate	relocation.c	/^int prepare_to_relocate(struct reloc_control *rc)$/;"	f	typeref:typename:noinline_for_stack int	file:
prepare_uptodate_page	file.c	/^static int prepare_uptodate_page(struct inode *inode,$/;"	f	typeref:typename:int	file:
prev	check-integrity.c	/^	struct btrfsic_stack_frame *prev;$/;"	m	struct:btrfsic_stack_frame	typeref:struct:btrfsic_stack_frame *	file:
prev_discard	fs.h	/^	u64 prev_discard;$/;"	m	struct:btrfs_discard_ctl	typeref:typename:u64
prev_discard_time	fs.h	/^	u64 prev_discard_time;$/;"	m	struct:btrfs_discard_ctl	typeref:typename:u64
prev_extent_map	extent_map.c	/^static struct extent_map *prev_extent_map(struct extent_map *em)$/;"	f	typeref:struct:extent_map *	file:
prev_extents_cache	backref.h	/^	} prev_extents_cache[BTRFS_BACKREF_CTX_PREV_EXTENTS_SIZE];$/;"	m	struct:btrfs_backref_share_check_ctx	typeref:struct:btrfs_backref_share_check_ctx::__anond556f4290108[]
prev_extents_cache_slot	backref.h	/^	int prev_extents_cache_slot;$/;"	m	struct:btrfs_backref_share_check_ctx	typeref:typename:int
prev_leaf_bytenr	backref.h	/^	u64 prev_leaf_bytenr;$/;"	m	struct:btrfs_backref_share_check_ctx	typeref:typename:u64
prev_repair_mirror	bio.c	/^static int prev_repair_mirror(struct btrfs_failed_bio *fbio, int cur_mirror)$/;"	f	typeref:typename:int	file:
prev_state	extent-io-tree.c	/^static inline struct extent_state *prev_state(struct extent_state *state)$/;"	f	typeref:struct:extent_state *	file:
print_chunk	print-tree.c	/^static void print_chunk(const struct extent_buffer *eb, struct btrfs_chunk *chunk)$/;"	f	typeref:typename:void	file:
print_data_reloc_error	inode.c	/^static void print_data_reloc_error(const struct btrfs_inode *inode, u64 file_off,$/;"	f	typeref:typename:void	file:
print_dev_item	print-tree.c	/^static void print_dev_item(const struct extent_buffer *eb,$/;"	f	typeref:typename:void	file:
print_eb_refs_lock	print-tree.c	/^static void print_eb_refs_lock(const struct extent_buffer *eb)$/;"	f	typeref:typename:void	file:
print_extent_data_ref	print-tree.c	/^static void print_extent_data_ref(const struct extent_buffer *eb,$/;"	f	typeref:typename:void	file:
print_extent_item	print-tree.c	/^static void print_extent_item(const struct extent_buffer *eb, int slot, int type)$/;"	f	typeref:typename:void	file:
print_mask	check-integrity.c	/^	u32 print_mask;$/;"	m	struct:btrfsic_state	typeref:typename:u32	file:
print_rescue_option	super.c	/^static void print_rescue_option(struct seq_file *seq, const char *s, bool *printed)$/;"	f	typeref:typename:void	file:
print_uuid_item	print-tree.c	/^static void print_uuid_item(const struct extent_buffer *l, unsigned long offset,$/;"	f	typeref:typename:void	file:
printk_in_rcu	rcu-string.h	/^#define printk_in_rcu(/;"	d
printk_limits	messages.c	/^static struct ratelimit_state printk_limits[] = {$/;"	v	typeref:struct:ratelimit_state[]	file:
printk_ratelimited_in_rcu	rcu-string.h	/^#define printk_ratelimited_in_rcu(/;"	d
priority_flush_states	space-info.c	/^static const enum btrfs_flush_state priority_flush_states[] = {$/;"	g	file:
priority_reclaim_data_space	space-info.c	/^static void priority_reclaim_data_space(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
priority_reclaim_metadata_space	space-info.c	/^static void priority_reclaim_metadata_space(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
priority_tickets	space-info.h	/^	struct list_head priority_tickets;$/;"	m	struct:btrfs_space_info	typeref:struct:list_head
private	bio.h	/^	void *private;$/;"	m	struct:btrfs_bio	typeref:typename:void *
process_all_extents	send.c	/^static int process_all_extents(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
process_all_new_xattrs	send.c	/^static int process_all_new_xattrs(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
process_all_refs	send.c	/^static int process_all_refs(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
process_changed_xattr	send.c	/^static int process_changed_xattr(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
process_deleted_xattr	send.c	/^static int process_deleted_xattr(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
process_dir_items_leaf	tree-log.c	/^static int process_dir_items_leaf(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
process_extent	send.c	/^static int process_extent(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
process_extent_item	ref-verify.c	/^static int process_extent_item(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
process_func	tree-log.c	/^	int (*process_func)(struct btrfs_root *log, struct extent_buffer *eb,$/;"	m	struct:walk_control	typeref:typename:int (*)(struct btrfs_root * log,struct extent_buffer * eb,struct walk_control * wc,u64 gen,int level)	file:
process_leaf	ref-verify.c	/^static int process_leaf(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
process_new_xattr	send.c	/^static int process_new_xattr(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
process_one_buffer	tree-log.c	/^static int process_one_buffer(struct btrfs_root *log,$/;"	f	typeref:typename:int	file:
process_one_page	extent_io.c	/^static void process_one_page(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
process_page_range	tests/extent-io-tests.c	/^static noinline int process_page_range(struct inode *inode, u64 start, u64 end,$/;"	f	typeref:typename:noinline int	file:
process_recorded_refs	send.c	/^static int process_recorded_refs(struct send_ctx *sctx, int *pending_move)$/;"	f	typeref:typename:int	file:
process_recorded_refs_if_needed	send.c	/^static int process_recorded_refs_if_needed(struct send_ctx *sctx, int at_end,$/;"	f	typeref:typename:int	file:
process_verity	send.c	/^static int process_verity(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
processed	backref.h	/^	unsigned int processed:1;$/;"	m	struct:btrfs_backref_node	typeref:typename:unsigned int:1
processed_blocks	relocation.c	/^	struct extent_io_tree processed_blocks;$/;"	m	struct:reloc_control	typeref:struct:extent_io_tree	file:
processed_extent	extent_io.c	/^struct processed_extent {$/;"	s	file:
processing	delayed-ref.h	/^	bool processing;$/;"	m	struct:btrfs_delayed_ref_head	typeref:typename:bool
profiles_lock	fs.h	/^	seqlock_t profiles_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:seqlock_t
progress	block-group.h	/^	atomic_t progress;$/;"	m	struct:btrfs_caching_control	typeref:typename:atomic_t
prop_compress	btrfs_inode.h	/^	unsigned prop_compress;		\/* per-file compression algorithm *\/$/;"	m	struct:btrfs_inode	typeref:typename:unsigned
prop_compression_apply	props.c	/^static int prop_compression_apply(struct inode *inode, const char *value,$/;"	f	typeref:typename:int	file:
prop_compression_extract	props.c	/^static const char *prop_compression_extract(struct inode *inode)$/;"	f	typeref:typename:const char *	file:
prop_compression_ignore	props.c	/^static bool prop_compression_ignore(const struct btrfs_inode *inode)$/;"	f	typeref:typename:bool	file:
prop_compression_validate	props.c	/^static int prop_compression_validate(const struct btrfs_inode *inode,$/;"	f	typeref:typename:int	file:
prop_handler	props.c	/^struct prop_handler {$/;"	s	file:
prop_handlers	props.c	/^static struct prop_handler prop_handlers[] = {$/;"	v	typeref:struct:prop_handler[]	file:
proto	send.c	/^	u32 proto;$/;"	m	struct:send_ctx	typeref:typename:u32	file:
proto_cmd_ok	send.c	/^static bool proto_cmd_ok(const struct send_ctx *sctx, int cmd)$/;"	f	typeref:typename:__maybe_unused bool	file:
ptr	volumes.h	/^	void *ptr;$/;"	m	struct:btrfs_swapfile_pin	typeref:typename:void *
push_for_double_split	ctree.c	/^static noinline int push_for_double_split(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
push_leaf_left	ctree.c	/^static int push_leaf_left(struct btrfs_trans_handle *trans, struct btrfs_root$/;"	f	typeref:typename:int	file:
push_leaf_right	ctree.c	/^static int push_leaf_right(struct btrfs_trans_handle *trans, struct btrfs_root$/;"	f	typeref:typename:int	file:
push_node_left	ctree.c	/^static int push_node_left(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
push_nodes_for_insert	ctree.c	/^static noinline int push_nodes_for_insert(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
put_data	send.c	/^	bool put_data;$/;"	m	struct:send_ctx	typeref:typename:bool	file:
put_data_header	send.c	/^static int put_data_header(struct send_ctx *sctx, u32 len)$/;"	f	typeref:typename:int	file:
put_file_data	send.c	/^static int put_file_data(struct send_ctx *sctx, u64 offset, u32 len)$/;"	f	typeref:typename:int	file:
put_unaligned_le8	accessors.h	/^static inline void put_unaligned_le8(u8 val, void *p)$/;"	f	typeref:typename:void
put_workspace	compression.c	/^static void put_workspace(int type, struct list_head *ws)$/;"	f	typeref:typename:void	file:
qgroup_account_snapshot	transaction.c	/^static int qgroup_account_snapshot(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
qgroup_attrs	sysfs.c	/^static struct attribute *qgroup_attrs[] = {$/;"	v	typeref:struct:attribute * []	file:
qgroup_check_limits	qgroup.c	/^static bool qgroup_check_limits(const struct btrfs_qgroup *qg, u64 num_bytes)$/;"	f	typeref:typename:bool	file:
qgroup_convert_meta	qgroup.c	/^static void qgroup_convert_meta(struct btrfs_fs_info *fs_info, u64 ref_root,$/;"	f	typeref:typename:void	file:
qgroup_dirty	qgroup.c	/^static void qgroup_dirty(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
qgroup_drop_subtree_thres	fs.h	/^	u8 qgroup_drop_subtree_thres;$/;"	m	struct:btrfs_fs_info	typeref:typename:u8
qgroup_drop_subtree_thres_show	sysfs.c	/^static ssize_t qgroup_drop_subtree_thres_show(struct kobject *qgroups_kobj,$/;"	f	typeref:typename:ssize_t	file:
qgroup_drop_subtree_thres_store	sysfs.c	/^static ssize_t qgroup_drop_subtree_thres_store(struct kobject *qgroups_kobj,$/;"	f	typeref:typename:ssize_t	file:
qgroup_enabled_show	sysfs.c	/^static ssize_t qgroup_enabled_show(struct kobject *qgroups_kobj,$/;"	f	typeref:typename:ssize_t	file:
qgroup_flags	fs.h	/^	u64 qgroup_flags;$/;"	m	struct:btrfs_fs_info	typeref:typename:u64
qgroup_flush_wait	ctree.h	/^	wait_queue_head_t qgroup_flush_wait;$/;"	m	struct:btrfs_root	typeref:typename:wait_queue_head_t
qgroup_free_reserved_data	qgroup.c	/^static int qgroup_free_reserved_data(struct btrfs_inode *inode,$/;"	f	typeref:typename:int	file:
qgroup_inconsistent_show	sysfs.c	/^static ssize_t qgroup_inconsistent_show(struct kobject *qgroups_kobj,$/;"	f	typeref:typename:ssize_t	file:
qgroup_ioctl_lock	fs.h	/^	struct mutex qgroup_ioctl_lock;$/;"	m	struct:btrfs_fs_info	typeref:struct:mutex
qgroup_kobj_to_fs_info	sysfs.c	/^static inline struct btrfs_fs_info *qgroup_kobj_to_fs_info(struct kobject *kobj)$/;"	f	typeref:struct:btrfs_fs_info *	file:
qgroup_ktype	sysfs.c	/^static const struct kobj_type qgroup_ktype = {$/;"	v	typeref:typename:const struct kobj_type	file:
qgroup_lock	fs.h	/^	spinlock_t qgroup_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:spinlock_t
qgroup_mark_inconsistent	qgroup.c	/^static void qgroup_mark_inconsistent(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
qgroup_meta_rsv_lock	ctree.h	/^	spinlock_t qgroup_meta_rsv_lock;$/;"	m	struct:btrfs_root	typeref:typename:spinlock_t
qgroup_meta_rsv_pertrans	ctree.h	/^	u64 qgroup_meta_rsv_pertrans;$/;"	m	struct:btrfs_root	typeref:typename:u64
qgroup_meta_rsv_prealloc	ctree.h	/^	u64 qgroup_meta_rsv_prealloc;$/;"	m	struct:btrfs_root	typeref:typename:u64
qgroup_release	sysfs.c	/^static void qgroup_release(struct kobject *kobj)$/;"	f	typeref:typename:void	file:
qgroup_rescan_completion	fs.h	/^	struct completion qgroup_rescan_completion;$/;"	m	struct:btrfs_fs_info	typeref:struct:completion
qgroup_rescan_init	qgroup.c	/^qgroup_rescan_init(struct btrfs_fs_info *fs_info, u64 progress_objectid,$/;"	f	typeref:typename:int	file:
qgroup_rescan_leaf	qgroup.c	/^static int qgroup_rescan_leaf(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
qgroup_rescan_lock	fs.h	/^	struct mutex qgroup_rescan_lock;$/;"	m	struct:btrfs_fs_info	typeref:struct:mutex
qgroup_rescan_progress	fs.h	/^	struct btrfs_key qgroup_rescan_progress;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_key
qgroup_rescan_running	fs.h	/^	bool qgroup_rescan_running;$/;"	m	struct:btrfs_fs_info	typeref:typename:bool
qgroup_rescan_work	fs.h	/^	struct btrfs_work qgroup_rescan_work;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_work
qgroup_rescan_workers	fs.h	/^	struct btrfs_workqueue *qgroup_rescan_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_workqueue *
qgroup_rescan_zero_tracking	qgroup.c	/^qgroup_rescan_zero_tracking(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
qgroup_reserve	qgroup.c	/^static int qgroup_reserve(struct btrfs_root *root, u64 num_bytes, bool enforce,$/;"	f	typeref:typename:int	file:
qgroup_reserve_data	qgroup.c	/^static int qgroup_reserve_data(struct btrfs_inode *inode,$/;"	f	typeref:typename:int	file:
qgroup_reserved	ctree.h	/^	int qgroup_reserved;$/;"	m	struct:btrfs_replace_extent_info	typeref:typename:int
qgroup_rsv	ordered-data.h	/^	int qgroup_rsv;$/;"	m	struct:btrfs_ordered_extent	typeref:typename:int
qgroup_rsv_add	qgroup.c	/^static void qgroup_rsv_add(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
qgroup_rsv_add_by_qgroup	qgroup.c	/^static void qgroup_rsv_add_by_qgroup(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
qgroup_rsv_release	qgroup.c	/^static void qgroup_rsv_release(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
qgroup_rsv_release_by_qgroup	qgroup.c	/^static void qgroup_rsv_release_by_qgroup(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
qgroup_rsv_reserved	block-rsv.h	/^	u64 qgroup_rsv_reserved;$/;"	m	struct:btrfs_block_rsv	typeref:typename:u64
qgroup_rsv_size	block-rsv.h	/^	u64 qgroup_rsv_size;$/;"	m	struct:btrfs_block_rsv	typeref:typename:u64
qgroup_rsv_total	qgroup.c	/^static u64 qgroup_rsv_total(const struct btrfs_qgroup *qgroup)$/;"	f	typeref:typename:u64	file:
qgroup_rsv_type_str	qgroup.c	/^static const char *qgroup_rsv_type_str(enum btrfs_qgroup_rsv_type type)$/;"	f	typeref:typename:const char *	file:
qgroup_seq	fs.h	/^	u64 qgroup_seq;$/;"	m	struct:btrfs_fs_info	typeref:typename:u64
qgroup_to_aux	qgroup.c	/^static inline u64 qgroup_to_aux(struct btrfs_qgroup *qg)$/;"	f	typeref:typename:u64	file:
qgroup_to_skip	delayed-ref.h	/^	u64 qgroup_to_skip;$/;"	m	struct:btrfs_delayed_ref_root	typeref:typename:u64
qgroup_trace_extent_swap	qgroup.c	/^static int qgroup_trace_extent_swap(struct btrfs_trans_handle* trans,$/;"	f	typeref:typename:int	file:
qgroup_trace_new_subtree_blocks	qgroup.c	/^static int qgroup_trace_new_subtree_blocks(struct btrfs_trans_handle* trans,$/;"	f	typeref:typename:int	file:
qgroup_trace_subtree_swap	qgroup.c	/^static int qgroup_trace_subtree_swap(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
qgroup_tree	fs.h	/^	struct rb_root qgroup_tree;$/;"	m	struct:btrfs_fs_info	typeref:struct:rb_root
qgroup_ulist	fs.h	/^	struct ulist *qgroup_ulist;$/;"	m	struct:btrfs_fs_info	typeref:struct:ulist *
qgroup_unreserve_range	qgroup.c	/^static int qgroup_unreserve_range(struct btrfs_inode *inode,$/;"	f	typeref:typename:int	file:
qgroup_update_counters	qgroup.c	/^static int qgroup_update_counters(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
qgroup_update_refcnt	qgroup.c	/^static int qgroup_update_refcnt(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
qgroupid	qgroup.h	/^	u64 qgroupid;$/;"	m	struct:btrfs_qgroup	typeref:typename:u64
qgroups_attrs	sysfs.c	/^static struct attribute *qgroups_attrs[] = {$/;"	v	typeref:struct:attribute * []	file:
qgroups_kobj	fs.h	/^	struct kobject *qgroups_kobj;$/;"	m	struct:btrfs_fs_info	typeref:struct:kobject *
qgroups_ktype	sysfs.c	/^static const struct kobj_type qgroups_ktype = {$/;"	v	typeref:typename:const struct kobj_type	file:
qgroups_release	sysfs.c	/^static void qgroups_release(struct kobject *kobj)$/;"	f	typeref:typename:void	file:
queue_scrub_stripe	scrub.c	/^static int queue_scrub_stripe(struct scrub_ctx *sctx, struct btrfs_block_group *bg,$/;"	f	typeref:typename:int	file:
quick_update_accounting	qgroup.c	/^static int quick_update_accounting(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
quota_override_show	sysfs.c	/^static ssize_t quota_override_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
quota_override_store	sysfs.c	/^static ssize_t quota_override_store(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
quota_root	fs.h	/^	struct btrfs_root *quota_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_root *
ra	send.c	/^	struct file_ra_state ra;$/;"	m	struct:send_ctx	typeref:struct:file_ra_state	file:
radix_sort	compression.c	/^static void radix_sort(struct bucket_item *array, struct bucket_item *array_buf,$/;"	f	typeref:typename:void	file:
raid56_bio_trace_info	raid56.h	/^struct raid56_bio_trace_info {$/;"	s
raid56_data_stripes	scrub.c	/^	struct scrub_stripe	*raid56_data_stripes;$/;"	m	struct:scrub_ctx	typeref:struct:scrub_stripe *	file:
raid56_parity_alloc_scrub_rbio	raid56.c	/^struct btrfs_raid_bio *raid56_parity_alloc_scrub_rbio(struct bio *bio,$/;"	f	typeref:struct:btrfs_raid_bio *
raid56_parity_cache_data_pages	raid56.c	/^void raid56_parity_cache_data_pages(struct btrfs_raid_bio *rbio,$/;"	f	typeref:typename:void
raid56_parity_recover	raid56.c	/^void raid56_parity_recover(struct bio *bio, struct btrfs_io_context *bioc,$/;"	f	typeref:typename:void
raid56_parity_submit_scrub_rbio	raid56.c	/^void raid56_parity_submit_scrub_rbio(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:void
raid56_parity_write	raid56.c	/^void raid56_parity_write(struct bio *bio, struct btrfs_io_context *bioc)$/;"	f	typeref:typename:void
raid56_scrub_wait_endio	scrub.c	/^static void raid56_scrub_wait_endio(struct bio *bio)$/;"	f	typeref:typename:void	file:
raid_attrs	sysfs.c	/^static struct attribute *raid_attrs[] = {$/;"	v	typeref:struct:attribute * []	file:
raid_bytes_show	sysfs.c	/^static ssize_t raid_bytes_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
raid_kobject	sysfs.c	/^struct raid_kobject {$/;"	s	file:
raid_name	volumes.h	/^	const char raid_name[8]; \/* name of the raid *\/$/;"	m	struct:btrfs_raid_attr	typeref:typename:const char[8]
raid_type	tests/extent-map-tests.c	/^	u64 raid_type;$/;"	m	struct:rmap_test_vector	typeref:typename:u64	file:
raid_unplug	raid56.c	/^static void raid_unplug(struct blk_plug_cb *cb, bool from_schedule)$/;"	f	typeref:typename:void	file:
raid_wait_read_end_io	raid56.c	/^static void raid_wait_read_end_io(struct bio *bio)$/;"	f	typeref:typename:void	file:
raid_wait_write_end_io	raid56.c	/^static void raid_wait_write_end_io(struct bio *bio)$/;"	f	typeref:typename:void	file:
ram_bytes	extent-tree.h	/^	u64 ram_bytes;$/;"	m	struct:find_free_extent_ctl	typeref:typename:u64
ram_bytes	extent_map.h	/^	u64 ram_bytes;$/;"	m	struct:extent_map	typeref:typename:u64
ram_bytes	ordered-data.h	/^	u64 ram_bytes;$/;"	m	struct:btrfs_ordered_extent	typeref:typename:u64
ram_size	inode.c	/^	u64 ram_size;$/;"	m	struct:async_extent	typeref:typename:u64	file:
range_changed	extent_io.h	/^	struct ulist range_changed;$/;"	m	struct:extent_changeset	typeref:struct:ulist
range_end	extent_map.c	/^static u64 range_end(u64 start, u64 len)$/;"	f	typeref:typename:u64	file:
range_is_hole_in_parent	send.c	/^static int range_is_hole_in_parent(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
range_overlaps	ordered-data.c	/^static int range_overlaps(struct btrfs_ordered_extent *entry, u64 file_offset,$/;"	f	typeref:typename:int	file:
rb_node	backref.h	/^		struct rb_node rb_node;$/;"	m	struct:btrfs_backref_node::__anond556f4290208	typeref:struct:rb_node
rb_node	btrfs_inode.h	/^	struct rb_node rb_node;$/;"	m	struct:btrfs_inode	typeref:struct:rb_node
rb_node	ctree.h	/^	struct rb_node rb_node;$/;"	m	struct:btrfs_root	typeref:struct:rb_node
rb_node	defrag.c	/^	struct rb_node rb_node;$/;"	m	struct:inode_defrag	typeref:struct:rb_node	file:
rb_node	delayed-inode.h	/^	struct rb_node rb_node;$/;"	m	struct:btrfs_delayed_item	typeref:struct:rb_node
rb_node	extent-io-tree.c	/^	struct rb_node rb_node;$/;"	m	struct:tree_entry	typeref:struct:rb_node	file:
rb_node	extent-io-tree.h	/^	struct rb_node rb_node;$/;"	m	struct:extent_state	typeref:struct:rb_node
rb_node	extent_map.h	/^	struct rb_node rb_node;$/;"	m	struct:extent_map	typeref:struct:rb_node
rb_node	misc.h	/^	struct rb_node rb_node;$/;"	m	struct:rb_simple_node	typeref:struct:rb_node
rb_node	ordered-data.h	/^	struct rb_node rb_node;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:rb_node
rb_node	relocation.c	/^		struct rb_node rb_node;$/;"	m	struct:mapping_node::__anon97879c060108	typeref:struct:rb_node	file:
rb_node	relocation.c	/^		struct rb_node rb_node;$/;"	m	struct:tree_block::__anon97879c060208	typeref:struct:rb_node	file:
rb_node	ulist.h	/^	struct rb_node rb_node;	\/* used to speed up search *\/$/;"	m	struct:ulist_node	typeref:struct:rb_node
rb_root	backref.h	/^	struct rb_root rb_root;$/;"	m	struct:btrfs_backref_cache	typeref:struct:rb_root
rb_root	relocation.c	/^	struct rb_root rb_root;$/;"	m	struct:mapping_tree	typeref:struct:rb_root	file:
rb_simple_insert	misc.h	/^static inline struct rb_node *rb_simple_insert(struct rb_root *root, u64 bytenr,$/;"	f	typeref:struct:rb_node *
rb_simple_node	misc.h	/^struct rb_simple_node {$/;"	s
rb_simple_search	misc.h	/^static inline struct rb_node *rb_simple_search(struct rb_root *root, u64 bytenr)$/;"	f	typeref:struct:rb_node *
rb_simple_search_first	misc.h	/^static inline struct rb_node *rb_simple_search_first(struct rb_root *root,$/;"	f	typeref:struct:rb_node *
rbio_add_bio	raid56.c	/^static void rbio_add_bio(struct btrfs_raid_bio *rbio, struct bio *orig_bio)$/;"	f	typeref:typename:void	file:
rbio_add_io_sector	raid56.c	/^static int rbio_add_io_sector(struct btrfs_raid_bio *rbio,$/;"	f	typeref:typename:int	file:
rbio_bucket	raid56.c	/^static int rbio_bucket(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:int	file:
rbio_can_merge	raid56.c	/^static int rbio_can_merge(struct btrfs_raid_bio *last,$/;"	f	typeref:typename:int	file:
rbio_endio_bio_list	raid56.c	/^static void rbio_endio_bio_list(struct bio *cur, blk_status_t err)$/;"	f	typeref:typename:void	file:
rbio_is_full	raid56.c	/^static int rbio_is_full(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:int	file:
rbio_list	raid56.c	/^	struct list_head rbio_list;$/;"	m	struct:btrfs_plug_cb	typeref:struct:list_head	file:
rbio_orig_end_io	raid56.c	/^static void rbio_orig_end_io(struct btrfs_raid_bio *rbio, blk_status_t err)$/;"	f	typeref:typename:void	file:
rbio_pstripe_sector	raid56.c	/^static struct sector_ptr *rbio_pstripe_sector(const struct btrfs_raid_bio *rbio,$/;"	f	typeref:struct:sector_ptr *	file:
rbio_qstripe_sector	raid56.c	/^static struct sector_ptr *rbio_qstripe_sector(const struct btrfs_raid_bio *rbio,$/;"	f	typeref:struct:sector_ptr *	file:
rbio_stripe_sector	raid56.c	/^static struct sector_ptr *rbio_stripe_sector(const struct btrfs_raid_bio *rbio,$/;"	f	typeref:struct:sector_ptr *	file:
rbio_stripe_sector_index	raid56.c	/^static unsigned int rbio_stripe_sector_index(const struct btrfs_raid_bio *rbio,$/;"	f	typeref:typename:unsigned int	file:
rbio_update_error_bitmap	raid56.c	/^static void rbio_update_error_bitmap(struct btrfs_raid_bio *rbio, struct bio *bio)$/;"	f	typeref:typename:void	file:
rbnode	backref.h	/^	struct rb_node rbnode;$/;"	m	struct:prelim_ref	typeref:struct:rb_node
rbtree_deleted_refs	send.c	/^	struct rb_root rbtree_deleted_refs;$/;"	m	struct:send_ctx	typeref:struct:rb_root	file:
rbtree_iterate_from_safe	qgroup.c	/^#define rbtree_iterate_from_safe(/;"	d	file:
rbtree_new_refs	send.c	/^	struct rb_root rbtree_new_refs;$/;"	m	struct:send_ctx	typeref:struct:rb_root	file:
rbtree_ref_comp	send.c	/^static int rbtree_ref_comp(const void *k, const struct rb_node *node)$/;"	f	typeref:typename:int	file:
rbtree_ref_less	send.c	/^static bool rbtree_ref_less(struct rb_node *node, const struct rb_node *parent)$/;"	f	typeref:typename:bool	file:
rcu	rcu-string.h	/^	struct rcu_head rcu;$/;"	m	struct:rcu_string	typeref:struct:rcu_head
rcu_head	extent_io.h	/^	struct rcu_head rcu_head;$/;"	m	struct:extent_buffer	typeref:struct:rcu_head
rcu_str_deref	rcu-string.h	/^#define rcu_str_deref(/;"	d
rcu_string	rcu-string.h	/^struct rcu_string {$/;"	s
rcu_string_free	rcu-string.h	/^static inline void rcu_string_free(struct rcu_string *str)$/;"	f	typeref:typename:void
rcu_string_strdup	rcu-string.h	/^static inline struct rcu_string *rcu_string_strdup(const char *src, gfp_t mask)$/;"	f	typeref:struct:rcu_string *
rdev	send.c	/^	u64 rdev;$/;"	m	struct:btrfs_inode_info	typeref:typename:u64	file:
read_alloc_one_name	tree-log.c	/^static int read_alloc_one_name(struct extent_buffer *eb, void *start, int len,$/;"	f	typeref:typename:int	file:
read_backup_root	disk-io.c	/^static int read_backup_root(struct btrfs_fs_info *fs_info, u8 priority)$/;"	f	typeref:typename:int	file:
read_bg_from_eb	block-group.c	/^static int read_bg_from_eb(struct btrfs_fs_info *fs_info, struct btrfs_key *key,$/;"	f	typeref:typename:int	file:
read_block_for_search	ctree.c	/^read_block_for_search(struct btrfs_root *root, struct btrfs_path *p,$/;"	f	typeref:typename:int	file:
read_compress_length	lzo.c	/^static inline size_t read_compress_length(const char *buf)$/;"	f	typeref:typename:size_t	file:
read_eb_member	accessors.h	/^#define read_eb_member(/;"	d
read_extent_buffer	extent_io.c	/^void read_extent_buffer(const struct extent_buffer *eb, void *dstv,$/;"	f	typeref:typename:void
read_extent_buffer_pages	extent_io.c	/^int read_extent_buffer_pages(struct extent_buffer *eb, int wait, int mirror_num,$/;"	f	typeref:typename:int
read_extent_buffer_to_user_nofault	extent_io.c	/^int read_extent_buffer_to_user_nofault(const struct extent_buffer *eb,$/;"	f	typeref:typename:int
read_inline_extent	inode.c	/^static int read_inline_extent(struct btrfs_inode *inode, struct btrfs_path *path,$/;"	f	typeref:typename:int	file:
read_key_bytes	verity.c	/^static int read_key_bytes(struct btrfs_inode *inode, u8 key_type, u64 offset,$/;"	f	typeref:typename:int	file:
read_mirror	extent_io.h	/^	int read_mirror;$/;"	m	struct:extent_buffer	typeref:typename:int
read_one_block_group	block-group.c	/^static int read_one_block_group(struct btrfs_fs_info *info,$/;"	f	typeref:typename:int	file:
read_one_chunk	volumes.c	/^static int read_one_chunk(struct btrfs_key *key, struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
read_one_dev	volumes.c	/^static int read_one_dev(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
read_one_dev_partition	volumes.c	/^static int read_one_dev_partition(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
read_one_inode	tree-log.c	/^static noinline struct inode *read_one_inode(struct btrfs_root *root,$/;"	f	typeref:typename:noinline struct inode *	file:
read_policy	volumes.h	/^	enum btrfs_read_policy read_policy;$/;"	m	struct:btrfs_fs_devices	typeref:enum:btrfs_read_policy
read_symlink	send.c	/^static int read_symlink(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
read_tree_block	disk-io.c	/^struct extent_buffer *read_tree_block(struct btrfs_fs_info *fs_info, u64 bytenr,$/;"	f	typeref:struct:extent_buffer *
read_tree_root_path	disk-io.c	/^static struct btrfs_root *read_tree_root_path(struct btrfs_root *tree_root,$/;"	f	typeref:struct:btrfs_root *	file:
read_zone_info	zoned.c	/^static int read_zone_info(struct btrfs_fs_info *fs_info, u64 logical,$/;"	f	typeref:typename:int	file:
reada	ctree.h	/^	u8 reada;$/;"	m	struct:btrfs_path	typeref:typename:u8
reada_count	extent-tree.c	/^	int reada_count;$/;"	m	struct:walk_control	typeref:typename:int	file:
reada_for_balance	ctree.c	/^static noinline void reada_for_balance(struct btrfs_path *path, int level)$/;"	f	typeref:typename:noinline void	file:
reada_for_search	ctree.c	/^static void reada_for_search(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
reada_slot	extent-tree.c	/^	int reada_slot;$/;"	m	struct:walk_control	typeref:typename:int	file:
reada_walk_down	extent-tree.c	/^static noinline void reada_walk_down(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline void	file:
readahead_cache	free-space-cache.c	/^static void readahead_cache(struct inode *inode)$/;"	f	typeref:typename:void	file:
readahead_tree_node_children	volumes.c	/^static void readahead_tree_node_children(struct extent_buffer *node)$/;"	f	typeref:typename:void	file:
readdir_list	delayed-inode.h	/^	struct list_head readdir_list;	\/* used for readdir items *\/$/;"	m	struct:btrfs_delayed_item	typeref:struct:list_head
readers	locking.h	/^	atomic_t readers;$/;"	m	struct:btrfs_drew_lock	typeref:typename:atomic_t
readers	subpage.h	/^	atomic_t readers;$/;"	m	struct:btrfs_subpage	typeref:typename:atomic_t
readonly	scrub.c	/^	int			readonly;$/;"	m	struct:scrub_ctx	typeref:typename:int	file:
readonly	transaction.h	/^	bool readonly;$/;"	m	struct:btrfs_pending_snapshot	typeref:typename:bool
real_root	delayed-ref.h	/^	u64 real_root;$/;"	m	struct:btrfs_ref	typeref:typename:u64
real_stripes	raid56.h	/^	u8 real_stripes;$/;"	m	struct:btrfs_raid_bio	typeref:typename:u8
recalculate_thresholds	free-space-cache.c	/^static void recalculate_thresholds(struct btrfs_free_space_ctl *ctl)$/;"	f	typeref:typename:void	file:
reclaim_bgs	fs.h	/^	struct list_head reclaim_bgs;$/;"	m	struct:btrfs_fs_info	typeref:struct:list_head
reclaim_bgs_cmp	block-group.c	/^static int reclaim_bgs_cmp(void *unused, const struct list_head *a,$/;"	f	typeref:typename:int	file:
reclaim_bgs_lock	fs.h	/^	struct mutex reclaim_bgs_lock;$/;"	m	struct:btrfs_fs_info	typeref:struct:mutex
reclaim_bgs_work	fs.h	/^	struct work_struct reclaim_bgs_work;$/;"	m	struct:btrfs_fs_info	typeref:struct:work_struct
reclaim_size	space-info.h	/^	u64 reclaim_size;$/;"	m	struct:btrfs_space_info	typeref:typename:u64
record_changed_ref	send.c	/^static int record_changed_ref(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
record_deleted_ref	send.c	/^static int record_deleted_ref(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
record_deleted_ref_if_needed	send.c	/^static int record_deleted_ref_if_needed(int num, u64 dir, int index,$/;"	f	typeref:typename:int	file:
record_new_ref	send.c	/^static int record_new_ref(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
record_new_ref_if_needed	send.c	/^static int record_new_ref_if_needed(int num, u64 dir, int index,$/;"	f	typeref:typename:int	file:
record_ref_in_tree	send.c	/^static int record_ref_in_tree(struct rb_root *root, struct list_head *refs,$/;"	f	typeref:typename:int	file:
record_reloc_root_in_trans	relocation.c	/^static int record_reloc_root_in_trans(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
record_root_in_trans	transaction.c	/^static int record_root_in_trans(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
recorded_ref	send.c	/^struct recorded_ref {$/;"	s	file:
recorded_ref_alloc	send.c	/^static struct recorded_ref *recorded_ref_alloc(void)$/;"	f	typeref:struct:recorded_ref *	file:
recorded_ref_free	send.c	/^static void recorded_ref_free(struct recorded_ref *ref)$/;"	f	typeref:typename:void	file:
recover_rbio	raid56.c	/^static void recover_rbio(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:void	file:
recover_rbio_work	raid56.c	/^static void recover_rbio_work(struct work_struct *work)$/;"	f	typeref:typename:void	file:
recover_rbio_work_locked	raid56.c	/^static void recover_rbio_work_locked(struct work_struct *work)$/;"	f	typeref:typename:void	file:
recover_scrub_rbio	raid56.c	/^static int recover_scrub_rbio(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:int	file:
recover_sectors	raid56.c	/^static int recover_sectors(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:int	file:
recover_vertical	raid56.c	/^static int recover_vertical(struct btrfs_raid_bio *rbio, int sector_nr,$/;"	f	typeref:typename:int	file:
ref	ref-verify.c	/^	struct ref_entry ref;$/;"	m	struct:ref_action	typeref:struct:ref_entry	file:
ref_action	ref-verify.c	/^struct ref_action {$/;"	s	file:
ref_add_list	delayed-ref.h	/^	struct list_head ref_add_list;$/;"	m	struct:btrfs_delayed_ref_head	typeref:struct:list_head
ref_cnt	check-integrity.c	/^	u32 ref_cnt;$/;"	m	struct:btrfsic_block_link	typeref:typename:u32	file:
ref_entry	ref-verify.c	/^struct ref_entry {$/;"	s	file:
ref_from_list	check-integrity.c	/^	struct list_head ref_from_list;	\/* list *\/$/;"	m	struct:btrfsic_block	typeref:struct:list_head	file:
ref_get_fields	tree-log.c	/^static int ref_get_fields(struct extent_buffer *eb, unsigned long ref_ptr,$/;"	f	typeref:typename:int	file:
ref_mod	delayed-ref.h	/^	int ref_mod;$/;"	m	struct:btrfs_delayed_ref_head	typeref:typename:int
ref_mod	delayed-ref.h	/^	int ref_mod;$/;"	m	struct:btrfs_delayed_ref_node	typeref:typename:int
ref_node	delayed-ref.h	/^	struct rb_node ref_node;$/;"	m	struct:btrfs_delayed_ref_node	typeref:struct:rb_node
ref_to_list	check-integrity.c	/^	struct list_head ref_to_list;	\/* list *\/$/;"	m	struct:btrfsic_block	typeref:struct:list_head	file:
ref_tree	delayed-ref.h	/^	struct rb_root_cached ref_tree;$/;"	m	struct:btrfs_delayed_ref_head	typeref:struct:rb_root_cached
ref_verify_lock	fs.h	/^	spinlock_t ref_verify_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:spinlock_t
refill_lock	fs.h	/^	spinlock_t refill_lock;$/;"	m	struct:btrfs_free_cluster	typeref:typename:spinlock_t
refresh_ref_path	send.c	/^static int refresh_ref_path(struct send_ctx *sctx, struct recorded_ref *ref)$/;"	f	typeref:typename:int	file:
refs	backref.h	/^	struct ulist *refs;$/;"	m	struct:btrfs_backref_walk_ctx	typeref:struct:ulist *
refs	backref.h	/^	struct ulist refs;$/;"	m	struct:btrfs_backref_share_check_ctx	typeref:struct:ulist
refs	block-group.h	/^	refcount_t refs;$/;"	m	struct:btrfs_block_group	typeref:typename:refcount_t
refs	ctree.h	/^	refcount_t refs;$/;"	m	struct:btrfs_root	typeref:typename:refcount_t
refs	delayed-inode.h	/^	refcount_t refs;$/;"	m	struct:btrfs_delayed_item	typeref:typename:refcount_t
refs	delayed-inode.h	/^	refcount_t refs;$/;"	m	struct:btrfs_delayed_node	typeref:typename:refcount_t
refs	delayed-ref.h	/^	refcount_t refs;$/;"	m	struct:btrfs_delayed_ref_head	typeref:typename:refcount_t
refs	delayed-ref.h	/^	refcount_t refs;$/;"	m	struct:btrfs_delayed_ref_node	typeref:typename:refcount_t
refs	extent-io-tree.h	/^	refcount_t refs;$/;"	m	struct:extent_state	typeref:typename:refcount_t
refs	extent-tree.c	/^	u64 refs[BTRFS_MAX_LEVEL];$/;"	m	struct:walk_control	typeref:typename:u64[]	file:
refs	extent_io.h	/^	atomic_t refs;$/;"	m	struct:extent_buffer	typeref:typename:atomic_t
refs	extent_map.h	/^	refcount_t refs;$/;"	m	struct:extent_map	typeref:typename:refcount_t
refs	ordered-data.h	/^	refcount_t refs;$/;"	m	struct:btrfs_ordered_extent	typeref:typename:refcount_t
refs	raid56.h	/^	refcount_t refs;$/;"	m	struct:btrfs_raid_bio	typeref:typename:refcount_t
refs	ref-verify.c	/^	struct rb_root refs;$/;"	m	struct:block_entry	typeref:struct:rb_root	file:
refs	scrub.c	/^	refcount_t              refs;$/;"	m	struct:scrub_ctx	typeref:typename:refcount_t	file:
refs	volumes.h	/^	refcount_t refs;$/;"	m	struct:btrfs_io_context	typeref:typename:refcount_t
refs_lock	extent_io.h	/^	spinlock_t refs_lock;$/;"	m	struct:extent_buffer	typeref:typename:spinlock_t
register_btrfs	super.c	/^static int register_btrfs(void)$/;"	f	typeref:typename:int	file:
release_block_group	extent-tree.c	/^static void release_block_group(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:void	file:
release_extent_buffer	extent_io.c	/^static int release_extent_buffer(struct extent_buffer *eb)$/;"	f	typeref:typename:int	file:
release_raid_kobj	sysfs.c	/^static void release_raid_kobj(struct kobject *kobj)$/;"	f	typeref:typename:void	file:
release_scrub_stripe	scrub.c	/^static void release_scrub_stripe(struct scrub_stripe *stripe)$/;"	f	typeref:typename:void	file:
relink_bitmap_entry	free-space-cache.c	/^static void relink_bitmap_entry(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:void	file:
reloc_bytenr	qgroup.h	/^	u64 reloc_bytenr;$/;"	m	struct:btrfs_qgroup_swapped_block	typeref:typename:u64
reloc_cancel_req	fs.h	/^	atomic_t reloc_cancel_req;$/;"	m	struct:btrfs_fs_info	typeref:typename:atomic_t
reloc_chunk_end	relocation.c	/^static void reloc_chunk_end(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
reloc_chunk_start	relocation.c	/^static int reloc_chunk_start(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int	file:
reloc_control	relocation.c	/^struct reloc_control {$/;"	s	file:
reloc_ctl	fs.h	/^	struct reloc_control *reloc_ctl;$/;"	m	struct:btrfs_fs_info	typeref:struct:reloc_control *
reloc_dirty_list	ctree.h	/^	struct list_head reloc_dirty_list;$/;"	m	struct:btrfs_root	typeref:struct:list_head
reloc_generation	qgroup.h	/^	u64 reloc_generation;$/;"	m	struct:btrfs_qgroup_swapped_block	typeref:typename:u64
reloc_mutex	fs.h	/^	struct mutex reloc_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:mutex
reloc_reserved	transaction.h	/^	bool reloc_reserved;$/;"	m	struct:btrfs_trans_handle	typeref:typename:bool
reloc_root	ctree.h	/^	struct btrfs_root *reloc_root;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root *
reloc_root_is_dead	relocation.c	/^static bool reloc_root_is_dead(struct btrfs_root *root)$/;"	f	typeref:typename:bool	file:
reloc_root_tree	relocation.c	/^	struct mapping_tree reloc_root_tree;$/;"	m	struct:reloc_control	typeref:struct:mapping_tree	file:
reloc_roots	relocation.c	/^	struct list_head reloc_roots;$/;"	m	struct:reloc_control	typeref:struct:list_head	file:
relocate_block_group	relocation.c	/^static noinline_for_stack int relocate_block_group(struct reloc_control *rc)$/;"	f	typeref:typename:noinline_for_stack int	file:
relocate_data_extent	relocation.c	/^int relocate_data_extent(struct inode *inode, struct btrfs_key *extent_key,$/;"	f	typeref:typename:noinline_for_stack int	file:
relocate_file_extent_cluster	relocation.c	/^static int relocate_file_extent_cluster(struct inode *inode,$/;"	f	typeref:typename:int	file:
relocate_one_page	relocation.c	/^static int relocate_one_page(struct inode *inode, struct file_ra_state *ra,$/;"	f	typeref:typename:int	file:
relocate_tree_block	relocation.c	/^static int relocate_tree_block(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
relocate_tree_blocks	relocation.c	/^int relocate_tree_blocks(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline_for_stack int	file:
relocating_repair_kthread	volumes.c	/^static int relocating_repair_kthread(void *data)$/;"	f	typeref:typename:int	file:
relocation_bg_lock	fs.h	/^	spinlock_t relocation_bg_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:spinlock_t
remove_block_group_free_space	free-space-tree.c	/^int remove_block_group_free_space(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
remove_block_group_item	block-group.c	/^static int remove_block_group_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
remove_chunk_item	volumes.c	/^static int remove_chunk_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
remove_extent_backref	extent-tree.c	/^static int remove_extent_backref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
remove_extent_data_ref	extent-tree.c	/^static noinline int remove_extent_data_ref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
remove_extent_item	tests/qgroup-tests.c	/^static int remove_extent_item(struct btrfs_root *root, u64 bytenr,$/;"	f	typeref:typename:int	file:
remove_extent_mapping	extent_map.c	/^void remove_extent_mapping(struct extent_map_tree *tree, struct extent_map *em)$/;"	f	typeref:typename:void
remove_extent_ref	tests/qgroup-tests.c	/^static int remove_extent_ref(struct btrfs_root *root, u64 bytenr,$/;"	f	typeref:typename:int	file:
remove_free_space_extent	free-space-tree.c	/^static int remove_free_space_extent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
remove_from_bitmap	free-space-cache.c	/^static noinline int remove_from_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:noinline int	file:
remove_from_discard_list	discard.c	/^static bool remove_from_discard_list(struct btrfs_discard_ctl *discard_ctl,$/;"	f	typeref:typename:bool	file:
remove_from_free_space_tree	free-space-tree.c	/^int remove_from_free_space_tree(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int
remove_rbio_from_cache	raid56.c	/^static void remove_rbio_from_cache(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:void	file:
remove_ticket	space-info.c	/^static void remove_ticket(struct btrfs_space_info *space_info,$/;"	f	typeref:typename:void	file:
removing_chunk	transaction.h	/^	bool removing_chunk;$/;"	m	struct:btrfs_trans_handle	typeref:typename:bool
repair_count	bio.c	/^	atomic_t repair_count;$/;"	m	struct:btrfs_failed_bio	typeref:typename:atomic_t	file:
repair_one_sector	bio.c	/^static struct btrfs_failed_bio *repair_one_sector(struct btrfs_bio *failed_bbio,$/;"	f	typeref:struct:btrfs_failed_bio *	file:
repair_wait	scrub.c	/^	wait_queue_head_t repair_wait;$/;"	m	struct:scrub_stripe	typeref:typename:wait_queue_head_t	file:
replace_extent	ctree.h	/^	bool replace_extent;$/;"	m	struct:btrfs_drop_extents_args	typeref:typename:bool
replace_extent_mapping	extent_map.c	/^static void replace_extent_mapping(struct extent_map_tree *tree,$/;"	f	typeref:typename:void	file:
replace_file_extents	relocation.c	/^int replace_file_extents(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline_for_stack int	file:
replace_node_with_clone	send.c	/^static int replace_node_with_clone(struct btrfs_path *path, int level)$/;"	f	typeref:typename:int	file:
replace_nr_stripes	volumes.h	/^	u16 replace_nr_stripes;$/;"	m	struct:btrfs_io_context	typeref:typename:u16
replace_path	relocation.c	/^int replace_path(struct btrfs_trans_handle *trans, struct reloc_control *rc,$/;"	f	typeref:typename:noinline_for_stack int	file:
replace_state	fs.h	/^	u64 replace_state;$/;"	m	struct:btrfs_dev_replace	typeref:typename:u64
replace_stripe_src	volumes.h	/^	s16 replace_stripe_src;$/;"	m	struct:btrfs_io_context	typeref:typename:s16
replace_wait	fs.h	/^	wait_queue_head_t replace_wait;$/;"	m	struct:btrfs_dev_replace	typeref:typename:wait_queue_head_t
replay_dest	tree-log.c	/^	struct btrfs_root *replay_dest;$/;"	m	struct:walk_control	typeref:struct:btrfs_root *	file:
replay_dir_deletes	tree-log.c	/^static noinline int replay_dir_deletes(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
replay_one_buffer	tree-log.c	/^static int replay_one_buffer(struct btrfs_root *log, struct extent_buffer *eb,$/;"	f	typeref:typename:int	file:
replay_one_dir_item	tree-log.c	/^static noinline int replay_one_dir_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
replay_one_extent	tree-log.c	/^static noinline int replay_one_extent(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
replay_one_name	tree-log.c	/^static noinline int replay_one_name(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
replay_xattr_deletes	tree-log.c	/^static int replay_xattr_deletes(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
report_eb_range	extent_io.c	/^static bool report_eb_range(const struct extent_buffer *eb, unsigned long start,$/;"	f	typeref:typename:bool	file:
req_level	zstd.c	/^	unsigned int req_level;$/;"	m	struct:workspace	typeref:typename:unsigned int	file:
rescan_should_stop	qgroup.c	/^static bool rescan_should_stop(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:bool	file:
rescue_opts	sysfs.c	/^static const char *rescue_opts[] = {$/;"	v	typeref:typename:const char * []	file:
rescue_tokens	super.c	/^static const match_table_t rescue_tokens = {$/;"	v	typeref:typename:const match_table_t	file:
reservations	block-group.h	/^	atomic_t reservations;$/;"	m	struct:btrfs_block_group	typeref:typename:atomic_t
reserve_chunk_space	block-group.c	/^static void reserve_chunk_space(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void	file:
reserve_metadata_space	relocation.c	/^static int reserve_metadata_space(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
reserve_ticket	space-info.h	/^struct reserve_ticket {$/;"	s
reserved	block-group.h	/^	u64 reserved;$/;"	m	struct:btrfs_block_group	typeref:typename:u64
reserved	block-rsv.h	/^	u64 reserved;$/;"	m	struct:btrfs_block_rsv	typeref:typename:u64
reserved	ioctl.c	/^	__u64	reserved[16];		\/* in *\/$/;"	m	struct:btrfs_ioctl_received_subvol_args_32	typeref:typename:__u64[16]	file:
reserved	ioctl.c	/^	__u8  reserved[28];		\/* in *\/$/;"	m	struct:btrfs_ioctl_send_args_32	typeref:typename:__u8[28]	file:
reserved	ioctl.c	/^	__u8 reserved[64];$/;"	m	struct:btrfs_ioctl_encoded_io_args_32	typeref:typename:__u8[64]	file:
reserved_active_zones	zoned.h	/^	int reserved_active_zones;$/;"	m	struct:btrfs_zoned_device_info	typeref:typename:int
reserved_bytes	relocation.c	/^	u64 reserved_bytes;$/;"	m	struct:reloc_control	typeref:typename:u64	file:
reset_balance_state	volumes.c	/^static void reset_balance_state(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
reset_trimming_bitmap	free-space-cache.c	/^static void reset_trimming_bitmap(struct btrfs_free_space_ctl *ctl, u64 offset)$/;"	f	typeref:typename:void	file:
resolve_indirect_ref	backref.c	/^static int resolve_indirect_ref(struct btrfs_backref_walk_ctx *ctx,$/;"	f	typeref:typename:int	file:
resolve_indirect_refs	backref.c	/^static int resolve_indirect_refs(struct btrfs_backref_walk_ctx *ctx,$/;"	f	typeref:typename:int	file:
restart_after_relocation	send.c	/^static int restart_after_relocation(struct btrfs_path *left_path,$/;"	f	typeref:typename:int	file:
restarted	extent-tree.c	/^	int restarted;$/;"	m	struct:walk_control	typeref:typename:int	file:
ret	send.c	/^	int ret;$/;"	m	struct:name_cache_entry	typeref:typename:int	file:
retry_uncached	extent-tree.h	/^	bool retry_uncached;$/;"	m	struct:find_free_extent_ctl	typeref:typename:bool
reversed	send.c	/^			unsigned short reversed:1;$/;"	m	struct:fs_path::__anon1b81f160010a::__anon1b81f1600208	typeref:typename:unsigned short:1	file:
rfer	qgroup.h	/^	u64 rfer;	\/* referenced *\/$/;"	m	struct:btrfs_qgroup	typeref:typename:u64
rfer_cmpr	qgroup.h	/^	u64 rfer_cmpr;	\/* referenced compressed *\/$/;"	m	struct:btrfs_qgroup	typeref:typename:u64
right_path	send.c	/^	struct btrfs_path *right_path;$/;"	m	struct:send_ctx	typeref:struct:btrfs_path *	file:
rmap_test_vector	tests/extent-map-tests.c	/^struct rmap_test_vector {$/;"	s	file:
rmdir_gen	send.c	/^	u64 rmdir_gen;$/;"	m	struct:waiting_dir_move	typeref:typename:u64	file:
rmdir_ino	send.c	/^	u64 rmdir_ino;$/;"	m	struct:waiting_dir_move	typeref:typename:u64	file:
rmdir_subvol_show	sysfs.c	/^static ssize_t rmdir_subvol_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
rmw_assemble_write_bios	raid56.c	/^static int rmw_assemble_write_bios(struct btrfs_raid_bio *rbio,$/;"	f	typeref:typename:int	file:
rmw_rbio	raid56.c	/^static void rmw_rbio(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:void	file:
rmw_rbio_work	raid56.c	/^static void rmw_rbio_work(struct work_struct *work)$/;"	f	typeref:typename:void	file:
rmw_rbio_work_locked	raid56.c	/^static void rmw_rbio_work_locked(struct work_struct *work)$/;"	f	typeref:typename:void	file:
rmw_read_wait_recover	raid56.c	/^static int rmw_read_wait_recover(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:int	file:
rmw_workers	fs.h	/^	struct workqueue_struct *rmw_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:workqueue_struct *
ro	block-group.h	/^	unsigned int ro;$/;"	m	struct:btrfs_block_group	typeref:typename:unsigned int
ro_bgs	space-info.h	/^	struct list_head ro_bgs;$/;"	m	struct:btrfs_space_info	typeref:struct:list_head
ro_block_group_mutex	fs.h	/^	struct mutex ro_block_group_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:mutex
ro_flags	btrfs_inode.h	/^	u32 ro_flags;$/;"	m	struct:btrfs_inode	typeref:typename:u32
ro_list	block-group.h	/^	struct list_head ro_list;$/;"	m	struct:btrfs_block_group	typeref:struct:list_head
rollback_verity	verity.c	/^static int rollback_verity(struct btrfs_inode *inode)$/;"	f	typeref:typename:int	file:
root	backref.c	/^	struct btrfs_root *root;$/;"	m	struct:share_check	typeref:struct:btrfs_root *	file:
root	backref.c	/^	struct rb_root_cached root;$/;"	m	struct:preftree	typeref:struct:rb_root_cached	file:
root	backref.h	/^	struct btrfs_root *root;$/;"	m	struct:btrfs_backref_node	typeref:struct:btrfs_root *
root	btrfs_inode.h	/^	struct btrfs_root *root;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_root *
root	defrag.c	/^	u64 root;$/;"	m	struct:inode_defrag	typeref:typename:u64	file:
root	delayed-inode.h	/^	struct btrfs_root *root;$/;"	m	struct:btrfs_delayed_node	typeref:struct:btrfs_root *
root	delayed-ref.h	/^	u64 root;$/;"	m	struct:btrfs_delayed_data_ref	typeref:typename:u64
root	delayed-ref.h	/^	u64 root;$/;"	m	struct:btrfs_delayed_tree_ref	typeref:typename:u64
root	fs.h	/^	struct rb_root root;$/;"	m	struct:btrfs_free_cluster	typeref:struct:rb_root
root	inode.c	/^	struct btrfs_root *root;$/;"	m	struct:btrfs_iget_args	typeref:struct:btrfs_root *	file:
root	ref-verify.c	/^	u64 root;$/;"	m	struct:ref_action	typeref:typename:u64	file:
root	send.c	/^	struct btrfs_root *root;$/;"	m	struct:clone_root	typeref:struct:btrfs_root *	file:
root	send.c	/^	struct rb_root *root;$/;"	m	struct:recorded_ref	typeref:struct:rb_root *	file:
root	transaction.h	/^	struct btrfs_root *root;$/;"	m	struct:btrfs_pending_snapshot	typeref:struct:btrfs_root *
root	ulist.h	/^	struct rb_root root;$/;"	m	struct:ulist	typeref:struct:rb_root
root_add_used	ctree.c	/^static void root_add_used(struct btrfs_root *root, u32 size)$/;"	f	typeref:typename:void	file:
root_entry	ref-verify.c	/^struct root_entry {$/;"	s	file:
root_extent_list	ordered-data.h	/^	struct list_head root_extent_list;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:list_head
root_id	backref.h	/^	u64 root_id;$/;"	m	struct:prelim_ref	typeref:typename:u64
root_ids	send.c	/^	u64 root_ids[SEND_MAX_BACKREF_CACHE_ROOTS];$/;"	m	struct:backref_cache_entry	typeref:typename:u64[]	file:
root_item	ctree.h	/^	struct btrfs_root_item root_item;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root_item
root_item	transaction.h	/^	struct btrfs_root_item *root_item;$/;"	m	struct:btrfs_pending_snapshot	typeref:struct:btrfs_root_item *
root_item_lock	ctree.h	/^	spinlock_t root_item_lock;$/;"	m	struct:btrfs_root	typeref:typename:spinlock_t
root_key	ctree.h	/^	struct btrfs_key root_key;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_key
root_list	ctree.h	/^	struct list_head root_list;$/;"	m	struct:btrfs_root	typeref:struct:list_head
root_map	print-tree.c	/^static const struct root_name_map root_map[] = {$/;"	v	typeref:typename:const struct root_name_map[]	file:
root_name_map	print-tree.c	/^struct root_name_map {$/;"	s	file:
root_objectid	export.h	/^	u64 root_objectid;$/;"	m	struct:btrfs_fid	typeref:typename:u64
root_objectid	ref-verify.c	/^	u64 root_objectid;$/;"	m	struct:ref_entry	typeref:typename:u64	file:
root_objectid	ref-verify.c	/^	u64 root_objectid;$/;"	m	struct:root_entry	typeref:typename:u64	file:
root_sub_used	ctree.c	/^static void root_sub_used(struct btrfs_root *root, u32 size)$/;"	f	typeref:typename:void	file:
roots	backref.h	/^	struct ulist *roots;$/;"	m	struct:btrfs_backref_walk_ctx	typeref:struct:ulist *
roots	ref-verify.c	/^	struct rb_root roots;$/;"	m	struct:block_entry	typeref:struct:rb_root	file:
rotating	volumes.h	/^	bool rotating;$/;"	m	struct:btrfs_fs_devices	typeref:typename:bool
rsv	qgroup.h	/^	struct btrfs_qgroup_rsv rsv;$/;"	m	struct:btrfs_qgroup	typeref:struct:btrfs_qgroup_rsv
rsv_excl	qgroup.h	/^	u64 rsv_excl;$/;"	m	struct:btrfs_qgroup	typeref:typename:u64
rsv_rfer	qgroup.h	/^	u64 rsv_rfer;$/;"	m	struct:btrfs_qgroup	typeref:typename:u64
rtime	ioctl.c	/^	struct btrfs_ioctl_timespec_32 rtime; \/* out *\/$/;"	m	struct:btrfs_ioctl_received_subvol_args_32	typeref:struct:btrfs_ioctl_timespec_32	file:
rtransid	ioctl.c	/^	__u64	rtransid;		\/* out *\/$/;"	m	struct:btrfs_ioctl_received_subvol_args_32	typeref:typename:__u64	file:
run_and_cleanup_extent_op	extent-tree.c	/^static int run_and_cleanup_extent_op(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
run_delalloc_compressed	inode.c	/^static bool run_delalloc_compressed(struct btrfs_inode *inode,$/;"	f	typeref:typename:bool	file:
run_delalloc_cow	inode.c	/^static noinline int run_delalloc_cow(struct btrfs_inode *inode,$/;"	f	typeref:typename:noinline int	file:
run_delalloc_nocow	inode.c	/^static noinline int run_delalloc_nocow(struct btrfs_inode *inode,$/;"	f	typeref:typename:noinline int	file:
run_delayed_data_ref	extent-tree.c	/^static int run_delayed_data_ref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
run_delayed_extent_op	extent-tree.c	/^static int run_delayed_extent_op(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
run_delayed_iput_locked	inode.c	/^static void run_delayed_iput_locked(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
run_delayed_start	delayed-ref.h	/^	u64 run_delayed_start;$/;"	m	struct:btrfs_delayed_ref_root	typeref:typename:u64
run_delayed_tree_ref	extent-tree.c	/^static int run_delayed_tree_ref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
run_one_async_done	bio.c	/^static void run_one_async_done(struct btrfs_work *work)$/;"	f	typeref:typename:void	file:
run_one_async_free	bio.c	/^static void run_one_async_free(struct btrfs_work *work)$/;"	f	typeref:typename:void	file:
run_one_async_start	bio.c	/^static void run_one_async_start(struct btrfs_work *work)$/;"	f	typeref:typename:void	file:
run_one_delayed_ref	extent-tree.c	/^static int run_one_delayed_ref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
run_ordered_work	async-thread.c	/^static void run_ordered_work(struct btrfs_workqueue *wq,$/;"	f	typeref:typename:void	file:
run_test	tests/free-space-tree-tests.c	/^static int run_test(test_func_t test_func, int bitmaps, u32 sectorsize,$/;"	f	typeref:typename:int	file:
run_test_both_formats	tests/free-space-tree-tests.c	/^static int run_test_both_formats(test_func_t test_func, u32 sectorsize,$/;"	f	typeref:typename:int	file:
run_xor	raid56.c	/^static void run_xor(void **pages, int src_cnt, ssize_t len)$/;"	f	typeref:typename:void	file:
running_transaction	fs.h	/^	struct btrfs_transaction *running_transaction;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_transaction *
runtime_flags	block-group.h	/^	unsigned long runtime_flags;$/;"	m	struct:btrfs_block_group	typeref:typename:unsigned long
runtime_flags	btrfs_inode.h	/^	unsigned long runtime_flags;$/;"	m	struct:btrfs_inode	typeref:typename:unsigned long
rw_devices	volumes.h	/^	u64 rw_devices;$/;"	m	struct:btrfs_fs_devices	typeref:typename:u64
rwsem	fs.h	/^	struct rw_semaphore rwsem;$/;"	m	struct:btrfs_dev_replace	typeref:struct:rw_semaphore
sample	compression.c	/^	u8 *sample;$/;"	m	struct:heuristic_ws	typeref:typename:u8 *	file:
sample_block_group_extent_item	block-group.c	/^static int sample_block_group_extent_item(struct btrfs_caching_control *caching_ctl,$/;"	f	typeref:typename:int	file:
sample_repeated_patterns	compression.c	/^static bool sample_repeated_patterns(struct heuristic_ws *ws)$/;"	f	typeref:typename:bool	file:
sample_size	compression.c	/^	u32 sample_size;$/;"	m	struct:heuristic_ws	typeref:typename:u32	file:
saved_iter	bio.h	/^			struct bvec_iter saved_iter;$/;"	m	struct:btrfs_bio::__anon0f27d3d5010a::__anon0f27d3d50208	typeref:struct:bvec_iter
sb	fs.h	/^	struct super_block *sb;$/;"	m	struct:btrfs_fs_info	typeref:struct:super_block *
sb_log_location	zoned.c	/^static int sb_log_location(struct block_device *bdev, struct blk_zone *zones,$/;"	f	typeref:typename:int	file:
sb_write_pointer	zoned.c	/^static int sb_write_pointer(struct block_device *bdev, struct blk_zone *zones,$/;"	f	typeref:typename:int	file:
sb_zone_is_full	zoned.c	/^static inline bool sb_zone_is_full(const struct blk_zone *zone)$/;"	f	typeref:typename:bool	file:
sb_zone_number	zoned.c	/^static inline u32 sb_zone_number(int shift, int mirror)$/;"	f	typeref:typename:u32	file:
sb_zones	zoned.h	/^	struct blk_zone sb_zones[2 * BTRFS_SUPER_MIRROR_MAX];$/;"	m	struct:btrfs_zoned_device_info	typeref:struct:blk_zone[]
scrub_assemble_read_bios	raid56.c	/^static int scrub_assemble_read_bios(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:int	file:
scrub_blocked_if_needed	scrub.c	/^static void scrub_blocked_if_needed(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
scrub_cancel_req	fs.h	/^	atomic_t scrub_cancel_req;$/;"	m	struct:btrfs_fs_info	typeref:typename:atomic_t
scrub_chunk	scrub.c	/^static noinline_for_stack int scrub_chunk(struct scrub_ctx *sctx,$/;"	f	typeref:typename:noinline_for_stack int	file:
scrub_ctx	scrub.c	/^struct scrub_ctx {$/;"	s	file:
scrub_ctx	volumes.h	/^	struct scrub_ctx *scrub_ctx;$/;"	m	struct:btrfs_device	typeref:struct:scrub_ctx *
scrub_enumerate_chunks	scrub.c	/^int scrub_enumerate_chunks(struct scrub_ctx *sctx,$/;"	f	typeref:typename:noinline_for_stack int	file:
scrub_find_fill_first_stripe	scrub.c	/^static int scrub_find_fill_first_stripe(struct btrfs_block_group *bg,$/;"	f	typeref:typename:int	file:
scrub_free_ctx	scrub.c	/^static noinline_for_stack void scrub_free_ctx(struct scrub_ctx *sctx)$/;"	f	typeref:typename:noinline_for_stack void	file:
scrub_lock	fs.h	/^	struct mutex scrub_lock;$/;"	m	struct:btrfs_fs_info	typeref:struct:mutex
scrub_one_super	scrub.c	/^static int scrub_one_super(struct scrub_ctx *sctx, struct btrfs_device *dev,$/;"	f	typeref:typename:int	file:
scrub_pause_off	scrub.c	/^static void scrub_pause_off(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
scrub_pause_on	scrub.c	/^static void scrub_pause_on(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
scrub_pause_req	fs.h	/^	atomic_t scrub_pause_req;$/;"	m	struct:btrfs_fs_info	typeref:typename:atomic_t
scrub_pause_wait	fs.h	/^	wait_queue_head_t scrub_pause_wait;$/;"	m	struct:btrfs_fs_info	typeref:typename:wait_queue_head_t
scrub_print_common_warning	scrub.c	/^static void scrub_print_common_warning(const char *errstr, struct btrfs_device *dev,$/;"	f	typeref:typename:void	file:
scrub_print_warning_inode	scrub.c	/^static int scrub_print_warning_inode(u64 inum, u64 offset, u64 num_bytes,$/;"	f	typeref:typename:int	file:
scrub_progress	fs.h	/^	struct btrfs_scrub_progress scrub_progress;$/;"	m	struct:btrfs_dev_replace	typeref:struct:btrfs_scrub_progress
scrub_put_ctx	scrub.c	/^static void scrub_put_ctx(struct scrub_ctx *sctx)$/;"	f	typeref:typename:void	file:
scrub_raid56_parity_stripe	scrub.c	/^static int scrub_raid56_parity_stripe(struct scrub_ctx *sctx,$/;"	f	typeref:typename:int	file:
scrub_rbio	raid56.c	/^static void scrub_rbio(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:void	file:
scrub_rbio_work_locked	raid56.c	/^static void scrub_rbio_work_locked(struct work_struct *work)$/;"	f	typeref:typename:void	file:
scrub_read_endio	scrub.c	/^static void scrub_read_endio(struct btrfs_bio *bbio)$/;"	f	typeref:typename:void	file:
scrub_repair_read_endio	scrub.c	/^static void scrub_repair_read_endio(struct btrfs_bio *bbio)$/;"	f	typeref:typename:void	file:
scrub_reset_stripe	scrub.c	/^static void scrub_reset_stripe(struct scrub_stripe *stripe)$/;"	f	typeref:typename:void	file:
scrub_sector_verification	scrub.c	/^struct scrub_sector_verification {$/;"	s	file:
scrub_setup_ctx	scrub.c	/^static noinline_for_stack struct scrub_ctx *scrub_setup_ctx($/;"	f	typeref:typename:noinline_for_stack struct scrub_ctx *	file:
scrub_simple_mirror	scrub.c	/^static int scrub_simple_mirror(struct scrub_ctx *sctx,$/;"	f	typeref:typename:int	file:
scrub_simple_stripe	scrub.c	/^static int scrub_simple_stripe(struct scrub_ctx *sctx,$/;"	f	typeref:typename:int	file:
scrub_speed_max	volumes.h	/^	u64 scrub_speed_max;$/;"	m	struct:btrfs_device	typeref:typename:u64
scrub_stripe	scrub.c	/^static noinline_for_stack int scrub_stripe(struct scrub_ctx *sctx,$/;"	f	typeref:typename:noinline_for_stack int	file:
scrub_stripe	scrub.c	/^struct scrub_stripe {$/;"	s	file:
scrub_stripe_flags	scrub.c	/^enum scrub_stripe_flags {$/;"	g	file:
scrub_stripe_get_page	scrub.c	/^static struct page *scrub_stripe_get_page(struct scrub_stripe *stripe, int sector_nr)$/;"	f	typeref:struct:page *	file:
scrub_stripe_get_page_offset	scrub.c	/^static unsigned int scrub_stripe_get_page_offset(struct scrub_stripe *stripe,$/;"	f	typeref:typename:unsigned int	file:
scrub_stripe_read_repair_worker	scrub.c	/^static void scrub_stripe_read_repair_worker(struct work_struct *work)$/;"	f	typeref:typename:void	file:
scrub_stripe_report_errors	scrub.c	/^static void scrub_stripe_report_errors(struct scrub_ctx *sctx,$/;"	f	typeref:typename:void	file:
scrub_stripe_reset_bitmaps	scrub.c	/^static void scrub_stripe_reset_bitmaps(struct scrub_stripe *stripe)$/;"	f	typeref:typename:void	file:
scrub_stripe_submit_repair_read	scrub.c	/^static void scrub_stripe_submit_repair_read(struct scrub_stripe *stripe,$/;"	f	typeref:typename:void	file:
scrub_submit_initial_read	scrub.c	/^static void scrub_submit_initial_read(struct scrub_ctx *sctx,$/;"	f	typeref:typename:void	file:
scrub_submit_write_bio	scrub.c	/^static void scrub_submit_write_bio(struct scrub_ctx *sctx,$/;"	f	typeref:typename:void	file:
scrub_supers	scrub.c	/^static noinline_for_stack int scrub_supers(struct scrub_ctx *sctx,$/;"	f	typeref:typename:noinline_for_stack int	file:
scrub_throttle_dev_io	scrub.c	/^static void scrub_throttle_dev_io(struct scrub_ctx *sctx, struct btrfs_device *device,$/;"	f	typeref:typename:void	file:
scrub_verify_one_metadata	scrub.c	/^static void scrub_verify_one_metadata(struct scrub_stripe *stripe, int sector_nr)$/;"	f	typeref:typename:void	file:
scrub_verify_one_sector	scrub.c	/^static void scrub_verify_one_sector(struct scrub_stripe *stripe, int sector_nr)$/;"	f	typeref:typename:void	file:
scrub_verify_one_stripe	scrub.c	/^static void scrub_verify_one_stripe(struct scrub_stripe *stripe, unsigned long bitmap)$/;"	f	typeref:typename:void	file:
scrub_warning	scrub.c	/^struct scrub_warning {$/;"	s	file:
scrub_workers	fs.h	/^	struct workqueue_struct *scrub_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:workqueue_struct *
scrub_workers_get	scrub.c	/^static noinline_for_stack int scrub_workers_get(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:noinline_for_stack int	file:
scrub_workers_put	scrub.c	/^static void scrub_workers_put(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
scrub_workers_refcnt	fs.h	/^	refcount_t scrub_workers_refcnt;$/;"	m	struct:btrfs_fs_info	typeref:typename:refcount_t
scrub_write_endio	scrub.c	/^static void scrub_write_endio(struct btrfs_bio *bbio)$/;"	f	typeref:typename:void	file:
scrub_write_sectors	scrub.c	/^static void scrub_write_sectors(struct scrub_ctx *sctx, struct scrub_stripe *stripe,$/;"	f	typeref:typename:void	file:
scrubp	raid56.h	/^	u8 scrubp;$/;"	m	struct:btrfs_raid_bio	typeref:typename:u8
scrubs_paused	fs.h	/^	atomic_t scrubs_paused;$/;"	m	struct:btrfs_fs_info	typeref:typename:atomic_t
scrubs_running	fs.h	/^	atomic_t scrubs_running;$/;"	m	struct:btrfs_fs_info	typeref:typename:atomic_t
sctx	scrub.c	/^	struct scrub_ctx *sctx;$/;"	m	struct:scrub_stripe	typeref:struct:scrub_ctx *	file:
sctx	send.c	/^	struct send_ctx *sctx;$/;"	m	struct:backref_ctx	typeref:struct:send_ctx *	file:
search_bitmap	free-space-cache.c	/^static int search_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:int	file:
search_commit_root	ctree.h	/^	unsigned int search_commit_root:1;$/;"	m	struct:btrfs_path	typeref:typename:unsigned int:1
search_csum_tree	file-item.c	/^static int search_csum_tree(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
search_extent_mapping	extent_map.c	/^struct extent_map *search_extent_mapping(struct extent_map_tree *tree,$/;"	f	typeref:struct:extent_map *
search_for_extension	ctree.h	/^	unsigned int search_for_extension:1;$/;"	m	struct:btrfs_path	typeref:typename:unsigned int:1
search_for_key_slot	ctree.c	/^static inline int search_for_key_slot(struct extent_buffer *eb,$/;"	f	typeref:typename:int	file:
search_for_split	ctree.h	/^	unsigned int search_for_split:1;$/;"	m	struct:btrfs_path	typeref:typename:unsigned int:1
search_free_space_info	free-space-tree.c	/^struct btrfs_free_space_info *search_free_space_info($/;"	f	typeref:typename:EXPORT_FOR_TESTS struct btrfs_free_space_info *
search_ioctl	ioctl.c	/^static noinline int search_ioctl(struct inode *inode,$/;"	f	typeref:typename:noinline int	file:
search_key_again	send.c	/^static int search_key_again(const struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
search_leaf	ctree.c	/^static int search_leaf(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
search_start	extent-tree.h	/^	u64 search_start;$/;"	m	struct:find_free_extent_ctl	typeref:typename:u64
search_start	relocation.c	/^	u64 search_start;$/;"	m	struct:reloc_control	typeref:typename:u64	file:
sec	ioctl.c	/^	__u64 sec;$/;"	m	struct:btrfs_ioctl_timespec_32	typeref:typename:__u64	file:
sector_in_rbio	raid56.c	/^static struct sector_ptr *sector_in_rbio(struct btrfs_raid_bio *rbio,$/;"	f	typeref:struct:sector_ptr *	file:
sector_ptr	raid56.c	/^struct sector_ptr {$/;"	s	file:
sector_size	volumes.h	/^	u32 sector_size;$/;"	m	struct:btrfs_device	typeref:typename:u32
sectors	scrub.c	/^	struct scrub_sector_verification *sectors;$/;"	m	struct:scrub_stripe	typeref:struct:scrub_sector_verification *	file:
sectors_per_bio	scrub.c	/^	int			sectors_per_bio;$/;"	m	struct:scrub_ctx	typeref:typename:int	file:
sectorsize	fs.h	/^	u32 sectorsize;$/;"	m	struct:btrfs_fs_info	typeref:typename:u32
sectorsize_bits	fs.h	/^	u32 sectorsize_bits;$/;"	m	struct:btrfs_fs_info	typeref:typename:u32
seed_list	volumes.h	/^	struct list_head seed_list;$/;"	m	struct:btrfs_fs_devices	typeref:struct:list_head
seeding	volumes.h	/^	bool seeding;$/;"	m	struct:btrfs_fs_devices	typeref:typename:bool
select_delayed_ref	extent-tree.c	/^select_delayed_ref(struct btrfs_delayed_ref_head *head)$/;"	f	typeref:struct:btrfs_delayed_ref_node *	file:
select_one_root	relocation.c	/^struct btrfs_root *select_one_root(struct btrfs_backref_node *node)$/;"	f	typeref:typename:noinline_for_stack struct btrfs_root *	file:
select_reloc_root	relocation.c	/^struct btrfs_root *select_reloc_root(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline_for_stack struct btrfs_root *	file:
self_ref_count	backref.c	/^	int self_ref_count;$/;"	m	struct:share_check	typeref:typename:int	file:
send_buf	send.c	/^	char *send_buf;$/;"	m	struct:send_ctx	typeref:typename:char *	file:
send_buf_pages	send.c	/^	struct page **send_buf_pages;$/;"	m	struct:send_ctx	typeref:struct:page **	file:
send_capabilities	send.c	/^static int send_capabilities(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
send_chmod	send.c	/^static int send_chmod(struct send_ctx *sctx, u64 ino, u64 gen, u64 mode)$/;"	f	typeref:typename:int	file:
send_chown	send.c	/^static int send_chown(struct send_ctx *sctx, u64 ino, u64 gen, u64 uid, u64 gid)$/;"	f	typeref:typename:int	file:
send_clone	send.c	/^static int send_clone(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
send_cmd	send.c	/^static int send_cmd(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
send_create_inode	send.c	/^static int send_create_inode(struct send_ctx *sctx, u64 ino)$/;"	f	typeref:typename:int	file:
send_create_inode_if_needed	send.c	/^static int send_create_inode_if_needed(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
send_ctx	send.c	/^struct send_ctx {$/;"	s	file:
send_encoded_extent	send.c	/^static int send_encoded_extent(struct send_ctx *sctx, struct btrfs_path *path,$/;"	f	typeref:typename:int	file:
send_encoded_inline_extent	send.c	/^static int send_encoded_inline_extent(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
send_extent_data	send.c	/^static int send_extent_data(struct send_ctx *sctx, struct btrfs_path *path,$/;"	f	typeref:typename:int	file:
send_fd	ioctl.c	/^	__s64 send_fd;			\/* in *\/$/;"	m	struct:btrfs_ioctl_send_args_32	typeref:typename:__s64	file:
send_fileattr	send.c	/^static int send_fileattr(struct send_ctx *sctx, u64 ino, u64 gen, u64 fileattr)$/;"	f	typeref:typename:int	file:
send_filp	send.c	/^	struct file *send_filp;$/;"	m	struct:send_ctx	typeref:struct:file *	file:
send_header	send.c	/^static int send_header(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
send_hole	send.c	/^static int send_hole(struct send_ctx *sctx, u64 end)$/;"	f	typeref:typename:int	file:
send_in_progress	ctree.h	/^	int send_in_progress;$/;"	m	struct:btrfs_root	typeref:typename:int
send_link	send.c	/^static int send_link(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
send_max_size	send.c	/^	u32 send_max_size;$/;"	m	struct:send_ctx	typeref:typename:u32	file:
send_off	send.c	/^	loff_t send_off;$/;"	m	struct:send_ctx	typeref:typename:loff_t	file:
send_progress	send.c	/^	u64 send_progress;$/;"	m	struct:send_ctx	typeref:typename:u64	file:
send_remove_xattr	send.c	/^static int send_remove_xattr(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
send_rename	send.c	/^static int send_rename(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
send_rmdir	send.c	/^static int send_rmdir(struct send_ctx *sctx, struct fs_path *path)$/;"	f	typeref:typename:int	file:
send_root	send.c	/^	struct btrfs_root *send_root;$/;"	m	struct:send_ctx	typeref:struct:btrfs_root *	file:
send_set_xattr	send.c	/^static int send_set_xattr(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
send_size	send.c	/^	u32 send_size;$/;"	m	struct:send_ctx	typeref:typename:u32	file:
send_stream_version_show	sysfs.c	/^static ssize_t send_stream_version_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
send_subvol	send.c	/^static int send_subvol(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
send_subvol_begin	send.c	/^static int send_subvol_begin(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
send_truncate	send.c	/^static int send_truncate(struct send_ctx *sctx, u64 ino, u64 gen, u64 size)$/;"	f	typeref:typename:int	file:
send_unlink	send.c	/^static int send_unlink(struct send_ctx *sctx, struct fs_path *path)$/;"	f	typeref:typename:int	file:
send_update_extent	send.c	/^static int send_update_extent(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
send_utimes	send.c	/^static int send_utimes(struct send_ctx *sctx, u64 ino, u64 gen)$/;"	f	typeref:typename:int	file:
send_verity	send.c	/^static int send_verity(struct send_ctx *sctx, struct fs_path *path,$/;"	f	typeref:typename:int	file:
send_write	send.c	/^static int send_write(struct send_ctx *sctx, u64 offset, u32 len)$/;"	f	typeref:typename:int	file:
send_write_or_clone	send.c	/^static int send_write_or_clone(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
sep_nsec	calclock/calclock.c	/^static inline const char *sep_nsec(const ktime_t nsec, char *buf, size_t buf_len)$/;"	f	typeref:typename:const char *	file:
sep_num	calclock/calclock.c	/^static inline const char *sep_num(const uint64_t num, char *buf, size_t buf_len)$/;"	f	typeref:typename:const char *	file:
separate	calclock/calclock.c	/^static const char *separate(char *buf, size_t buf_len)$/;"	f	typeref:typename:const char *	file:
seq	delayed-ref.h	/^	u64 seq;$/;"	m	struct:btrfs_delayed_ref_node	typeref:typename:u64
seq	tree-mod-log.c	/^	u64 seq;$/;"	m	struct:tree_mod_elem	typeref:typename:u64	file:
seq	tree-mod-log.h	/^	u64 seq;$/;"	m	struct:btrfs_seq_list	typeref:typename:u64
seq_zones	zoned.h	/^	unsigned long *seq_zones;$/;"	m	struct:btrfs_zoned_device_info	typeref:typename:unsigned long *
set_avail_alloc_bits	block-group.c	/^static void set_avail_alloc_bits(struct btrfs_fs_info *fs_info, u64 flags)$/;"	f	typeref:typename:void	file:
set_bio_pages_uptodate	raid56.c	/^static void set_bio_pages_uptodate(struct btrfs_raid_bio *rbio, struct bio *bio)$/;"	f	typeref:typename:void	file:
set_btree_ioerr	extent_io.c	/^static void set_btree_ioerr(struct extent_buffer *eb)$/;"	f	typeref:typename:void	file:
set_extent_bit	extent-io-tree.c	/^int set_extent_bit(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f	typeref:typename:int
set_extent_buffer_dirty	extent_io.c	/^void set_extent_buffer_dirty(struct extent_buffer *eb)$/;"	f	typeref:typename:void
set_extent_buffer_uptodate	extent_io.c	/^void set_extent_buffer_uptodate(struct extent_buffer *eb)$/;"	f	typeref:typename:void
set_features	sysfs.c	/^static void set_features(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
set_free_space_tree_thresholds	free-space-tree.c	/^void set_free_space_tree_thresholds(struct btrfs_block_group *cache)$/;"	f	typeref:typename:void
set_gfp_mask_from_bits	extent-io-tree.c	/^static void set_gfp_mask_from_bits(u32 *bits, gfp_t *mask)$/;"	f	typeref:typename:void	file:
set_io_stripe	volumes.c	/^static void set_io_stripe(struct btrfs_io_stripe *dst, const struct map_lookup *map,$/;"	f	typeref:typename:void	file:
set_page_extent_mapped	extent_io.c	/^int set_page_extent_mapped(struct page *page)$/;"	f	typeref:typename:int
set_rbio_raid6_extra_error	raid56.c	/^static void set_rbio_raid6_extra_error(struct btrfs_raid_bio *rbio, int mirror_num)$/;"	f	typeref:typename:void	file:
set_rbio_range_error	raid56.c	/^static void set_rbio_range_error(struct btrfs_raid_bio *rbio, struct bio *bio)$/;"	f	typeref:typename:void	file:
set_record_extent_bits	extent-io-tree.c	/^int set_record_extent_bits(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f	typeref:typename:int
set_ref_path	send.c	/^static void set_ref_path(struct recorded_ref *ref, struct fs_path *path)$/;"	f	typeref:typename:void	file:
set_reloc_control	relocation.c	/^static void set_reloc_control(struct reloc_control *rc)$/;"	f	typeref:typename:void	file:
set_state_bits	extent-io-tree.c	/^static void set_state_bits(struct extent_io_tree *tree,$/;"	f	typeref:typename:void	file:
setup_cluster_bitmap	free-space-cache.c	/^setup_cluster_bitmap(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:noinline int	file:
setup_cluster_no_bitmap	free-space-cache.c	/^setup_cluster_no_bitmap(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:noinline int	file:
setup_extent_mapping	extent_map.c	/^static inline void setup_extent_mapping(struct extent_map_tree *tree,$/;"	f	typeref:typename:void	file:
setup_file_extents	tests/inode-tests.c	/^static void setup_file_extents(struct btrfs_root *root, u32 sectorsize)$/;"	f	typeref:typename:void	file:
setup_inline_extent_backref	extent-tree.c	/^void setup_inline_extent_backref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline_for_stack void	file:
setup_items_for_insert	ctree.c	/^static void setup_items_for_insert(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:void	file:
setup_leaf_for_split	ctree.c	/^static noinline int setup_leaf_for_split(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
setup_nodes_for_search	ctree.c	/^setup_nodes_for_search(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
setup_relocation_extent_mapping	relocation.c	/^static noinline_for_stack int setup_relocation_extent_mapping(struct inode *inode,$/;"	f	typeref:typename:noinline_for_stack int	file:
shannon_entropy	compression.c	/^static u32 shannon_entropy(struct heuristic_ws *ws)$/;"	f	typeref:typename:u32	file:
share_check	backref.c	/^struct share_check {$/;"	s	file:
share_count	backref.c	/^	int share_count;$/;"	m	struct:share_check	typeref:typename:int	file:
shared_level	extent-tree.c	/^	int shared_level;$/;"	m	struct:walk_control	typeref:typename:int	file:
should_alloc_chunk	block-group.c	/^static int should_alloc_chunk(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
should_async_write	bio.c	/^static bool should_async_write(struct btrfs_bio *bbio)$/;"	f	typeref:typename:bool	file:
should_balance_chunk	volumes.c	/^static int should_balance_chunk(struct extent_buffer *leaf,$/;"	f	typeref:typename:int	file:
should_cow_block	ctree.c	/^static inline int should_cow_block(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
should_nocow	inode.c	/^static bool should_nocow(struct btrfs_inode *inode, u64 start, u64 end)$/;"	f	typeref:typename:bool	file:
should_reclaim_block_group	block-group.c	/^static bool should_reclaim_block_group(struct btrfs_block_group *bg, u64 bytes_freed)$/;"	f	typeref:typename:bool	file:
shrink_delalloc	space-info.c	/^static void shrink_delalloc(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
simple_stripe_full_stripe_len	scrub.c	/^static u64 simple_stripe_full_stripe_len(const struct map_lookup *map)$/;"	f	typeref:typename:u64	file:
simple_stripe_get_logical	scrub.c	/^static u64 simple_stripe_get_logical(struct map_lookup *map,$/;"	f	typeref:typename:u64	file:
simple_stripe_mirror_num	scrub.c	/^static int simple_stripe_mirror_num(struct map_lookup *map, int stripe_index)$/;"	f	typeref:typename:int	file:
size	block-rsv.h	/^	u64 size;$/;"	m	struct:btrfs_block_rsv	typeref:typename:u64
size	ctree.c	/^	u16		size;$/;"	m	struct:btrfs_csums	typeref:typename:u16	file:
size	free-space-cache.h	/^	unsigned long size;$/;"	m	struct:btrfs_io_ctl	typeref:typename:unsigned long
size	lru_cache.h	/^	unsigned int size;$/;"	m	struct:btrfs_lru_cache	typeref:typename:unsigned int
size	send.c	/^	u64 size;$/;"	m	struct:btrfs_inode_info	typeref:typename:u64	file:
size	zstd.c	/^	size_t size;$/;"	m	struct:workspace	typeref:typename:size_t	file:
size_class	block-group.h	/^	enum btrfs_block_group_size_class size_class;$/;"	m	struct:btrfs_block_group	typeref:enum:btrfs_block_group_size_class
size_class	extent-tree.h	/^	enum btrfs_block_group_size_class size_class;$/;"	m	struct:find_free_extent_ctl	typeref:enum:btrfs_block_group_size_class
skip_data_ref	backref.h	/^	bool (*skip_data_ref)(u64 root, u64 ino, u64 offset, void *user_ctx);$/;"	m	struct:btrfs_backref_walk_ctx	typeref:typename:bool (*)(u64 root,u64 ino,u64 offset,void * user_ctx)
skip_inode_logging	file.c	/^static inline bool skip_inode_logging(const struct btrfs_log_ctx *ctx)$/;"	f	typeref:typename:bool	file:
skip_inode_ref_list	backref.h	/^	bool skip_inode_ref_list;$/;"	m	struct:btrfs_backref_walk_ctx	typeref:typename:bool
skip_locking	ctree.h	/^	unsigned int skip_locking:1;$/;"	m	struct:btrfs_path	typeref:typename:unsigned int:1
skip_qgroup	delayed-ref.h	/^	bool skip_qgroup;$/;"	m	struct:btrfs_ref	typeref:typename:bool
skip_ref_updates	inode-item.h	/^	bool skip_ref_updates;$/;"	m	struct:btrfs_truncate_control	typeref:typename:bool
skip_release_on_error	ctree.h	/^	unsigned int skip_release_on_error:1;$/;"	m	struct:btrfs_path	typeref:typename:unsigned int:1
skip_self_data_ref	send.c	/^static bool skip_self_data_ref(u64 root, u64 ino, u64 offset, void *ctx)$/;"	f	typeref:typename:bool	file:
slot	tree-mod-log.c	/^	int slot;$/;"	m	struct:tree_mod_elem	typeref:typename:int	file:
slots	ctree.h	/^	int slots[BTRFS_MAX_LEVEL];$/;"	m	struct:btrfs_path	typeref:typename:int[]
smap	bio.c	/^	struct btrfs_io_stripe smap;$/;"	m	struct:async_submit_bio	typeref:struct:btrfs_io_stripe	file:
snap	transaction.h	/^	struct btrfs_root *snap;$/;"	m	struct:btrfs_pending_snapshot	typeref:struct:btrfs_root *
snapshot_force_cow	ctree.h	/^	atomic_t snapshot_force_cow;$/;"	m	struct:btrfs_root	typeref:typename:atomic_t
snapshot_lock	ctree.h	/^	struct btrfs_drew_lock snapshot_lock;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_drew_lock
space_info	block-group.h	/^	struct btrfs_space_info *space_info;$/;"	m	struct:btrfs_block_group	typeref:struct:btrfs_space_info *
space_info	block-rsv.h	/^	struct btrfs_space_info *space_info;$/;"	m	struct:btrfs_block_rsv	typeref:struct:btrfs_space_info *
space_info	fs.h	/^	struct list_head space_info;$/;"	m	struct:btrfs_fs_info	typeref:struct:list_head
space_info_attrs	sysfs.c	/^static struct attribute *space_info_attrs[] = {$/;"	v	typeref:struct:attribute * []	file:
space_info_flag_to_str	space-info.c	/^static const char *space_info_flag_to_str(const struct btrfs_space_info *space_info)$/;"	f	typeref:typename:const char *	file:
space_info_kobj	fs.h	/^	struct kobject *space_info_kobj;$/;"	m	struct:btrfs_fs_info	typeref:struct:kobject *
space_info_ktype	sysfs.c	/^static const struct kobj_type space_info_ktype = {$/;"	v	typeref:typename:const struct kobj_type	file:
space_info_release	sysfs.c	/^static void space_info_release(struct kobject *kobj)$/;"	f	typeref:typename:void	file:
split_extent_map	extent_map.c	/^int split_extent_map(struct btrfs_inode *inode, u64 start, u64 len, u64 pre,$/;"	f	typeref:typename:int
split_item	ctree.c	/^static noinline int split_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
split_leaf	ctree.c	/^static noinline int split_leaf(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
split_node	ctree.c	/^static noinline int split_node(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
split_state	extent-io-tree.c	/^static int split_state(struct extent_io_tree *tree, struct extent_state *orig,$/;"	f	typeref:typename:int	file:
srcdev	fs.h	/^	struct btrfs_device *srcdev;$/;"	m	struct:btrfs_dev_replace	typeref:struct:btrfs_device *
stage	extent-tree.c	/^	int stage;$/;"	m	struct:walk_control	typeref:typename:int	file:
stage	relocation.c	/^	unsigned int stage:8;$/;"	m	struct:reloc_control	typeref:typename:unsigned int:8	file:
stage	tree-log.c	/^	int stage;$/;"	m	struct:walk_control	typeref:typename:int	file:
stage_to_string	relocation.c	/^static const char *stage_to_string(int stage)$/;"	f	typeref:typename:const char *	file:
start	block-group.h	/^	u64 start;$/;"	m	struct:btrfs_block_group	typeref:typename:u64
start	check-integrity.c	/^	u64 start;		\/* virtual bytenr *\/$/;"	m	struct:btrfsic_block_data_ctx	typeref:typename:u64	file:
start	compression.h	/^	u64 start;$/;"	m	struct:compressed_bio	typeref:typename:u64
start	ctree.h	/^	u64 start;$/;"	m	struct:btrfs_drop_extents_args	typeref:typename:u64
start	defrag.c	/^	u64 start;$/;"	m	struct:defrag_target_range	typeref:typename:u64	file:
start	extent-io-tree.c	/^	u64 start;$/;"	m	struct:tree_entry	typeref:typename:u64	file:
start	extent-io-tree.h	/^	u64 start;$/;"	m	struct:extent_state	typeref:typename:u64
start	extent_io.c	/^	u64 start;$/;"	m	struct:processed_extent	typeref:typename:u64	file:
start	extent_io.h	/^	u64 start;$/;"	m	struct:extent_buffer	typeref:typename:u64
start	extent_map.h	/^	u64 start;$/;"	m	struct:extent_map	typeref:typename:u64
start	file.c	/^	u64 start;$/;"	m	struct:falloc_range	typeref:typename:u64	file:
start	free-space-cache.c	/^	u64 start;$/;"	m	struct:btrfs_trim_range	typeref:typename:u64	file:
start	free-space-cache.h	/^	u64 start;$/;"	m	struct:btrfs_free_space_ctl	typeref:typename:u64
start	inode.c	/^	u64 start;$/;"	m	struct:async_chunk	typeref:typename:u64	file:
start	inode.c	/^	u64 start;$/;"	m	struct:async_extent	typeref:typename:u64	file:
start	inode.c	/^	u64 start;$/;"	m	struct:btrfs_swap_info	typeref:typename:u64	file:
start	inode.c	/^	u64 start;$/;"	m	struct:can_nocow_file_extent_args	typeref:typename:u64	file:
start	relocation.c	/^	u64 start;$/;"	m	struct:file_extent_cluster	typeref:typename:u64	file:
start	send.c	/^			char *start;$/;"	m	struct:fs_path::__anon1b81f160010a::__anon1b81f1600208	typeref:typename:char *	file:
start	tests/extent-map-tests.c	/^	u64 start;$/;"	m	struct:extent_range	typeref:typename:u64	file:
start	tests/free-space-tree-tests.c	/^	u64 start;$/;"	m	struct:free_space_extent	typeref:typename:u64	file:
start	volumes.c	/^	u64 start;$/;"	m	struct:alloc_chunk_ctl	typeref:typename:u64	file:
start_async_work	raid56.c	/^static void start_async_work(struct btrfs_raid_bio *rbio, work_func_t work_func)$/;"	f	typeref:typename:void	file:
start_delalloc_inodes	inode.c	/^static int start_delalloc_inodes(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
start_log_trans	tree-log.c	/^static int start_log_trans(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
start_ordered_ops	file.c	/^static int start_ordered_ops(struct inode *inode, loff_t start, loff_t end)$/;"	f	typeref:typename:int	file:
start_time	transaction.h	/^	time64_t start_time;$/;"	m	struct:btrfs_transaction	typeref:typename:time64_t
start_transaction	transaction.c	/^start_transaction(struct btrfs_root *root, unsigned int num_items,$/;"	f	typeref:struct:btrfs_trans_handle *	file:
stat	scrub.c	/^	struct btrfs_scrub_progress stat;$/;"	m	struct:scrub_ctx	typeref:struct:btrfs_scrub_progress	file:
stat	volumes.h	/^	struct btrfs_balance_progress stat;$/;"	m	struct:btrfs_balance_control	typeref:struct:btrfs_balance_progress
stat_lock	scrub.c	/^	spinlock_t		stat_lock;$/;"	m	struct:scrub_ctx	typeref:typename:spinlock_t	file:
state	check-integrity.c	/^	struct btrfsic_state *state;$/;"	m	struct:btrfsic_dev_state	typeref:struct:btrfsic_state *	file:
state	ctree.h	/^	unsigned long state;$/;"	m	struct:btrfs_root	typeref:typename:unsigned long
state	extent-io-tree.h	/^	struct rb_root state;$/;"	m	struct:extent_io_tree	typeref:struct:rb_root
state	extent-io-tree.h	/^	u32 state;$/;"	m	struct:extent_state	typeref:typename:u32
state	scrub.c	/^	unsigned long state;$/;"	m	struct:scrub_stripe	typeref:typename:unsigned long	file:
state	transaction.h	/^	enum btrfs_trans_state state;$/;"	m	struct:btrfs_transaction	typeref:enum:btrfs_trans_state
status	inode.c	/^	blk_status_t status;$/;"	m	struct:btrfs_encoded_read_private	typeref:typename:blk_status_t	file:
steal	space-info.h	/^	bool steal;$/;"	m	struct:reserve_ticket	typeref:typename:bool
steal_from_bitmap	free-space-cache.c	/^static void steal_from_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:void	file:
steal_from_bitmap_to_end	free-space-cache.c	/^static bool steal_from_bitmap_to_end(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:bool	file:
steal_from_bitmap_to_front	free-space-cache.c	/^static bool steal_from_bitmap_to_front(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:bool	file:
steal_from_global_rsv	space-info.c	/^static bool steal_from_global_rsv(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:bool	file:
steal_rbio	raid56.c	/^static void steal_rbio(struct btrfs_raid_bio *src, struct btrfs_raid_bio *dest)$/;"	f	typeref:typename:void	file:
steal_rbio_page	raid56.c	/^static void steal_rbio_page(struct btrfs_raid_bio *src,$/;"	f	typeref:typename:void	file:
stime	ioctl.c	/^	struct btrfs_ioctl_timespec_32 stime; \/* in *\/$/;"	m	struct:btrfs_ioctl_received_subvol_args_32	typeref:struct:btrfs_ioctl_timespec_32	file:
store_backref_cache	send.c	/^static void store_backref_cache(u64 leaf_bytenr, const struct ulist *root_ids,$/;"	f	typeref:typename:void	file:
store_backref_shared_cache	backref.c	/^static void store_backref_shared_cache(struct btrfs_backref_share_check_ctx *ctx,$/;"	f	typeref:typename:void	file:
str	rcu-string.h	/^	char str[];$/;"	m	struct:rcu_string	typeref:typename:char[]
stransid	ioctl.c	/^	__u64	stransid;		\/* in *\/$/;"	m	struct:btrfs_ioctl_received_subvol_args_32	typeref:typename:__u64	file:
strict	inode.c	/^	bool strict;$/;"	m	struct:can_nocow_file_extent_args	typeref:typename:bool	file:
stripe_cache	raid56.c	/^	struct list_head stripe_cache;$/;"	m	struct:btrfs_stripe_hash_table	typeref:struct:list_head	file:
stripe_cache	raid56.h	/^	struct list_head stripe_cache;$/;"	m	struct:btrfs_raid_bio	typeref:struct:list_head
stripe_has_metadata_error	scrub.c	/^static bool stripe_has_metadata_error(struct scrub_stripe *stripe)$/;"	f	typeref:typename:bool	file:
stripe_hash_table	fs.h	/^	struct btrfs_stripe_hash_table *stripe_hash_table;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_stripe_hash_table *
stripe_npages	raid56.h	/^	u8 stripe_npages;$/;"	m	struct:btrfs_raid_bio	typeref:typename:u8
stripe_nr	raid56.h	/^	u8 stripe_nr;$/;"	m	struct:raid56_bio_trace_info	typeref:typename:u8
stripe_nsectors	raid56.h	/^	u8 stripe_nsectors;$/;"	m	struct:btrfs_raid_bio	typeref:typename:u8
stripe_pages	raid56.h	/^	struct page **stripe_pages;$/;"	m	struct:btrfs_raid_bio	typeref:struct:page **
stripe_sectors	raid56.h	/^	struct sector_ptr *stripe_sectors;$/;"	m	struct:btrfs_raid_bio	typeref:struct:sector_ptr *
stripe_size	volumes.c	/^	u64 stripe_size;$/;"	m	struct:alloc_chunk_ctl	typeref:typename:u64	file:
stripes	scrub.c	/^	struct scrub_stripe	stripes[SCRUB_TOTAL_STRIPES];$/;"	m	struct:scrub_ctx	typeref:struct:scrub_stripe[]	file:
stripes	volumes.h	/^	struct btrfs_io_stripe stripes[];$/;"	m	struct:btrfs_io_context	typeref:struct:btrfs_io_stripe[]
stripes	volumes.h	/^	struct btrfs_io_stripe stripes[];$/;"	m	struct:map_lookup	typeref:struct:btrfs_io_stripe[]
stripes_pending	raid56.h	/^	atomic_t stripes_pending;$/;"	m	struct:btrfs_raid_bio	typeref:typename:atomic_t
stripesize	fs.h	/^	u32 stripesize;$/;"	m	struct:btrfs_fs_info	typeref:typename:u32
strm	zlib.c	/^	z_stream strm;$/;"	m	struct:workspace	typeref:typename:z_stream	file:
sub_bytes	inode-item.h	/^	u64 sub_bytes;$/;"	m	struct:btrfs_truncate_control	typeref:typename:u64
sub_root_meta_rsv	qgroup.c	/^static int sub_root_meta_rsv(struct btrfs_root *root, int num_bytes,$/;"	f	typeref:typename:int	file:
sub_stripes	volumes.c	/^	int sub_stripes;$/;"	m	struct:alloc_chunk_ctl	typeref:typename:int	file:
sub_stripes	volumes.h	/^	int sub_stripes;$/;"	m	struct:map_lookup	typeref:typename:int
sub_stripes	volumes.h	/^	u8 sub_stripes;		\/* sub_stripes info for map *\/$/;"	m	struct:btrfs_raid_attr	typeref:typename:u8
submit_bio_bh_rw	check-integrity.c	/^	blk_opf_t submit_bio_bh_rw;$/;"	m	struct:btrfsic_block	typeref:typename:blk_opf_t	file:
submit_compressed_extents	inode.c	/^static noinline void submit_compressed_extents(struct btrfs_work *work)$/;"	f	typeref:typename:noinline void	file:
submit_eb_page	extent_io.c	/^static int submit_eb_page(struct page *page, struct btrfs_eb_write_context *ctx)$/;"	f	typeref:typename:int	file:
submit_eb_subpage	extent_io.c	/^static int submit_eb_subpage(struct page *page, struct writeback_control *wbc)$/;"	f	typeref:typename:int	file:
submit_extent_page	extent_io.c	/^static void submit_extent_page(struct btrfs_bio_ctrl *bio_ctrl,$/;"	f	typeref:typename:void	file:
submit_initial_group_read	scrub.c	/^static void submit_initial_group_read(struct scrub_ctx *sctx,$/;"	f	typeref:typename:void	file:
submit_one_async_extent	inode.c	/^static void submit_one_async_extent(struct async_chunk *async_chunk,$/;"	f	typeref:typename:void	file:
submit_one_bio	extent_io.c	/^static void submit_one_bio(struct btrfs_bio_ctrl *bio_ctrl)$/;"	f	typeref:typename:void	file:
submit_read_wait_bio_list	raid56.c	/^static void submit_read_wait_bio_list(struct btrfs_raid_bio *rbio,$/;"	f	typeref:typename:void	file:
submit_uncompressed_range	inode.c	/^static void submit_uncompressed_range(struct btrfs_inode *inode,$/;"	f	typeref:typename:void	file:
submit_write_bio	extent_io.c	/^static void submit_write_bio(struct btrfs_bio_ctrl *bio_ctrl, int ret)$/;"	f	typeref:typename:void	file:
submit_write_bios	raid56.c	/^static void submit_write_bios(struct btrfs_raid_bio *rbio,$/;"	f	typeref:typename:void	file:
submitted	inode.c	/^	ssize_t submitted;$/;"	m	struct:btrfs_dio_data	typeref:typename:ssize_t	file:
subpage_calc_start_bit	subpage.c	/^#define subpage_calc_start_bit(/;"	d	file:
subpage_info	fs.h	/^	struct btrfs_subpage_info *subpage_info;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_subpage_info *
subpage_test_bitmap_all_set	subpage.c	/^#define subpage_test_bitmap_all_set(/;"	d	file:
subpage_test_bitmap_all_zero	subpage.c	/^#define subpage_test_bitmap_all_zero(/;"	d	file:
subvol	btrfs_inode.h	/^	bool subvol;$/;"	m	struct:btrfs_new_inode_args	typeref:typename:bool
subvol_bytenr	qgroup.h	/^	u64 subvol_bytenr;$/;"	m	struct:btrfs_qgroup_swapped_block	typeref:typename:u64
subvol_generation	qgroup.h	/^	u64 subvol_generation;$/;"	m	struct:btrfs_qgroup_swapped_block	typeref:typename:u64
subvol_sem	fs.h	/^	struct rw_semaphore subvol_sem;$/;"	m	struct:btrfs_fs_info	typeref:struct:rw_semaphore
sums	bio.h	/^			struct btrfs_ordered_sum *sums;$/;"	m	struct:btrfs_bio::__anon0f27d3d5010a::__anon0f27d3d50308	typeref:struct:btrfs_ordered_sum *
sums	ordered-data.h	/^	u8 sums[];$/;"	m	struct:btrfs_ordered_sum	typeref:typename:u8[]
super_copy	fs.h	/^	struct btrfs_super_block *super_copy;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_super_block *
super_for_commit	fs.h	/^	struct btrfs_super_block *super_for_commit;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_super_block *
super_lock	fs.h	/^	spinlock_t super_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:spinlock_t
supported_checksums_show	sysfs.c	/^static ssize_t supported_checksums_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
supported_feature_masks	sysfs.c	/^static const u64 supported_feature_masks[FEAT_MAX] = {$/;"	v	typeref:typename:const u64[]	file:
supported_rescue_options_show	sysfs.c	/^static ssize_t supported_rescue_options_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
supported_sectorsizes_show	sysfs.c	/^static ssize_t supported_sectorsizes_show(struct kobject *kobj,$/;"	f	typeref:typename:ssize_t	file:
swap_extents	block-group.h	/^	int swap_extents;$/;"	m	struct:btrfs_block_group	typeref:typename:int
swapfile_pins	fs.h	/^	struct rb_root swapfile_pins;$/;"	m	struct:btrfs_fs_info	typeref:struct:rb_root
swapfile_pins_lock	fs.h	/^	spinlock_t swapfile_pins_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:spinlock_t
swapped	ctree.h	/^	bool swapped;$/;"	m	struct:btrfs_qgroup_swapped_blocks	typeref:typename:bool
swapped_blocks	ctree.h	/^	struct btrfs_qgroup_swapped_blocks swapped_blocks;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_qgroup_swapped_blocks
switch_commit_roots	transaction.c	/^static noinline void switch_commit_roots(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:noinline void	file:
switch_commits	transaction.h	/^	struct list_head switch_commits;$/;"	m	struct:btrfs_transaction	typeref:struct:list_head
sync_write_pointer_for_zoned	scrub.c	/^static int sync_write_pointer_for_zoned(struct scrub_ctx *sctx, u64 logical,$/;"	f	typeref:typename:int	file:
sys	volumes.h	/^	struct btrfs_balance_args sys;$/;"	m	struct:btrfs_balance_control	typeref:struct:btrfs_balance_args
table	check-integrity.c	/^	struct list_head table[BTRFSIC_BLOCK_HASHTABLE_SIZE];$/;"	m	struct:btrfsic_block_hashtable	typeref:struct:list_head[]	file:
table	check-integrity.c	/^	struct list_head table[BTRFSIC_BLOCK_LINK_HASHTABLE_SIZE];$/;"	m	struct:btrfsic_block_link_hashtable	typeref:struct:list_head[]	file:
table	check-integrity.c	/^	struct list_head table[BTRFSIC_DEV2STATE_HASHTABLE_SIZE];$/;"	m	struct:btrfsic_dev_state_hashtable	typeref:struct:list_head[]	file:
table	raid56.c	/^	struct btrfs_stripe_hash table[];$/;"	m	struct:btrfs_stripe_hash_table	typeref:struct:btrfs_stripe_hash[]	file:
tail_append_pending_moves	send.c	/^static void tail_append_pending_moves(struct send_ctx *sctx,$/;"	f	typeref:typename:void	file:
test_add_free_space_entry	free-space-cache.c	/^int test_add_free_space_entry(struct btrfs_block_group *cache,$/;"	f	typeref:typename:int
test_bitmap_clear	tests/extent-io-tests.c	/^static int test_bitmap_clear(const char *name, unsigned long *bitmap,$/;"	f	typeref:typename:int	file:
test_bitmap_set	tests/extent-io-tests.c	/^static int test_bitmap_set(const char *name, unsigned long *bitmap,$/;"	f	typeref:typename:int	file:
test_bitmaps	tests/free-space-tests.c	/^static int test_bitmaps(struct btrfs_block_group *cache, u32 sectorsize)$/;"	f	typeref:typename:int	file:
test_bitmaps_and_extents	tests/free-space-tests.c	/^static int test_bitmaps_and_extents(struct btrfs_block_group *cache,$/;"	f	typeref:typename:int	file:
test_btrfs_get_extent	tests/inode-tests.c	/^static noinline int test_btrfs_get_extent(u32 sectorsize, u32 nodesize)$/;"	f	typeref:typename:noinline int	file:
test_btrfs_split_item	tests/extent-buffer-tests.c	/^static int test_btrfs_split_item(u32 sectorsize, u32 nodesize)$/;"	f	typeref:typename:int	file:
test_bytes_index	tests/free-space-tests.c	/^static int test_bytes_index(struct btrfs_block_group *cache, u32 sectorsize)$/;"	f	typeref:typename:int	file:
test_case_1	tests/extent-map-tests.c	/^static int test_case_1(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
test_case_2	tests/extent-map-tests.c	/^static int test_case_2(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
test_case_3	tests/extent-map-tests.c	/^static int test_case_3(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
test_case_4	tests/extent-map-tests.c	/^static int test_case_4(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
test_case_5	tests/extent-map-tests.c	/^static int test_case_5(void)$/;"	f	typeref:typename:int	file:
test_case_6	tests/extent-map-tests.c	/^static int test_case_6(struct btrfs_fs_info *fs_info, struct extent_map_tree *em_tree)$/;"	f	typeref:typename:int	file:
test_case_7	tests/extent-map-tests.c	/^static int test_case_7(void)$/;"	f	typeref:typename:int	file:
test_check_exists	free-space-cache.c	/^int test_check_exists(struct btrfs_block_group *cache,$/;"	f	typeref:typename:int
test_eb_bitmaps	tests/extent-io-tests.c	/^static int test_eb_bitmaps(u32 sectorsize, u32 nodesize)$/;"	f	typeref:typename:int	file:
test_eb_mem_ops	tests/extent-io-tests.c	/^static int test_eb_mem_ops(u32 sectorsize, u32 nodesize)$/;"	f	typeref:typename:int	file:
test_empty_block_group	tests/free-space-tree-tests.c	/^static int test_empty_block_group(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
test_err	tests/btrfs-tests.h	/^#define test_err(/;"	d
test_error	tests/btrfs-tests.c	/^const char *test_error[] = {$/;"	v	typeref:typename:const char * []
test_extent_accounting	tests/inode-tests.c	/^static int test_extent_accounting(u32 sectorsize, u32 nodesize)$/;"	f	typeref:typename:int	file:
test_extents	tests/free-space-tests.c	/^static int test_extents(struct btrfs_block_group *cache)$/;"	f	typeref:typename:int	file:
test_find_delalloc	tests/extent-io-tests.c	/^static int test_find_delalloc(u32 sectorsize)$/;"	f	typeref:typename:int	file:
test_find_first_clear_extent_bit	tests/extent-io-tests.c	/^static int test_find_first_clear_extent_bit(void)$/;"	f	typeref:typename:int	file:
test_func_t	tests/free-space-tree-tests.c	/^typedef int (*test_func_t)(struct btrfs_trans_handle *,$/;"	t	typeref:typename:int (*)(struct btrfs_trans_handle *,struct btrfs_fs_info *,struct btrfs_block_group *,struct btrfs_path *,u32 alignment)	file:
test_hole_first	tests/inode-tests.c	/^static int test_hole_first(u32 sectorsize, u32 nodesize)$/;"	f	typeref:typename:int	file:
test_merge_both	tests/free-space-tree-tests.c	/^static int test_merge_both(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
test_merge_left	tests/free-space-tree-tests.c	/^static int test_merge_left(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
test_merge_none	tests/free-space-tree-tests.c	/^static int test_merge_none(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
test_merge_right	tests/free-space-tree-tests.c	/^static int test_merge_right(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
test_mnt	tests/btrfs-tests.c	/^static struct vfsmount *test_mnt = NULL;$/;"	v	typeref:struct:vfsmount *	file:
test_msg	tests/btrfs-tests.h	/^#define test_msg(/;"	d
test_multiple_refs	tests/qgroup-tests.c	/^static int test_multiple_refs(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
test_no_shared_qgroup	tests/qgroup-tests.c	/^static int test_no_shared_qgroup(struct btrfs_root *root,$/;"	f	typeref:typename:int	file:
test_range_bit	extent-io-tree.c	/^int test_range_bit(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f	typeref:typename:int
test_remove_all	tests/free-space-tree-tests.c	/^static int test_remove_all(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
test_remove_beginning	tests/free-space-tree-tests.c	/^static int test_remove_beginning(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
test_remove_end	tests/free-space-tree-tests.c	/^static int test_remove_end(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
test_remove_middle	tests/free-space-tree-tests.c	/^static int test_remove_middle(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
test_rmap_block	tests/extent-map-tests.c	/^static int test_rmap_block(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
test_std_err	tests/btrfs-tests.h	/^#define test_std_err(/;"	d
test_steal_space_from_bitmap_to_extent	tests/free-space-tests.c	/^test_steal_space_from_bitmap_to_extent(struct btrfs_block_group *cache,$/;"	f	typeref:typename:int	file:
test_type	tests/btrfs-tests.c	/^static struct file_system_type test_type = {$/;"	v	typeref:struct:file_system_type	file:
test_use_bitmap	tests/free-space-tests.c	/^static bool test_use_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:bool	file:
tgtdev	fs.h	/^	struct btrfs_device *tgtdev;$/;"	m	struct:btrfs_dev_replace	typeref:struct:btrfs_device *
thread_pool_size	fs.h	/^	u32 thread_pool_size;$/;"	m	struct:btrfs_fs_info	typeref:typename:u32
thres_lock	async-thread.c	/^	spinlock_t thres_lock;$/;"	m	struct:btrfs_workqueue	typeref:typename:spinlock_t	file:
thresh	async-thread.c	/^	int thresh;$/;"	m	struct:btrfs_workqueue	typeref:typename:int	file:
thresh_exec_hook	async-thread.c	/^static inline void thresh_exec_hook(struct btrfs_workqueue *wq)$/;"	f	typeref:typename:void	file:
thresh_queue_hook	async-thread.c	/^static inline void thresh_queue_hook(struct btrfs_workqueue *wq)$/;"	f	typeref:typename:void	file:
throttle_deadline	scrub.c	/^	ktime_t			throttle_deadline;$/;"	m	struct:scrub_ctx	typeref:typename:ktime_t	file:
throttle_sent	scrub.c	/^	u64			throttle_sent;$/;"	m	struct:scrub_ctx	typeref:typename:u64	file:
tickets	space-info.h	/^	struct list_head tickets;$/;"	m	struct:btrfs_space_info	typeref:struct:list_head
tickets_id	space-info.h	/^	u64 tickets_id;$/;"	m	struct:btrfs_space_info	typeref:typename:u64
time	calclock/calclock.h	/^	ktime_t time;$/;"	m	struct:calclock	typeref:typename:ktime_t
time_seq	backref.h	/^	u64 time_seq;$/;"	m	struct:btrfs_backref_walk_ctx	typeref:typename:u64
time_started	fs.h	/^	time64_t time_started;$/;"	m	struct:btrfs_dev_replace	typeref:typename:time64_t
time_stopped	fs.h	/^	time64_t time_stopped;$/;"	m	struct:btrfs_dev_replace	typeref:typename:time64_t
timer	zstd.c	/^	struct timer_list timer;$/;"	m	struct:zstd_workspace_manager	typeref:struct:timer_list	file:
tlv_len	send.h	/^	__le16 tlv_len;$/;"	m	struct:btrfs_tlv_header	typeref:typename:__le16
tlv_put	send.c	/^static int tlv_put(struct send_ctx *sctx, u16 attr, const void *data, int len)$/;"	f	typeref:typename:int	file:
tlv_put_btrfs_timespec	send.c	/^static int tlv_put_btrfs_timespec(struct send_ctx *sctx, u16 attr,$/;"	f	typeref:typename:int	file:
tlv_put_string	send.c	/^static int tlv_put_string(struct send_ctx *sctx, u16 attr,$/;"	f	file:
tlv_put_uuid	send.c	/^static int tlv_put_uuid(struct send_ctx *sctx, u16 attr,$/;"	f	typeref:typename:int	file:
tlv_type	send.h	/^	__le16 tlv_type;$/;"	m	struct:btrfs_tlv_header	typeref:typename:__le16
to_btrfs_feature_attr	sysfs.c	/^static struct btrfs_feature_attr *to_btrfs_feature_attr(struct kobj_attribute *a)$/;"	f	typeref:struct:btrfs_feature_attr *	file:
to_compressed_bio	compression.c	/^static inline struct compressed_bio *to_compressed_bio(struct btrfs_bio *bbio)$/;"	f	typeref:struct:compressed_bio *	file:
to_fs_devs	sysfs.c	/^static inline struct btrfs_fs_devices *to_fs_devs(struct kobject *kobj)$/;"	f	typeref:struct:btrfs_fs_devices *	file:
to_fs_info	sysfs.c	/^static inline struct btrfs_fs_info *to_fs_info(struct kobject *kobj)$/;"	f	typeref:struct:btrfs_fs_info *	file:
to_raid_kobj	sysfs.c	/^#define to_raid_kobj(/;"	d	file:
to_space_info	sysfs.c	/^#define to_space_info(/;"	d	file:
tokens	super.c	/^static const match_table_t tokens = {$/;"	v	typeref:typename:const match_table_t	file:
tolerated_failures	volumes.h	/^	u8 tolerated_failures;	\/* max tolerated fail devs *\/$/;"	m	struct:btrfs_raid_attr	typeref:typename:u8
total_avail	volumes.h	/^	u64 total_avail;$/;"	m	struct:btrfs_device_info	typeref:typename:u64
total_bitmaps	free-space-cache.h	/^	int total_bitmaps;$/;"	m	struct:btrfs_free_space_ctl	typeref:typename:int
total_bytes	space-info.h	/^	u64 total_bytes;	\/* total bytes in the space,$/;"	m	struct:btrfs_space_info	typeref:typename:u64
total_bytes	volumes.h	/^	u64 total_bytes;$/;"	m	struct:btrfs_device	typeref:typename:u64
total_commit_dur	fs.h	/^	u64 total_commit_dur;$/;"	m	struct:btrfs_commit_stats	typeref:typename:u64
total_data_size	ctree.h	/^	u32 total_data_size;$/;"	m	struct:btrfs_item_batch	typeref:typename:u32
total_devices	volumes.h	/^	u64 total_devices;$/;"	m	struct:btrfs_fs_devices	typeref:typename:u64
total_free_space	extent-tree.h	/^	u64 total_free_space;$/;"	m	struct:find_free_extent_ctl	typeref:typename:u64
total_nr_bits	subpage.h	/^	unsigned int total_nr_bits;$/;"	m	struct:btrfs_subpage_info	typeref:typename:unsigned int
total_ref_mod	delayed-ref.h	/^	int total_ref_mod;$/;"	m	struct:btrfs_delayed_ref_head	typeref:typename:int
total_rw_bytes	volumes.h	/^	u64 total_rw_bytes;$/;"	m	struct:btrfs_fs_devices	typeref:typename:u64
total_ws	compression.h	/^	atomic_t total_ws;$/;"	m	struct:workspace_manager	typeref:typename:atomic_t
trace	ref-verify.c	/^	unsigned long trace[MAX_TRACE];$/;"	m	struct:ref_action	typeref:typename:unsigned long[]	file:
trace_leaf	qgroup.h	/^	bool trace_leaf;$/;"	m	struct:btrfs_qgroup_swapped_block	typeref:typename:bool
trace_len	ref-verify.c	/^	unsigned int trace_len;$/;"	m	struct:ref_action	typeref:typename:unsigned int	file:
trans	backref.h	/^	struct btrfs_trans_handle *trans;$/;"	m	struct:btrfs_backref_walk_ctx	typeref:struct:btrfs_trans_handle *
trans	tree-log.c	/^	struct btrfs_trans_handle *trans;$/;"	m	struct:walk_control	typeref:struct:btrfs_trans_handle *	file:
trans_block_rsv	fs.h	/^	struct btrfs_block_rsv trans_block_rsv;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_block_rsv
trans_list	fs.h	/^	struct list_head trans_list;$/;"	m	struct:btrfs_fs_info	typeref:struct:list_head
trans_lock	fs.h	/^	spinlock_t trans_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:spinlock_t
transaction	transaction.h	/^	struct btrfs_transaction *transaction;$/;"	m	struct:btrfs_trans_handle	typeref:struct:btrfs_transaction *
transaction_blocked_wait	fs.h	/^	wait_queue_head_t transaction_blocked_wait;$/;"	m	struct:btrfs_fs_info	typeref:typename:wait_queue_head_t
transaction_kthread	disk-io.c	/^static int transaction_kthread(void *arg)$/;"	f	typeref:typename:int	file:
transaction_kthread	fs.h	/^	struct task_struct *transaction_kthread;$/;"	m	struct:btrfs_fs_info	typeref:struct:task_struct *
transaction_kthread_mutex	fs.h	/^	struct mutex transaction_kthread_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:mutex
transaction_throttle	fs.h	/^	wait_queue_head_t transaction_throttle;$/;"	m	struct:btrfs_fs_info	typeref:typename:wait_queue_head_t
transaction_wait	fs.h	/^	wait_queue_head_t transaction_wait;$/;"	m	struct:btrfs_fs_info	typeref:typename:wait_queue_head_t
transid	defrag.c	/^	u64 transid;$/;"	m	struct:inode_defrag	typeref:typename:u64	file:
transid	transaction.h	/^	u64 transid;$/;"	m	struct:btrfs_trans_handle	typeref:typename:u64
transid	transaction.h	/^	u64 transid;$/;"	m	struct:btrfs_transaction	typeref:typename:u64
transid	tree-checker.h	/^	u64 transid;$/;"	m	struct:btrfs_tree_parent_check	typeref:typename:u64
tree	ordered-data.h	/^	struct rb_root tree;$/;"	m	struct:btrfs_ordered_inode_tree	typeref:struct:rb_root
tree_advance	send.c	/^static int tree_advance(struct btrfs_path *path,$/;"	f	typeref:typename:int	file:
tree_backref_for_extent	backref.c	/^int tree_backref_for_extent(unsigned long *ptr, struct extent_buffer *eb,$/;"	f	typeref:typename:int
tree_block	relocation.c	/^struct tree_block {$/;"	s	file:
tree_block_processed	relocation.c	/^static int tree_block_processed(u64 bytenr, struct reloc_control *rc)$/;"	f	typeref:typename:int	file:
tree_compare_item	send.c	/^static int tree_compare_item(struct btrfs_path *left_path,$/;"	f	typeref:typename:int	file:
tree_entry	extent-io-tree.c	/^struct tree_entry {$/;"	s	file:
tree_insert	delayed-ref.c	/^static struct btrfs_delayed_ref_node* tree_insert(struct rb_root_cached *root,$/;"	f	typeref:struct:btrfs_delayed_ref_node *	file:
tree_insert	extent_map.c	/^static int tree_insert(struct rb_root_cached *root, struct extent_map *em)$/;"	f	typeref:typename:int	file:
tree_insert	ordered-data.c	/^static struct rb_node *tree_insert(struct rb_root *root, u64 file_offset,$/;"	f	typeref:struct:rb_node *	file:
tree_insert_offset	free-space-cache.c	/^static int tree_insert_offset(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:int	file:
tree_list	delayed-inode.h	/^	struct list_head tree_list;	\/* used for batch insert\/delete items *\/$/;"	m	struct:btrfs_delayed_item	typeref:struct:list_head
tree_lock	free-space-cache.h	/^	spinlock_t tree_lock;$/;"	m	struct:btrfs_free_space_ctl	typeref:typename:spinlock_t
tree_log_mutex	fs.h	/^	struct mutex tree_log_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:mutex
tree_mod_dont_log	tree-mod-log.c	/^static inline bool tree_mod_dont_log(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:bool	file:
tree_mod_elem	tree-mod-log.c	/^struct tree_mod_elem {$/;"	s	file:
tree_mod_log	fs.h	/^	struct rb_root tree_mod_log;$/;"	m	struct:btrfs_fs_info	typeref:struct:rb_root
tree_mod_log_alloc_move	tree-mod-log.c	/^static struct tree_mod_elem *tree_mod_log_alloc_move(struct extent_buffer *eb,$/;"	f	typeref:struct:tree_mod_elem *	file:
tree_mod_log_free_eb	tree-mod-log.c	/^static inline int tree_mod_log_free_eb(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
tree_mod_log_insert	tree-mod-log.c	/^static noinline int tree_mod_log_insert(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:noinline int	file:
tree_mod_log_lock	fs.h	/^	rwlock_t tree_mod_log_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:rwlock_t
tree_mod_log_oldest_root	tree-mod-log.c	/^static struct tree_mod_elem *tree_mod_log_oldest_root(struct extent_buffer *eb_root,$/;"	f	typeref:struct:tree_mod_elem *	file:
tree_mod_log_rewind	tree-mod-log.c	/^static void tree_mod_log_rewind(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
tree_mod_log_search	tree-mod-log.c	/^static struct tree_mod_elem *tree_mod_log_search(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:tree_mod_elem *	file:
tree_mod_log_search_oldest	tree-mod-log.c	/^static struct tree_mod_elem *tree_mod_log_search_oldest(struct btrfs_fs_info *fs_info,$/;"	f	typeref:struct:tree_mod_elem *	file:
tree_mod_need_log	tree-mod-log.c	/^static inline bool tree_mod_need_log(const struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:bool	file:
tree_mod_root	tree-mod-log.c	/^struct tree_mod_root {$/;"	s	file:
tree_mod_seq	fs.h	/^	atomic64_t tree_mod_seq;$/;"	m	struct:btrfs_fs_info	typeref:typename:atomic64_t
tree_mod_seq_list	fs.h	/^	struct list_head tree_mod_seq_list;$/;"	m	struct:btrfs_fs_info	typeref:struct:list_head
tree_move_down	send.c	/^static int tree_move_down(struct btrfs_path *path, int *level, u64 reada_min_gen)$/;"	f	typeref:typename:int	file:
tree_move_next_or_upnext	send.c	/^static int tree_move_next_or_upnext(struct btrfs_path *path,$/;"	f	typeref:typename:int	file:
tree_ref	delayed-ref.h	/^		struct btrfs_tree_ref tree_ref;$/;"	m	union:btrfs_ref::__anon5106a19d010a	typeref:struct:btrfs_tree_ref
tree_root	fs.h	/^	struct btrfs_root *tree_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_root *
tree_search	extent-io-tree.c	/^static inline struct extent_state *tree_search(struct extent_io_tree *tree, u64 offset)$/;"	f	typeref:struct:extent_state *	file:
tree_search	ordered-data.c	/^static inline struct rb_node *tree_search(struct btrfs_ordered_inode_tree *tree,$/;"	f	typeref:struct:rb_node *	file:
tree_search_for_insert	extent-io-tree.c	/^static inline struct extent_state *tree_search_for_insert(struct extent_io_tree *tree,$/;"	f	typeref:struct:extent_state *	file:
tree_search_offset	free-space-cache.c	/^tree_search_offset(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:struct:btrfs_free_space *	file:
tree_search_prev_next	extent-io-tree.c	/^static struct extent_state *tree_search_prev_next(struct extent_io_tree *tree,$/;"	f	typeref:struct:extent_state *	file:
treelog_bg	fs.h	/^	u64 treelog_bg;$/;"	m	struct:btrfs_fs_info	typeref:typename:u64
treelog_bg_lock	fs.h	/^	spinlock_t treelog_bg_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:spinlock_t
trim_bitmaps	free-space-cache.c	/^static int trim_bitmaps(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int	file:
trim_dir_utimes_cache	send.c	/^static int trim_dir_utimes_cache(struct send_ctx *sctx)$/;"	f	typeref:typename:int	file:
trim_no_bitmap	free-space-cache.c	/^static int trim_no_bitmap(struct btrfs_block_group *block_group,$/;"	f	typeref:typename:int	file:
trim_state	free-space-cache.h	/^	enum btrfs_trim_state trim_state;$/;"	m	struct:btrfs_free_space	typeref:enum:btrfs_trim_state
trimming_ranges	free-space-cache.h	/^	struct list_head trimming_ranges;$/;"	m	struct:btrfs_free_space_ctl	typeref:struct:list_head
truncate_inode_items	tree-log.c	/^static int truncate_inode_items(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
truncate_one_csum	file-item.c	/^static noinline void truncate_one_csum(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline void	file:
truncated_len	ordered-data.h	/^	u64 truncated_len;$/;"	m	struct:btrfs_ordered_extent	typeref:typename:u64
try_flush_qgroup	qgroup.c	/^static int try_flush_qgroup(struct btrfs_root *root)$/;"	f	typeref:typename:int	file:
try_lock_extent	extent-io-tree.c	/^int try_lock_extent(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f	typeref:typename:int
try_merge_free_space	free-space-cache.c	/^static bool try_merge_free_space(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:bool	file:
try_merge_map	extent_map.c	/^static void try_merge_map(struct extent_map_tree *tree, struct extent_map *em)$/;"	f	typeref:typename:void	file:
try_release_extent_buffer	extent_io.c	/^int try_release_extent_buffer(struct page *page)$/;"	f	typeref:typename:int
try_release_extent_mapping	extent_io.c	/^int try_release_extent_mapping(struct page *page, gfp_t mask)$/;"	f	typeref:typename:int
try_release_extent_state	extent_io.c	/^static int try_release_extent_state(struct extent_io_tree *tree,$/;"	f	typeref:typename:int	file:
try_release_subpage_extent_buffer	extent_io.c	/^static int try_release_subpage_extent_buffer(struct page *page)$/;"	f	typeref:typename:int	file:
type	ctree.h	/^	u32 type;$/;"	m	struct:btrfs_root	typeref:typename:u32
type	delayed-ref.h	/^	enum btrfs_ref_type type;$/;"	m	struct:btrfs_ref	typeref:enum:btrfs_ref_type
type	delayed-ref.h	/^	unsigned int type:8;$/;"	m	struct:btrfs_delayed_ref_node	typeref:typename:unsigned int:8
type	inode.c	/^	unsigned type;$/;"	m	struct:dir_entry	typeref:typename:unsigned	file:
type	transaction.h	/^	unsigned int type;$/;"	m	struct:btrfs_trans_handle	typeref:typename:unsigned int
type	volumes.c	/^	u64 type;$/;"	m	struct:alloc_chunk_ctl	typeref:typename:u64	file:
type	volumes.h	/^	u64 type;$/;"	m	struct:btrfs_device	typeref:typename:u64
type	volumes.h	/^	u64 type;$/;"	m	struct:map_lookup	typeref:typename:u64
uid	send.c	/^	u64 uid;$/;"	m	struct:btrfs_inode_info	typeref:typename:u64	file:
ulist	ulist.h	/^struct ulist {$/;"	s
ulist_add	ulist.c	/^int ulist_add(struct ulist *ulist, u64 val, u64 aux, gfp_t gfp_mask)$/;"	f	typeref:typename:int
ulist_add_merge	ulist.c	/^int ulist_add_merge(struct ulist *ulist, u64 val, u64 aux,$/;"	f	typeref:typename:int
ulist_add_merge_ptr	ulist.h	/^static inline int ulist_add_merge_ptr(struct ulist *ulist, u64 val, void *aux,$/;"	f	typeref:typename:int
ulist_alloc	ulist.c	/^struct ulist *ulist_alloc(gfp_t gfp_mask)$/;"	f	typeref:struct:ulist *
ulist_del	ulist.c	/^int ulist_del(struct ulist *ulist, u64 val, u64 aux)$/;"	f	typeref:typename:int
ulist_free	ulist.c	/^void ulist_free(struct ulist *ulist)$/;"	f	typeref:typename:void
ulist_init	ulist.c	/^void ulist_init(struct ulist *ulist)$/;"	f	typeref:typename:void
ulist_iterator	ulist.h	/^struct ulist_iterator {$/;"	s
ulist_next	ulist.c	/^struct ulist_node *ulist_next(const struct ulist *ulist, struct ulist_iterator *uiter)$/;"	f	typeref:struct:ulist_node *
ulist_node	ulist.h	/^struct ulist_node {$/;"	s
ulist_rbtree_erase	ulist.c	/^static void ulist_rbtree_erase(struct ulist *ulist, struct ulist_node *node)$/;"	f	typeref:typename:void	file:
ulist_rbtree_insert	ulist.c	/^static int ulist_rbtree_insert(struct ulist *ulist, struct ulist_node *ins)$/;"	f	typeref:typename:int	file:
ulist_rbtree_search	ulist.c	/^static struct ulist_node *ulist_rbtree_search(struct ulist *ulist, u64 val)$/;"	f	typeref:struct:ulist_node *	file:
ulist_reinit	ulist.c	/^void ulist_reinit(struct ulist *ulist)$/;"	f	typeref:typename:void
ulist_release	ulist.c	/^void ulist_release(struct ulist *ulist)$/;"	f	typeref:typename:void
unaccount_log_buffer	tree-log.c	/^static void unaccount_log_buffer(struct btrfs_fs_info *fs_info, u64 start)$/;"	f	typeref:typename:void	file:
uncompress_inline	inode.c	/^static noinline int uncompress_inline(struct btrfs_path *path,$/;"	f	typeref:typename:noinline int	file:
unencoded_len	ioctl.c	/^	__u64 unencoded_len;$/;"	m	struct:btrfs_ioctl_encoded_io_args_32	typeref:typename:__u64	file:
unencoded_offset	ioctl.c	/^	__u64 unencoded_offset;$/;"	m	struct:btrfs_ioctl_encoded_io_args_32	typeref:typename:__u64	file:
unit	free-space-cache.h	/^	int unit;$/;"	m	struct:btrfs_free_space_ctl	typeref:typename:int
unlink_free_space	free-space-cache.c	/^static inline void unlink_free_space(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:void	file:
unlink_inode_for_log_replay	tree-log.c	/^static int unlink_inode_for_log_replay(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
unlink_old_inode_refs	tree-log.c	/^static int unlink_old_inode_refs(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
unlock_extent	extent-io-tree.h	/^static inline int unlock_extent(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f	typeref:typename:int
unlock_stripe	raid56.c	/^static noinline void unlock_stripe(struct btrfs_raid_bio *rbio)$/;"	f	typeref:typename:noinline void	file:
unlock_up	ctree.c	/^static noinline void unlock_up(struct btrfs_path *path, int level,$/;"	f	typeref:typename:noinline void	file:
unode_aux_to_inode_list	backref.c	/^unode_aux_to_inode_list(struct ulist_node *node)$/;"	f	typeref:struct:extent_inode_elem *	file:
unode_aux_to_qgroup	qgroup.c	/^static inline struct btrfs_qgroup* unode_aux_to_qgroup(struct ulist_node *n)$/;"	f	typeref:struct:btrfs_qgroup *	file:
unpin_extent_cache	extent_map.c	/^int unpin_extent_cache(struct extent_map_tree *tree, u64 start, u64 len,$/;"	f	typeref:typename:int
unpin_extent_range	extent-tree.c	/^static int unpin_extent_range(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
unregister_btrfs	super.c	/^static void unregister_btrfs(void)$/;"	f	typeref:typename:void	file:
unselect_delayed_ref_head	extent-tree.c	/^static void unselect_delayed_ref_head(struct btrfs_delayed_ref_root *delayed_refs,$/;"	f	typeref:typename:void	file:
unset_reloc_control	relocation.c	/^static void unset_reloc_control(struct reloc_control *rc)$/;"	f	typeref:typename:void	file:
unused_bg_unpin_mutex	fs.h	/^	struct mutex unused_bg_unpin_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:mutex
unused_bgs	fs.h	/^	struct list_head unused_bgs;$/;"	m	struct:btrfs_fs_info	typeref:struct:list_head
unused_bgs_lock	fs.h	/^	spinlock_t unused_bgs_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:spinlock_t
update_backref_cache	relocation.c	/^static int update_backref_cache(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
update_backref_node	relocation.c	/^static void update_backref_node(struct btrfs_backref_cache *cache,$/;"	f	typeref:typename:void	file:
update_balance_args	volumes.c	/^static void update_balance_args(struct btrfs_balance_control *bctl)$/;"	f	typeref:typename:void	file:
update_block_group_item	block-group.c	/^static int update_block_group_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
update_cache_item	free-space-cache.c	/^update_cache_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline_for_stack int	file:
update_commit_stats	transaction.c	/^static void update_commit_stats(struct btrfs_fs_info *fs_info, ktime_t interval)$/;"	f	typeref:typename:void	file:
update_cowonly_root	transaction.c	/^static int update_cowonly_root(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
update_dev_stat_item	volumes.c	/^static int update_dev_stat_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
update_dev_time	volumes.c	/^static void update_dev_time(const char *device_path)$/;"	f	typeref:typename:void	file:
update_existing_head_ref	delayed-ref.c	/^static noinline void update_existing_head_ref(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline void	file:
update_flags	delayed-ref.h	/^	bool update_flags;$/;"	m	struct:btrfs_delayed_extent_op	typeref:typename:bool
update_free_space_extent_count	free-space-tree.c	/^static int update_free_space_extent_count(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
update_inline_extent_backref	extent-tree.c	/^static noinline_for_stack int update_inline_extent_backref($/;"	f	typeref:typename:noinline_for_stack int	file:
update_key	delayed-ref.h	/^	bool update_key;$/;"	m	struct:btrfs_delayed_extent_op	typeref:typename:bool
update_last_dir_index_offset	tree-log.c	/^static int update_last_dir_index_offset(struct btrfs_inode *inode,$/;"	f	typeref:typename:int	file:
update_log_root	tree-log.c	/^static int update_log_root(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
update_processed_blocks	relocation.c	/^static void update_processed_blocks(struct reloc_control *rc,$/;"	f	typeref:typename:void	file:
update_progress	extent-tree.c	/^	struct btrfs_key update_progress;$/;"	m	struct:walk_control	typeref:struct:btrfs_key	file:
update_qgroup_info_item	qgroup.c	/^static int update_qgroup_info_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
update_qgroup_limit_item	qgroup.c	/^static int update_qgroup_limit_item(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
update_qgroup_status_item	qgroup.c	/^static int update_qgroup_status_item(struct btrfs_trans_handle *trans)$/;"	f	typeref:typename:int	file:
update_ref	extent-tree.c	/^	int update_ref;$/;"	m	struct:walk_control	typeref:typename:int	file:
update_ref_for_cow	ctree.c	/^static noinline int update_ref_for_cow(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
update_ref_path	send.c	/^static int update_ref_path(struct send_ctx *sctx, struct recorded_ref *ref)$/;"	f	typeref:typename:int	file:
update_refs	send.c	/^	struct list_head update_refs;$/;"	m	struct:pending_dir_move	typeref:struct:list_head	file:
update_share_count	backref.c	/^static void update_share_count(struct share_check *sc, int oldcount,$/;"	f	typeref:typename:void	file:
update_super_roots	transaction.c	/^static void update_super_roots(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
update_time_for_write	file.c	/^static void update_time_for_write(struct inode *inode)$/;"	f	typeref:typename:void	file:
update_times	ctree.h	/^	bool update_times;$/;"	m	struct:btrfs_replace_extent_info	typeref:typename:bool
upper	backref.h	/^	struct list_head upper;$/;"	m	struct:btrfs_backref_node	typeref:struct:list_head
uptodate	extent_io.c	/^	bool uptodate;$/;"	m	struct:processed_extent	typeref:typename:bool	file:
uptodate	raid56.c	/^	unsigned int uptodate:8;$/;"	m	struct:sector_ptr	typeref:typename:unsigned int:8	file:
uptodate_offset	subpage.h	/^	unsigned int uptodate_offset;$/;"	m	struct:btrfs_subpage_info	typeref:typename:unsigned int
use_bitmap	free-space-cache.c	/^static bool use_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	typeref:typename:bool	file:
use_bitmap	free-space-cache.h	/^	bool (*use_bitmap)(struct btrfs_free_space_ctl *ctl,$/;"	m	struct:btrfs_free_space_op	typeref:typename:bool (*)(struct btrfs_free_space_ctl * ctl,struct btrfs_free_space * info)
use_cluster	extent-tree.h	/^	bool use_cluster;$/;"	m	struct:find_free_extent_ctl	typeref:typename:bool
use_count	transaction.h	/^	refcount_t use_count;$/;"	m	struct:btrfs_trans_handle	typeref:typename:refcount_t
use_count	transaction.h	/^	refcount_t use_count;$/;"	m	struct:btrfs_transaction	typeref:typename:refcount_t
use_path_cache	backref.h	/^	bool use_path_cache;$/;"	m	struct:btrfs_backref_share_check_ctx	typeref:typename:bool
used	block-group.h	/^	u64 used;$/;"	m	struct:btrfs_block_group	typeref:typename:u64
useless_node	backref.h	/^	struct list_head useless_node;$/;"	m	struct:btrfs_backref_cache	typeref:struct:list_head
user_ctx	backref.h	/^	void *user_ctx;$/;"	m	struct:btrfs_backref_walk_ctx	typeref:typename:void *
uuid	ioctl.c	/^	char	uuid[BTRFS_UUID_SIZE];	\/* in *\/$/;"	m	struct:btrfs_ioctl_received_subvol_args_32	typeref:typename:char[]	file:
uuid	volumes.h	/^	u8 *uuid;$/;"	m	struct:btrfs_dev_lookup_args	typeref:typename:u8 *
uuid	volumes.h	/^	u8 uuid[BTRFS_UUID_SIZE];$/;"	m	struct:btrfs_device	typeref:typename:u8[]
uuid_root	fs.h	/^	struct btrfs_root *uuid_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_root *
uuid_tree_rescan_sem	fs.h	/^	struct semaphore uuid_tree_rescan_sem;$/;"	m	struct:btrfs_fs_info	typeref:struct:semaphore
vacancy_only	tests/inode-tests.c	/^static unsigned long vacancy_only = 0;$/;"	v	typeref:typename:unsigned long	file:
val	ulist.h	/^	u64 val;		\/* value to store *\/$/;"	m	struct:ulist_node	typeref:typename:u64
valid_ranges	tests/extent-map-tests.c	/^struct extent_range valid_ranges[][7] = {$/;"	v	typeref:struct:extent_range[][7]
validate	props.c	/^	int (*validate)(const struct btrfs_inode *inode, const char *value,$/;"	m	struct:prop_handler	typeref:typename:int (*)(const struct btrfs_inode * inode,const char * value,size_t len)	file:
validate_convert_profile	volumes.c	/^static inline int validate_convert_profile(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
validate_range	tests/extent-map-tests.c	/^static int validate_range(struct extent_map_tree *em_tree, int index)$/;"	f	typeref:typename:int	file:
values	qgroup.h	/^	u64 values[BTRFS_QGROUP_RSV_LAST];$/;"	m	struct:btrfs_qgroup_rsv	typeref:typename:u64[]
verified_stripes	volumes.h	/^	int verified_stripes; \/* For mount time dev extent verification *\/$/;"	m	struct:map_lookup	typeref:typename:int
verify_bio_data_sectors	raid56.c	/^static void verify_bio_data_sectors(struct btrfs_raid_bio *rbio,$/;"	f	typeref:typename:void	file:
verify_chunk_dev_extent_mapping	volumes.c	/^static int verify_chunk_dev_extent_mapping(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:int	file:
verify_eb_and_memory	tests/extent-io-tests.c	/^static int verify_eb_and_memory(struct extent_buffer *eb, void *memory,$/;"	f	typeref:typename:int	file:
verify_one_dev_extent	volumes.c	/^static int verify_one_dev_extent(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:int	file:
verify_one_sector	raid56.c	/^static int verify_one_sector(struct btrfs_raid_bio *rbio,$/;"	f	typeref:typename:int	file:
verity_descriptor	send.c	/^	void *verity_descriptor;$/;"	m	struct:send_ctx	typeref:typename:void *	file:
version	ioctl.c	/^	__u32 version;			\/* in *\/$/;"	m	struct:btrfs_ioctl_send_args_32	typeref:typename:__u32	file:
version	send.h	/^	__le32 version;$/;"	m	struct:btrfs_stream_header	typeref:typename:__le32
vfs_inode	btrfs_inode.h	/^	struct inode vfs_inode;$/;"	m	struct:btrfs_inode	typeref:struct:inode
wait	block-group.h	/^	wait_queue_head_t wait;$/;"	m	struct:btrfs_caching_control	typeref:typename:wait_queue_head_t
wait	delayed-inode.h	/^	wait_queue_head_t wait;$/;"	m	struct:btrfs_delayed_root	typeref:typename:wait_queue_head_t
wait	inode.c	/^	wait_queue_head_t wait;$/;"	m	struct:btrfs_encoded_read_private	typeref:typename:wait_queue_head_t	file:
wait	ordered-data.h	/^	wait_queue_head_t wait;$/;"	m	struct:btrfs_ordered_extent	typeref:typename:wait_queue_head_t
wait	space-info.h	/^	wait_queue_head_t wait;$/;"	m	struct:reserve_ticket	typeref:typename:wait_queue_head_t
wait	zstd.c	/^	wait_queue_head_t wait;$/;"	m	struct:zstd_workspace_manager	typeref:typename:wait_queue_head_t	file:
wait_current_trans	transaction.c	/^static void wait_current_trans(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
wait_dev_flush	disk-io.c	/^static bool wait_dev_flush(struct btrfs_device *device)$/;"	f	typeref:typename:bool	file:
wait_dev_supers	disk-io.c	/^static int wait_dev_supers(struct btrfs_device *device, int max_mirrors)$/;"	f	typeref:typename:int	file:
wait_eb_writebacks	zoned.c	/^static void wait_eb_writebacks(struct btrfs_block_group *block_group)$/;"	f	typeref:typename:void	file:
wait_extent_bit	extent-io-tree.c	/^void wait_extent_bit(struct extent_io_tree *tree, u64 start, u64 end, u32 bits,$/;"	f	typeref:typename:void
wait_for_commit	transaction.c	/^static noinline void wait_for_commit(struct btrfs_transaction *commit,$/;"	f	typeref:typename:noinline void	file:
wait_for_dest_dir_move	send.c	/^static int wait_for_dest_dir_move(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
wait_for_parent_move	send.c	/^static int wait_for_parent_move(struct send_ctx *sctx,$/;"	f	typeref:typename:int	file:
wait_for_writer	tree-log.c	/^static void wait_for_writer(struct btrfs_root *root)$/;"	f	typeref:typename:void	file:
wait_log_commit	tree-log.c	/^static void wait_log_commit(struct btrfs_root *root, int transid)$/;"	f	typeref:typename:void	file:
wait_on_extent_buffer_writeback	extent_io.c	/^void wait_on_extent_buffer_writeback(struct extent_buffer *eb)$/;"	f	typeref:typename:void
wait_on_state	extent-io-tree.c	/^static void wait_on_state(struct extent_io_tree *tree,$/;"	f	typeref:typename:void	file:
wait_reserve_ticket	space-info.c	/^static void wait_reserve_ticket(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
wait_scrub_stripe_io	scrub.c	/^static void wait_scrub_stripe_io(struct scrub_stripe *stripe)$/;"	f	typeref:typename:void	file:
wait_subpage_spinlock	inode.c	/^static void wait_subpage_spinlock(struct page *page)$/;"	f	typeref:typename:void	file:
waiting_dir_move	send.c	/^struct waiting_dir_move {$/;"	s	file:
waiting_dir_moves	send.c	/^	struct rb_root waiting_dir_moves;$/;"	m	struct:send_ctx	typeref:struct:rb_root	file:
walk_control	extent-tree.c	/^struct walk_control {$/;"	s	file:
walk_control	tree-log.c	/^struct walk_control {$/;"	s	file:
walk_down_backref	relocation.c	/^static struct btrfs_backref_node *walk_down_backref($/;"	f	typeref:struct:btrfs_backref_node *	file:
walk_down_log_tree	tree-log.c	/^static noinline int walk_down_log_tree(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
walk_down_proc	extent-tree.c	/^static noinline int walk_down_proc(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
walk_down_reloc_tree	relocation.c	/^int walk_down_reloc_tree(struct btrfs_root *root, struct btrfs_path *path,$/;"	f	typeref:typename:noinline_for_stack int	file:
walk_down_tree	extent-tree.c	/^static noinline int walk_down_tree(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
walk_down_tree	ref-verify.c	/^static int walk_down_tree(struct btrfs_root *root, struct btrfs_path *path,$/;"	f	typeref:typename:int	file:
walk_log_tree	tree-log.c	/^static int walk_log_tree(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:int	file:
walk_up_backref	relocation.c	/^static struct btrfs_backref_node *walk_up_backref($/;"	f	typeref:struct:btrfs_backref_node *	file:
walk_up_log_tree	tree-log.c	/^static noinline int walk_up_log_tree(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
walk_up_proc	extent-tree.c	/^static noinline int walk_up_proc(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
walk_up_reloc_tree	relocation.c	/^int walk_up_reloc_tree(struct btrfs_root *root, struct btrfs_path *path,$/;"	f	typeref:typename:noinline_for_stack int	file:
walk_up_tree	extent-tree.c	/^static noinline int walk_up_tree(struct btrfs_trans_handle *trans,$/;"	f	typeref:typename:noinline int	file:
walk_up_tree	ref-verify.c	/^static int walk_up_tree(struct btrfs_path *path, int *level)$/;"	f	typeref:typename:int	file:
wanted_disk_byte	backref.h	/^	u64 wanted_disk_byte;$/;"	m	struct:prelim_ref	typeref:typename:u64
warn_32bit_meta_chunk	volumes.c	/^static void warn_32bit_meta_chunk(struct btrfs_fs_info *fs_info,$/;"	f	typeref:typename:void	file:
warn_about_uncommitted_trans	disk-io.c	/^static void warn_about_uncommitted_trans(struct btrfs_fs_info *fs_info)$/;"	f	typeref:typename:void	file:
wbc	extent_io.c	/^	struct writeback_control *wbc;$/;"	m	struct:btrfs_bio_ctrl	typeref:struct:writeback_control *	file:
wbc	extent_io.h	/^	struct writeback_control *wbc;$/;"	m	struct:btrfs_eb_write_context	typeref:struct:writeback_control *
will_overwrite_ref	send.c	/^static int will_overwrite_ref(struct send_ctx *sctx, u64 dir, u64 dir_gen,$/;"	f	typeref:typename:int	file:
window_start	fs.h	/^	u64 window_start;$/;"	m	struct:btrfs_free_cluster	typeref:typename:u64
work	bio.c	/^	struct btrfs_work work;$/;"	m	struct:async_submit_bio	typeref:struct:btrfs_work	file:
work	block-group.h	/^	struct btrfs_work work;$/;"	m	struct:btrfs_caching_control	typeref:struct:btrfs_work
work	delayed-inode.c	/^	struct btrfs_work work;$/;"	m	struct:btrfs_async_delayed_work	typeref:struct:btrfs_work	file:
work	fs.h	/^	struct delayed_work work;$/;"	m	struct:btrfs_discard_ctl	typeref:struct:delayed_work
work	inode.c	/^	struct btrfs_work work;$/;"	m	struct:async_chunk	typeref:struct:btrfs_work	file:
work	inode.c	/^	struct btrfs_work work;$/;"	m	struct:btrfs_delalloc_work	typeref:struct:btrfs_work	file:
work	inode.c	/^	struct btrfs_work work;$/;"	m	struct:btrfs_writepage_fixup	typeref:struct:btrfs_work	file:
work	ordered-data.h	/^	struct btrfs_work work;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:btrfs_work
work	raid56.c	/^	struct work_struct work;$/;"	m	struct:btrfs_plug_cb	typeref:struct:work_struct	file:
work	raid56.h	/^	struct work_struct work;$/;"	m	struct:btrfs_raid_bio	typeref:struct:work_struct
work	scrub.c	/^	struct work_struct work;$/;"	m	struct:scrub_stripe	typeref:struct:work_struct	file:
work_list	ordered-data.h	/^	struct list_head work_list;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:list_head
workers	fs.h	/^	struct btrfs_workqueue *workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_workqueue *
workspace	lzo.c	/^struct workspace {$/;"	s	file:
workspace	zlib.c	/^struct workspace {$/;"	s	file:
workspace	zstd.c	/^struct workspace {$/;"	s	file:
workspace_manager	compression.h	/^	struct workspace_manager *workspace_manager;$/;"	m	struct:btrfs_compress_op	typeref:struct:workspace_manager *
workspace_manager	compression.h	/^struct workspace_manager {$/;"	s
wq	async-thread.h	/^	struct btrfs_workqueue *wq;$/;"	m	struct:btrfs_work	typeref:struct:btrfs_workqueue *
wq	extent-io-tree.h	/^	wait_queue_head_t wq;$/;"	m	struct:extent_state	typeref:typename:wait_queue_head_t
wr_lock	scrub.c	/^	struct mutex            wr_lock;$/;"	m	struct:scrub_ctx	typeref:struct:mutex	file:
wr_tgtdev	scrub.c	/^	struct btrfs_device     *wr_tgtdev;$/;"	m	struct:scrub_ctx	typeref:struct:btrfs_device *	file:
write_all_supers	disk-io.c	/^int write_all_supers(struct btrfs_fs_info *fs_info, int max_mirrors)$/;"	f	typeref:typename:int
write_bitmap_entries	free-space-cache.c	/^write_bitmap_entries(struct btrfs_io_ctl *io_ctl, struct list_head *bitmap_list)$/;"	f	typeref:typename:noinline_for_stack int	file:
write_buf	send.c	/^static int write_buf(struct file *filp, const void *buf, u32 len, loff_t *off)$/;"	f	typeref:typename:int	file:
write_cache_extent_entries	free-space-cache.c	/^int write_cache_extent_entries(struct btrfs_io_ctl *io_ctl,$/;"	f	typeref:typename:noinline_for_stack int	file:
write_compress_length	lzo.c	/^static inline void write_compress_length(char *buf, size_t len)$/;"	f	typeref:typename:void	file:
write_dev_flush	disk-io.c	/^static void write_dev_flush(struct btrfs_device *device)$/;"	f	typeref:typename:void	file:
write_dev_supers	disk-io.c	/^static int write_dev_supers(struct btrfs_device *device,$/;"	f	typeref:typename:int	file:
write_eb_member	accessors.h	/^#define write_eb_member(/;"	d
write_end_work	compression.h	/^		struct work_struct write_end_work;$/;"	m	union:compressed_bio::__anona312c9ad010a	typeref:struct:work_struct
write_error_bitmap	scrub.c	/^	unsigned long write_error_bitmap;$/;"	m	struct:scrub_stripe	typeref:typename:unsigned long	file:
write_error_lock	scrub.c	/^	spinlock_t write_error_lock;$/;"	m	struct:scrub_stripe	typeref:typename:spinlock_t	file:
write_extent_buffer	extent_io.c	/^void write_extent_buffer(const struct extent_buffer *eb, const void *srcv,$/;"	f	typeref:typename:void
write_extent_buffer_chunk_tree_uuid	extent_io.h	/^static inline void write_extent_buffer_chunk_tree_uuid($/;"	f	typeref:typename:void
write_extent_buffer_fsid	extent_io.h	/^static inline void write_extent_buffer_fsid(const struct extent_buffer *eb,$/;"	f	typeref:typename:void
write_flags	inode.c	/^	blk_opf_t write_flags;$/;"	m	struct:async_chunk	typeref:typename:blk_opf_t	file:
write_key_bytes	verity.c	/^static int write_key_bytes(struct btrfs_inode *inode, u8 key_type, u64 offset,$/;"	f	typeref:typename:int	file:
write_one_eb	extent_io.c	/^static noinline_for_stack void write_one_eb(struct extent_buffer *eb,$/;"	f	typeref:typename:noinline_for_stack void	file:
write_pinned_extent_entries	free-space-cache.c	/^static noinline_for_stack int write_pinned_extent_entries($/;"	f	typeref:typename:noinline_for_stack int	file:
write_pointer	scrub.c	/^	u64			write_pointer;$/;"	m	struct:scrub_ctx	typeref:typename:u64	file:
writeback	compression.h	/^	bool writeback;$/;"	m	struct:compressed_bio	typeref:typename:bool
writeback_offset	subpage.h	/^	unsigned int writeback_offset;$/;"	m	struct:btrfs_subpage_info	typeref:typename:unsigned int
writeback_path	inode.c	/^	bool writeback_path;$/;"	m	struct:can_nocow_file_extent_args	typeref:typename:bool	file:
writepage_delalloc	extent_io.c	/^static noinline_for_stack int writepage_delalloc(struct btrfs_inode *inode,$/;"	f	typeref:typename:noinline_for_stack int	file:
writer_wait	transaction.h	/^	wait_queue_head_t writer_wait;$/;"	m	struct:btrfs_transaction	typeref:typename:wait_queue_head_t
writers	locking.h	/^	atomic_t writers;$/;"	m	struct:btrfs_drew_lock	typeref:typename:atomic_t
writers	subpage.h	/^		atomic_t writers;$/;"	m	union:btrfs_subpage::__anonc43c1922010a	typeref:typename:atomic_t
ws_lock	compression.h	/^	spinlock_t ws_lock;$/;"	m	struct:workspace_manager	typeref:typename:spinlock_t
ws_wait	compression.h	/^	wait_queue_head_t ws_wait;$/;"	m	struct:workspace_manager	typeref:typename:wait_queue_head_t
wsm	lzo.c	/^static struct workspace_manager wsm;$/;"	v	typeref:struct:workspace_manager	file:
wsm	zlib.c	/^static struct workspace_manager wsm;$/;"	v	typeref:struct:workspace_manager	file:
wsm	zstd.c	/^static struct zstd_workspace_manager wsm;$/;"	v	typeref:struct:zstd_workspace_manager	file:
xattr_name	props.c	/^	const char *xattr_name;$/;"	m	struct:prop_handler	typeref:typename:const char *	file:
zlib_alloc_workspace	zlib.c	/^struct list_head *zlib_alloc_workspace(unsigned int level)$/;"	f	typeref:struct:list_head *
zlib_compress_pages	zlib.c	/^int zlib_compress_pages(struct list_head *ws, struct address_space *mapping,$/;"	f	typeref:typename:int
zlib_decompress	zlib.c	/^int zlib_decompress(struct list_head *ws, const u8 *data_in,$/;"	f	typeref:typename:int
zlib_decompress_bio	zlib.c	/^int zlib_decompress_bio(struct list_head *ws, struct compressed_bio *cb)$/;"	f	typeref:typename:int
zlib_free_workspace	zlib.c	/^void zlib_free_workspace(struct list_head *ws)$/;"	f	typeref:typename:void
zlib_get_workspace	zlib.c	/^struct list_head *zlib_get_workspace(unsigned int level)$/;"	f	typeref:struct:list_head *
zone_active_bgs	fs.h	/^	struct list_head zone_active_bgs;$/;"	m	struct:btrfs_fs_info	typeref:struct:list_head
zone_active_bgs_lock	fs.h	/^	spinlock_t zone_active_bgs_lock;$/;"	m	struct:btrfs_fs_info	typeref:typename:spinlock_t
zone_cache	zoned.h	/^	struct blk_zone *zone_cache;$/;"	m	struct:btrfs_zoned_device_info	typeref:struct:blk_zone *
zone_capacity	block-group.h	/^	u64 zone_capacity;$/;"	m	struct:btrfs_block_group	typeref:typename:u64
zone_finish_work	block-group.h	/^	struct work_struct zone_finish_work;$/;"	m	struct:btrfs_block_group	typeref:struct:work_struct
zone_info	volumes.h	/^	struct btrfs_zoned_device_info *zone_info;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_zoned_device_info *
zone_size	fs.h	/^	u64 zone_size;$/;"	m	struct:btrfs_fs_info	typeref:typename:u64
zone_size	zoned.h	/^	u64 zone_size;$/;"	m	struct:btrfs_zoned_device_info	typeref:typename:u64
zone_size_shift	zoned.h	/^	u8  zone_size_shift;$/;"	m	struct:btrfs_zoned_device_info	typeref:typename:u8
zone_start_physical	zoned.c	/^static inline u64 zone_start_physical(u32 zone_number,$/;"	f	typeref:typename:u64	file:
zone_start_sector	zoned.c	/^static inline sector_t zone_start_sector(u32 zone_number,$/;"	f	typeref:typename:sector_t	file:
zone_unusable	block-group.h	/^	u64 zone_unusable;$/;"	m	struct:btrfs_block_group	typeref:typename:u64
zoned_bg	extent_io.h	/^	struct btrfs_block_group *zoned_bg;$/;"	m	struct:btrfs_eb_write_context	typeref:struct:btrfs_block_group *
zoned_data_reloc_io_lock	fs.h	/^	struct mutex zoned_data_reloc_io_lock;$/;"	m	struct:btrfs_fs_info	typeref:struct:mutex
zoned_meta_io_lock	fs.h	/^	struct mutex zoned_meta_io_lock;$/;"	m	struct:btrfs_fs_info	typeref:struct:mutex
zstd_alloc_workspace	zstd.c	/^struct list_head *zstd_alloc_workspace(unsigned int level)$/;"	f	typeref:struct:list_head *
zstd_calc_ws_mem_sizes	zstd.c	/^static void zstd_calc_ws_mem_sizes(void)$/;"	f	typeref:typename:void	file:
zstd_cleanup_workspace_manager	zstd.c	/^void zstd_cleanup_workspace_manager(void)$/;"	f	typeref:typename:void
zstd_compress_pages	zstd.c	/^int zstd_compress_pages(struct list_head *ws, struct address_space *mapping,$/;"	f	typeref:typename:int
zstd_decompress	zstd.c	/^int zstd_decompress(struct list_head *ws, const u8 *data_in,$/;"	f	typeref:typename:int
zstd_decompress_bio	zstd.c	/^int zstd_decompress_bio(struct list_head *ws, struct compressed_bio *cb)$/;"	f	typeref:typename:int
zstd_find_workspace	zstd.c	/^static struct list_head *zstd_find_workspace(unsigned int level)$/;"	f	typeref:struct:list_head *	file:
zstd_free_workspace	zstd.c	/^void zstd_free_workspace(struct list_head *ws)$/;"	f	typeref:typename:void
zstd_get_btrfs_parameters	zstd.c	/^static zstd_parameters zstd_get_btrfs_parameters(unsigned int level,$/;"	f	typeref:typename:zstd_parameters	file:
zstd_get_workspace	zstd.c	/^struct list_head *zstd_get_workspace(unsigned int level)$/;"	f	typeref:struct:list_head *
zstd_init_workspace_manager	zstd.c	/^void zstd_init_workspace_manager(void)$/;"	f	typeref:typename:void
zstd_put_workspace	zstd.c	/^void zstd_put_workspace(struct list_head *ws)$/;"	f	typeref:typename:void
zstd_reclaim_timer_fn	zstd.c	/^static void zstd_reclaim_timer_fn(struct timer_list *timer)$/;"	f	typeref:typename:void	file:
zstd_workspace_manager	zstd.c	/^struct zstd_workspace_manager {$/;"	s	file:
zstd_ws_mem_sizes	zstd.c	/^static size_t zstd_ws_mem_sizes[ZSTD_BTRFS_MAX_LEVEL];$/;"	v	typeref:typename:size_t[]	file:
